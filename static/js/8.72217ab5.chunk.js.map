{"version":3,"sources":["components/ColorPicker.js","components/OptionsPopup.js","components/EditorFooter.js","components/Editor.js"],"names":["ColorPicker","selectedNote","setBackColor","setHasChanged","trigger","className","size","nested","modal","position","onChange","color","colorPreview","hex","setColor","colors","triangle","OptionsPopup","open","setOpen","saveAndExit","exportThread","onClick","thread","length","EditorFooter","setCurrentPage","updateNote","editorState","deleteNote","darkMode","useState","pinned","isPinned","setIsPinned","hasChanged","pin","action","text","setPreview","preview","collection","branches","attachedImg","id","createThumbnail","style","borderTop","transform","window","confirm","katex","Quill","register","ImageCompress","modules","toolbar","imageCompressor","maxWidth","maxHeight","imageType","debug","history","delay","maxStack","userOnly","clipboard","matchVisual","handleChange","value","delta","editorRef","setEditorState","current","editor","ops","oldSelection","getSelection","oldPos","index","oldSelectionLength","undefined","setTimeout","console","log","setSelection","googleKeyboardWorkaround","TEXTLIMIT","alert","charLimit","NoteEditor","backColor","useRef","backgroundImage","backgroundColor","zoom","theme","placeholder","ref","scrollingContainer"],"mappings":"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","file":"static/js/8.72217ab5.chunk.js","sourcesContent":["/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nColorPicker component\nImplements the color picker element of the \nrich text editor. Used to select the color \nfor the note from a selection of pastel colors\n*/\n\nimport { GithubPicker } from \"react-color\"\nimport { BsDropletHalf } from \"react-icons/bs\"\nimport Popup from \"reactjs-popup\"\nimport React from 'react'\n\n// Utils function needed to set the color through a switch\n// Takes the chosen color, the current selected note and \n// A function to set the state of the editor\nconst setColor = (color, selectedNote, setBackColor, setHasChanged) => {\n\n    setHasChanged(true)\n    selectedNote.colorPreview = color.hex;\n\n    switch(color.hex) {\n        case '#b80000':\n            selectedNote.color = '#EB9694'\n            break;\n        case '#db3e00':\n            selectedNote.color = '#FAD0C3'\n            break;\n        case '#fccb00':\n            selectedNote.color = '#FEF3BD'\n            break;\n        case '#008b02':\n            selectedNote.color = '#C1E1C5'\n            break;\n        case '#006b76':\n            selectedNote.color = '#BEDADC'\n            break;\n        case '#1273de':\n            selectedNote.color = '#C4DEF6'\n            break;\n        case '#5300eb':\n            selectedNote.color = '#d4c4fb'\n            break;\n        case '#ededed':\n            selectedNote.color = '#ffffff'\n            break;\n        default:\n            break\n    }\n    setBackColor(selectedNote.color)\n}\n\n// Color Picker component\n// Takes the current selected note and \n//a function to set the color state of the editor\nconst ColorPicker = ({\n    selectedNote,\n    setBackColor,\n    setHasChanged\n}) => {\n    \n    return (\n        <Popup\n            trigger={\n                <div>\n                    <BsDropletHalf\n                        className='tools-btn'\n                        size='1.6em'\n                    />\n                </div>\n            } \n            nested\n            modal\n            position='right'\n        >\n            <div className='picker'>\n                <GithubPicker \n                    onChange={(color)=> setColor(color, selectedNote, setBackColor, setHasChanged)}\n                    colors={['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#5300EB', '#ededed']}\n                    triangle='hide'\n                />\n            </div>\n        </Popup>\n    )\n}\nexport default ColorPicker","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nOptionsPopup component\nTiny component that defines the options popup of the editor\nIt appears when the three dots are clicked\n*/\n\nimport { FiMoreVertical } from \"react-icons/fi\"\nimport Popup from \"reactjs-popup\"\nimport React from 'react'\n\nconst OptionsPopup = ({\n    selectedNote,\n    open,\n    setOpen,\n    saveAndExit,\n    exportThread\n}) => {\n\n    return (\n        <Popup trigger={\n            <div>\n                <FiMoreVertical\n                    className='tools-btn'\n                    size='1.5em'\n                    onClick={()=>setOpen(true)}\n                />   \n            </div>\n        } \n        nested\n        modal\n        open={open} \n        >   \n            <div className='blurrer' onClick={() => setOpen(false)}>\n                <div className='modal menu-popup'>\n\n                    <button \n                        className='popup-btn tools-btn'\n                        onClick={() => saveAndExit('get-occurrences')}\n                    >\n                        Show Threads or Collections that contain this Note\n                    </button>\n\n                    {selectedNote.thread.length ?\n                        <div>\n\n                            <button \n                                className='popup-btn tools-btn'\n                                onClick={() => exportThread()}\n                            >\n                                Print or Export whole Thread\n                            </button>\n\n                        </div> : null\n                    }\n                </div>\n            </div>\n        </Popup>\n    )\n}\nexport default OptionsPopup","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nEditorFooter component\nDefines the buttons of the footer and calls the respective functions\n*/\n\nimport { AiOutlinePushpin, AiFillPushpin }  from 'react-icons/ai'\nimport { BsTrash } from 'react-icons/bs'\nimport { useState } from 'react';\nimport {IoIosArrowRoundBack} from 'react-icons/io'\nimport ColorPicker from './ColorPicker';\nimport OptionsPopup from './OptionsPopup';\nimport { createThumbnail, setPreview } from '../helpers/DashboardUtils';\nimport React from 'react'\n\n// Editor footer component\n// takes setCurrentPage to go back to the notes page when editing is finished\n// the selected note, two functions to update or delete the note\n// the editorState that contains the html\n// the function to set the background color of a note and \n// a function to export the threas as PDF or to print\nconst EditorFooter = ({\n    setCurrentPage,\n    selectedNote,\n    updateNote,\n    editorState,\n    deleteNote,\n    darkMode,\n    exportThread,\n    setBackColor\n}) => {\n\n    // State that defines whether the note is pinned, used to show the \n    // change in the pin icon\n    const [isPinned, setIsPinned] = useState(selectedNote.pinned)\n    // State to define whether the popup options have been opened through the\n    // three dots button\n    const [open, setOpen] = useState(false);\n    // Check if the editing note has changed\n    const [hasChanged, setHasChanged] = useState(false)\n\n    // Function to pin the note\n    const pin = () => {\n        setHasChanged(true)\n        selectedNote.pinned = !selectedNote.pinned\n        setIsPinned(selectedNote.pinned)\n    }\n\n    // Function to save and exit the note when the back arrow is pressed\n    const saveAndExit = (action) => {\n\n        if(selectedNote.text===editorState && !hasChanged){\n            setCurrentPage('notes')\n            createThumbnail(selectedNote)\n            return false\n        }\n\n        // Set the note text to be the editor state and compute the preview\n        selectedNote.text = editorState\n        setPreview(selectedNote)\n\n        // If the note has no text, thread, collection, branches, images,\n        // delete it\n        if(\n        selectedNote.preview === 'empty note kept for its links' &&\n        !selectedNote.thread.length &&\n        !selectedNote.collection.length &&\n        !selectedNote.branches.length &&\n        !selectedNote.attachedImg\n        ){\n            deleteNote(selectedNote.id);\n            setCurrentPage('notes');\n            return false\n        }\n\n        // Otherwise save it and go back to the notes page\n        else{\n            updateNote(selectedNote, action);\n            setCurrentPage('notes');\n            return true;\n        }\n    }\n\n    // Function called when the delete button is pressed\n    const callDelete = () => {\n        if(window.confirm('Are you sure you want to delete the note?')){\n            deleteNote(selectedNote.id); \n            setCurrentPage('notes')\n        }\n    }\n\n    return(\n\n        <div>\n            <div className='page-footer' style={{\n                color: darkMode ? '#636363' : '#171717',\n                borderTop: darkMode ? '1px solid #303030' : '1px solid #cccccc'\n            }}>\n\n                <IoIosArrowRoundBack\n                    className='tools-btn'\n                    onClick={() => saveAndExit()}\n                    size='2.5em'\n                />\n\n                {!isPinned ?\n                    <AiOutlinePushpin\n                        className='tools-btn'\n                        onClick={() => pin()}\n                        size='1.75em'\n                    /> :\n                    <AiFillPushpin\n                        className='tools-btn'\n                        onClick={() => pin()}\n                        size='1.75em'\n                        style={{transform:'rotate(-45deg)'}}\n                    /> \n                }\n\n                <ColorPicker \n                    selectedNote={selectedNote}\n                    setBackColor={setBackColor}\n                    setHasChanged={setHasChanged}\n                />\n\n                <BsTrash\n                    className='tools-btn'\n                    onClick={() => callDelete()}\n                    size='1.65em'\n                />         \n\n                <OptionsPopup \n                    selectedNote={selectedNote}\n                    open={open}\n                    setOpen={setOpen}\n                    saveAndExit={saveAndExit}\n                    exportThread={exportThread}\n                />          \n\n            </div>\n\n\n        </div>\n    );\n}\n\nexport default EditorFooter;","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nEditor component\nInitialises the Quill rich text editor\nwith its own toolbar and defines the action of the footer bar\n*/\n\nimport React from 'react';\nimport ReactQuill, {Quill} from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport {useState, useRef} from \"react\"\nimport katex from \"katex\";\nimport \"katex/dist/katex.min.css\";\nimport EditorFooter from \"./EditorFooter\"\nimport ImageCompress from 'quill-image-compress';\nimport { TEXTLIMIT } from './Dashboard';\nimport { charLimit } from '../helpers/Messages';\n\n// Register the formula compiler and the imageCompressor\nwindow.katex = katex;\nQuill.register(\"modules/imageCompressor\", ImageCompress);\n\n// Define what elements to have in the editor toolbar and in what order\nconst modules = {\n    toolbar: [ \n          'bold', \n          'italic', \n          { 'color': [] }, \n          { 'background': [] },\n          {'list': 'ordered'}, \n          {'list': 'bullet'},\n          { 'align': [] }, \n          'image',\n          'code-block',\n          'formula',\n          'blockquote',\n          'link'\n        ],\n    \n    // Image compressor props, kicks in automatically if max size is exceeded\n    imageCompressor: {\n          maxWidth: 800,\n          maxHeight: 800,\n          imageType: 'image/jpeg',\n          debug: false,\n    },\n\n    history: {\n        delay: 2000,\n        maxStack: 500,\n        userOnly: true\n    },\n\n    clipboard: {\n        matchVisual: false\n    }\n}\n\n// Function needed to solve a bug of Android keyboard with Quill editor\n// taken from https://github.com/quilljs/quill/issues/3240#issuecomment-849679016\n// Basically, the cursor position was not going newline when pressing enter\n// Massive thank you albertaleksieiev!\nconst googleKeyboardWorkaround = (delta, editor) => {\n\n    // retrieves the editors selection\n    var ops = delta['ops']\n    var oldSelection = editor.getSelection()\n    if(oldSelection){\n        var oldPos = oldSelection.index\n        var oldSelectionLength = oldSelection.length\n\n        // only applies the workaround if the last operation performed is not one of the following\n        if (\n        ops[0][\"retain\"] === undefined || \n        !ops[1] || \n        !ops[1][\"insert\"] || \n        !ops[1][\"insert\"] || \n        ops[1][\"insert\"] !== \"\\n\" || \n        oldSelectionLength > 0\n        ) {\n            return\n        }\n\n        // applies the workaround if a space has been pressed and the cursor has not \n        // moved within 30 milliseconds\n        setTimeout(function () {\n            var newPos = editor.getSelection().index\n            if (newPos === oldPos) {\n            console.log(\"Change selection bad pos\")\n            editor.setSelection(editor.getSelection().index + 1, 0)\n            }\n        }, 30);\n    }\n}\n\n// Function that updates the editor state\n// takes the new value of the editor (the html of the text)\n// the delta, which is a more comprehensive state of the editor which\n// includes the operations performed, the editorRef that is used to \n// access the getSelection method and the setEditorState function that updates the \n// local state variable of this component\nconst handleChange = (value, delta, editorRef, setEditorState) => {\n\n    // if the editor has finished initialising\n    if(editorRef.current){\n\n        // apply the workaround\n        const quill = editorRef.current.editor\n        googleKeyboardWorkaround(delta, quill);\n\n        // if the length of the note exceeds the maximum limit\n        // don't save any further text and send an alert\n        if(value.length < TEXTLIMIT){\n            setEditorState(value)\n        }\n        else{\n            alert(charLimit)\n        }\n    } \n}\n\n// NoteEditor component definition\n// takes a function setCurrentPage that allows it to go back to the notes\n// pace once editing is done, the selectedNote to edit, an updateNote function\n// to actualise the update, a deleteNote function to delete the note if the \n// note is empty, the darkMode flad and the export thread function\nconst NoteEditor = ({ \n    setCurrentPage, \n    selectedNote, \n    updateNote, \n    deleteNote, \n    darkMode,\n    exportThread\n\n}) => {\n\n    // State of the editor, contains the html of the text that is being inserted by the user\n    const [editorState, setEditorState] = useState(selectedNote.text ? selectedNote.text : '');\n    // State that stores the background color of a note\n    const [backColor, setBackColor] = useState(selectedNote.color)\n    // Reference to the Quill object so that it is possible to access its methods\n    const editorRef = useRef(null);\n\n    return (\n            <div className='container'\n                style={ darkMode ? (backColor!=='#ffffff' ? \n                    {backgroundImage: 'linear-gradient(35deg, #171717 90%, ' + backColor + ' 90%)', color: 'white'} \n                    : {backgroundColor: '#171717', color: 'white'}) :\n                    {backgroundColor: backColor}\n                }\n            >\n                <div className=\"editor no-scrollbar\" id=\"editor\">\n                    <ReactQuill \n                        style={{zoom: 1.4} }\n                        theme=\"snow\"\n                        value={editorState}\n                        onChange={(value, delta) => handleChange(value, delta, editorRef, setEditorState)}\n                        modules={modules}\n                        placeholder={'Write your next idea here...'}\n                        ref={editorRef}\n                        scrollingContainer='#editor'\n                    />\n                </div>\n\n                <EditorFooter \n                    setCurrentPage={setCurrentPage} \n                    selectedNote={selectedNote}\n                    updateNote={updateNote}\n                    editorState={editorState}\n                    deleteNote={deleteNote}\n                    darkMode={darkMode}\n                    exportThread={exportThread}\n                    setBackColor={setBackColor}\n                    />\n            </div>\n        );\n      }\n\nexport default NoteEditor;"],"sourceRoot":""}