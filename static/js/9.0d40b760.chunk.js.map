{"version":3,"sources":["components/ColorPicker.js","components/Footer.js","components/Note.js","components/Wrapper.js","components/NotesList.js","components/SearchBar.js","components/SearchLabel.js","components/SearchArea.js","components/WorkspaceLabel.js","components/WorkspaceArea.js","components/LinksArea.js","components/NotesDragContext.js","components/NotesPage.js"],"names":["ColorPicker","selectedNote","setBackColor","setHasChanged","searchProps","setSearchProps","searchCleanerCheck","trigger","className","style","color","colorFilter","undefined","fontSize","size","nested","modal","position","onChange","newSearchProps","hex","colorPreview","setColor","colors","triangle","Footer","threadOrCollectionManage","threadOrCollection","setRootsOrBranches","rootsOrBranches","setDarkMode","mergeMode","setMergeMode","setCurrentPage","notesUpdating","loadedUser","synchNotes","darkMode","darkModeSwitch","window","localStorage","setItem","previousDarkMode","borderTop","backgroundColor","background","boxShadow","onClick","transform","previous","alert","mergeModeOn","type","height","width","driveNotConnected","Note","note","areaName","index","handleNotePress","openEditor","draggableId","ui_id","provided","snapshot","id","name","ref","innerRef","draggableProps","dragHandleProps","onDoubleClick","backgroundImage","border","isDropAnimating","pinned","thread","length","collection","branches","roots","attachedImg","text","dangerouslySetInnerHTML","__html","preview","Wrapper","notesLength","draggableInfo","notes","isDropDisabled","sourceArea","find","droppableId","droppableProps","isDraggingOver","minWidth","placeholder","SLICESIZE","scrollTarget","beginning","align","dir","currentSlice","setCurrentSlice","prop","inline","focusPos","document","getElementById","scrollIntoView","sessionStorage","NotesList","handleAddNote","workspaceFlag","cleanFilters","setCleanFilters","retrievedSlice","getItem","useState","parseInt","isVisible","setIsVisible","useEffect","slicedNotes","slice","scrollSucceded","targetElement","goClean","newCleanFilters","areSlicesScrolled","addButtonElement","visibility","direction","map","threadFilter","collectionFilter","imgFilter","searchText","areFiltersOn","SearchBar","cleanSearch","padding","event","target","value","toLowerCase","marginTop","margin","SearchLabel","closeCollection","dashboard","openedCollectionId","getCaption","get","SearchArea","addNote","selectNote","search","selectedNoteId","WorkspaceLabel","closeAndSave","openedWorkspaceId","workspaceIds","WorkspaceArea","workspace","LinksArea","links","editorMode","selection","prevSelectedNoteId","NoteDragContext","handleOnDragEnd","setDraggableInfo","onDragEnd","onDragStart","start","navigator","vibrate","source","sourceIndex","noteFound","NotesPage","GAPIloaded","currentUser"],"mappings":"6JA0HeA,IA9CK,SAAC,GAOd,IANHC,EAME,EANFA,aACAC,EAKE,EALFA,aACAC,EAIE,EAJFA,cACAC,EAGE,EAHFA,YACAC,EAEE,EAFFA,eACAC,EACE,EADFA,mBAGA,OACI,cAAC,IAAD,CACIC,QACI,qBACAC,UAAU,YACVC,MAAO,CAACC,MAAQN,EAAcA,EAAYO,iBAAcC,EAAWC,SAAU,QAF7E,SAIKT,EAAc,SACX,cAAC,IAAD,CACIU,KAAK,YAKrBC,QAAM,EACNC,OAAK,EACLC,SAAS,QAfb,SAiBI,qBAAKT,UAAU,SAAf,SACI,cAAC,IAAD,CACIU,SAAU,SAACR,GAAD,OAxFb,SACbA,EACAT,EACAC,EACAC,EACAE,EACAC,GAIA,GAAGD,EACCA,GACI,SAACD,GACG,IAAMe,EAAc,eAAOf,GAG3B,OAFAe,EAAeR,YAAcD,EAAMU,IACnCd,EAAmBa,GACZA,SANnB,CAeA,OAHAhB,GAAc,GACdF,EAAaoB,aAAeX,EAAMU,IAE3BV,EAAMU,KACT,IAAK,UACDnB,EAAaS,MAAQ,UACrB,MACJ,IAAK,UACDT,EAAaS,MAAQ,UACrB,MACJ,IAAK,UACDT,EAAaS,MAAQ,UACrB,MACJ,IAAK,UACDT,EAAaS,MAAQ,UACrB,MACJ,IAAK,UACDT,EAAaS,MAAQ,UACrB,MACJ,IAAK,UACDT,EAAaS,MAAQ,UACrB,MACJ,IAAK,UACDT,EAAaS,MAAQ,UACrB,MACJ,IAAK,UACDT,EAAaS,MAAQ,UAK7BR,EAAa,CAACQ,MAAOT,EAAaS,MAAOW,aAAcpB,EAAaoB,gBAoChDC,CACIZ,EACAT,EACAC,EACAC,EACAE,EACAC,IAGRiB,OAAQ,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACtFC,SAAS,e,wIC6HdC,EArNA,SAAC,GAcT,IAbHC,EAaE,EAbFA,yBACAC,EAYE,EAZFA,mBACAC,EAWE,EAXFA,mBACAC,EAUE,EAVFA,gBACAC,EASE,EATFA,YACAC,EAQE,EARFA,UACAC,EAOE,EAPFA,aACA/B,EAME,EANFA,aACAgC,EAKE,EALFA,eACAC,EAIE,EAJFA,cACAC,EAGE,EAHFA,WACAC,EAEE,EAFFA,WACAC,EACE,EADFA,SAGMC,EAAiB,WACnBC,OAAOC,aAAaC,QAAQ,aAAcJ,GAC1CP,GAAY,SAACY,GAAD,OAAuBA,MAEvC,OACI,sBAAKlC,UAAU,cACXC,MAAO4B,EACH,CAACM,UAAW,oBAAqBC,gBAAiB,WAElD,CAACD,UAAW,UAAWE,WAAY,kCAAmCC,UAAW,mBAJzF,UAOKT,EACG,cAAC,IAAD,CACI7B,UAAU,YACVuC,QAAS,kBAAMd,EAAe,aAC9BnB,KAAK,QACLL,MAAO,CAACuC,UAAW,iBAGvB,cAAC,IAAD,CACIxC,UAAU,YACVuC,QAAS,kBAAMd,EAAe,aAC9BnB,KAAK,UAIXa,EAyBEU,EACI,cAAC,IAAD,CACIU,QAAS,kBACLrB,GACKC,IAGTb,KAAK,QACLN,UAAU,YACVC,MAAO,CAACuC,UAAW,+BAGvB,cAAC,IAAD,CACID,QAAS,kBACLrB,GACKC,IAGTb,KAAK,QACLN,UAAU,cA3ClB6B,EACI,cAAC,IAAD,CACIU,QAAS,kBACLrB,GACKC,IAGTb,KAAK,QACLN,UAAU,YACVC,MAAO,CAACuC,UAAW,+BAGvB,cAAC,IAAD,CACID,QAAS,kBACLrB,GACKC,IAGTb,KAAK,QACLN,UAAU,cA6BlB6B,EACI,cAAC,IAAD,CACIU,QAAS,kBACLnB,GACI,SAACqB,GAAD,OAAeA,MAGvBnC,KAAK,MACLN,UAAU,YACVC,OAAQoB,GAAmB,CAACmB,UAAW,gBAG3C,cAAC,IAAD,CACID,QAAS,kBACLnB,GACI,SAACqB,GAAD,OAAeA,MAGvBnC,KAAK,QACLN,UAAU,YACVC,MAAOoB,EAAkB,CAACmB,UAAW,4BAA8B,CAACA,UAAW,mBAI1F/C,EACGoC,EACI,cAAC,IAAD,CACIU,QAAS,WACDf,GACI,SAACiB,GAAD,OAAeA,KAEflB,GACAmB,MAAMC,MAIlBrC,KAAK,QACLN,UAAU,YACVC,MAAO,CAACuC,UAAU,gCAGtB,cAAC,IAAD,CACID,QAAS,WACDf,GACI,SAACiB,GAAD,OAAeA,KAEflB,GACAmB,MAAMC,MAIlBrC,KAAK,QACLN,UAAU,YACVC,MAAO,CAACuC,UAAU,iCAE5B,KAEDX,EACG,cAAC,IAAD,CACIU,QAAS,kBAAMT,KACfxB,KAAK,QACLN,UAAU,YACVC,MAAO,CAACuC,UAAW,6BAGvB,cAAC,IAAD,CACAD,QAAS,kBAAMT,KACfxB,KAAK,QACLN,UAAU,cAIb2B,EACGD,EAAc,EAEVG,EACI,cAAC,IAAD,CACIvB,KAAK,QAGT,cAAC,IAAD,CACIsC,KAAK,UACL1C,MAAM,UACN2C,OAAO,QACPC,MAAM,UAKdjB,EACI,cAAC,IAAD,CACIvB,KAAK,MACLN,UAAU,YACVuC,QAAS,kBAAIX,KACb3B,MAAO,CAACuC,UAAW,kBAGvB,cAAC,IAAD,CACIlC,KAAK,QACLN,UAAU,YACVuC,QAAS,kBAAIX,OAI7BC,EACI,cAAC,IAAD,CACIvB,KAAK,QACLiC,QAAS,kBAAIG,MAAMK,MACnB9C,MAAO,CAACuC,UAAW,gBAGvB,cAAC,IAAD,CACIlC,KAAK,QACLiC,QAAS,kBAAIG,MAAMK,Y,sFC7HxBC,EAtFF,SAAC,GAYP,IAXNC,EAWK,EAXLA,KACAC,EAUK,EAVLA,SACAC,EASK,EATLA,MACAC,EAQK,EARLA,gBACAvB,EAOK,EAPLA,SACApC,EAMK,EANLA,aACA8B,EAKK,EALLA,UACA8B,EAIK,EAJLA,WACAhC,EAGK,EAHLA,gBAGK,EAFLF,mBAIA,OAEE,cAAC,IAAD,CAA4BmC,YAAaL,EAAKM,MAAOJ,MAAOA,EAA5D,SACE,SAACK,EAAUC,GAAX,OAEA,8BACC,yDACAzD,WACEuB,GAAa9B,EAAaiE,KAAKT,EAAKS,GAAM,+BAExC7B,GAAYpC,GAAgBA,EAAaiE,KAAKT,EAAKS,IACrD,mDACC7B,KAAcpC,GAAgBA,EAAaiE,KAAKT,EAAKS,KACtD,gCACE7B,GAAYpC,GAAgBA,EAAaiE,KAAKT,EAAKS,IACrD,gDACE7B,KAAcpC,GAAeA,EAAaiE,KAAKT,EAAKS,KACtD,gCAEFC,KAAMV,EAAKS,GACXA,GAAIT,EAAKM,MACTK,IAAKJ,EAASK,UACVL,EAASM,gBACTN,EAASO,iBAjBb,IAkBAxB,QAAS,WAAMa,EAAgBH,IAC/Be,cAAe,kBAAKX,EAAWJ,IAC/BhD,MACGsB,GAAa9B,EAAaiE,KAAKT,EAAKS,GAQpCF,EAASM,eAAe7D,MAPxB4B,GAAyB,YAAboB,EAAK/C,MAIF,YAAb+C,EAAK/C,MAAL,aACC+D,gBAAiB,+CAA+ChB,EAAKpC,aAAe,SAAY2C,EAASM,eAAe7D,OACvHuD,EAASM,eAAe7D,MAL3BR,GAAgBA,EAAaiE,KAAKT,EAAKS,GAAvC,aACCtB,gBAAiBa,EAAK/C,OAAUsD,EAASM,eAAe7D,OADzD,aAEAmC,gBAAiBa,EAAK/C,MAAOgE,OAAQ,aAAcjB,EAAK/C,OAAUsD,EAASM,eAAe7D,OAzB9F,UAgCEwD,EAASU,gBACV,gCACElB,EAAKmB,QAAqB,gBAAXlB,GACf,cAAC,IAAD,CAAgB5C,KAAK,OAAON,UAAU,gBAEtCiD,EAAKoB,OAAOC,OACZ,cAAC,IAAD,CAAQhE,KAAK,OAAON,UAAU,gBAAkB,GAEhDiD,EAAKsB,WAAWD,OAChB,cAAC,IAAD,CAAUhE,KAAK,OAAON,UAAU,gBAAkB,IAGjDqB,GAAmB4B,EAAKuB,SAASF,OAClC,cAAC,IAAD,CAAQhE,KAAK,OAAON,UAAU,gBAAkB,GAEhDqB,GAAmB4B,EAAKwB,MAAMH,OAC9B,cAAC,IAAD,CAAQhE,KAAK,OAAON,UAAU,cAAcC,MAAO,CAACuC,UAAW,gBAAoB,GAEnFS,EAAKyB,cAAgBzB,EAAKyB,YAAY,GACtC,cAAC,IAAD,CAAapE,KAAK,OAAON,UAAU,cAAcC,MAAO,CAACuC,UAAU,oBAAuB,MAIzFS,EAAKyB,aAAgBzB,EAAKyB,YAAY,GAExC,qBAAK1E,UAAU,uBAAuBC,MAAO,CAACgE,gBAAiB,OAAQhB,EAAK0B,KAAM,OADlF,qBAAK3E,UAAU,4BAA4B4E,wBAAyB,CAACC,OAAQ5B,EAAK6B,mBA5DvE7B,EAAKM,QCyETwB,EAlGC,SAAC,GAMV,IALN5D,EAKK,EALLA,mBACG6D,EAIE,EAJFA,YACAC,EAGE,EAHFA,cACAC,EAEE,EAFFA,MACArD,EACE,EADFA,SAMMsD,EACyB,gBAA3BF,EAAcG,aAEVJ,EAAY,EAERC,EAAchC,KAAKoB,OAAOC,OAAO,GACjCW,EAAchC,KAAKsB,WAAWD,OAAO,GAIpCW,EAAchC,KAAKoB,OAAOC,SAC1BW,EAAchC,KAAKsB,WAAWD,cAIgBlE,IAAtD8E,EAAMG,MAAK,SAAApC,GAAI,OAAIA,EAAKS,KAAKuB,EAAchC,KAAKS,MAErD,OAEI,cAAC,IAAD,CACI4B,YAAY,eACZH,eAAgBA,EAFpB,SAKK,SAAC3B,EAAUC,GAAX,OACG,8CACIzD,UAAU,WACNwD,EAAS+B,gBAFjB,IAGI3B,IAAKJ,EAASK,SACd5D,MACI+E,EAAc,EAAd,2BAGQnD,EACIV,EAAqB,CAACiB,gBAAgB,UAAWlC,MAAM,SACrD,CAACkC,gBAAgB,UAAWlC,MAAM,SAEpCiB,EAAqB,CAACiB,gBAAgB,UAAWlC,MAAM,SACrD,CAACkC,gBAAgB,UAAWlC,MAAM,WAEvCuD,EAAS+B,gBAAkB,CAACC,SAAS,QAG9C5D,EACA,CAACO,gBAAiB,UAAWqD,SAAS,MAAOvF,MAAO,WAEpD,CAACkC,gBAAiB,UAAWqD,SAAS,MAAOnD,UAAW,uBArBhE,UAyBA,qBAAKtC,UAAU,gBAAf,SAAgCgF,EAAY,EAAI,OAAS,mBAExDxB,EAASkC,YAGNjC,EAAS+B,eAEJR,EAAc,EAEP,sBAAKhF,UAAU,gBAAf,kBACS,uBACJmB,EAAqB,WAAa,eACnC,uBAHJ,iBASA,sBAAKnB,UAAU,gBAAf,mBAEI,uBACCiF,EAAchC,KAAKoB,OAAOC,OACvB,SAAW,gBAIvB,aChFtBqB,EAAY,GACLC,EAAe,CAACC,WAAW,GAGlCC,EAAQ,SAACC,EAAKC,EAAcC,EAAiBf,EAAOhC,GAIzD,IAAMgD,GAAc,IAAPH,EAAW,CAACI,OAAO,SAAW,CAACA,OAAO,OAC/CC,EAAWJ,EAAaL,EAAUA,EAAU,EAG7CS,EAASlB,EAAMZ,OAAO,IACxB8B,EAASlB,EAAMZ,OAAO,GAKvB+B,SAASC,eAAepB,EAAMkB,GAAU7C,OAAOgD,eAAeL,GAC9DD,EAAgBD,EAAaD,GAC7BhE,OAAOyE,eAAevE,QAAQ,iBAAiBiB,EAAU8C,EAAaD,IA2MxDU,EAxMG,SAAC,GAgBZ,IAfNvB,EAeK,EAfLA,MACAwB,EAcK,EAdLA,cACAxD,EAaK,EAbLA,SACAE,EAYK,EAZLA,gBACAvB,EAWK,EAXLA,SACApC,EAUK,EAVLA,aACA8B,EASK,EATLA,UACAJ,EAQK,EARLA,mBACAkC,EAOK,EAPLA,WACAsD,EAMK,EANLA,cACAtF,EAKK,EALLA,gBACA8D,EAIK,EAJLA,eACAF,EAGK,EAHLA,cACA2B,EAEK,EAFLA,aACAC,EACK,EADLA,gBAGMC,EAAiB/E,OAAOyE,eAAeO,QAAQ,iBAAiB7D,GAFjE,EAImC8D,mBACvCF,EACAG,SAASH,GACT,GAPI,mBAIEd,EAJF,KAIgBC,EAJhB,OAU6Be,oBAAS,GAVtC,mBAUEE,EAVF,KAUaC,EAVb,KAaLC,qBAAU,WACT,IAAMC,EAAcnC,EAAMoC,MAAMtB,EAAaL,GAAYK,EAAa,GAAGL,EAAUA,GAC/E4B,GAAe,EAGnB,GAAG9H,EAAa,CACf,IAAM2G,EAAWiB,EAAYhC,MAAK,SAAApC,GAAI,OAAIA,EAAKS,KAAOjE,EAAaiE,MACnE,GAAG0C,EAAS,CACX,IAAMoB,EAAgBnB,SAASC,eAAeF,EAAS7C,OACpDiE,IACFA,EAAcjB,eAAe,CAACJ,OAAQ,WACtCoB,GAAe,IAMdF,EAAY/C,QAAyB,IAAf0B,GAAqBuB,GAA6B,gBAAXrE,IAChE+C,EAAgB,GAChBlE,OAAOyE,eAAevE,QAAQ,iBAAiBiB,EAAU,IAE1DiE,GAAa,KAEX,CAACjC,IAEJkC,qBAAU,WACK,gBAAXlE,GAA4B0D,EAAaa,SAAWzB,EAAe,IACrEC,EAAgB,GAChBlE,OAAOyE,eAAevE,QAAQ,iBAAiBiB,EAAU,MAGxD,CAAC0D,IAEJQ,qBAAU,WACT,GAAc,gBAAXlE,EAAyB,CAC3B,IAAMwE,EAAe,eAAOd,GAO5B,GALCc,EAAgBC,kBADd3B,EAAe,EAMfJ,EAAaC,UAAU,CACzB,IAAM+B,EAAmBvB,SAASC,eAAe,QAC9CsB,GACFA,EAAiBrB,iBAElBX,EAAaC,WAAY,EAE1BgB,EAAgBa,MAGf,CAAC1B,IAEJ,IAAMqB,EAAcnC,EAAMoC,MAAMtB,EAAaL,GAAYK,EAAa,GAAGL,EAAUA,GAEnF,OAEC,qBAAK1F,MAAO,CAAC4H,WAAYX,EAAY,UAAY,UAAjD,SAEC,cAAC,IAAD,CACC5B,YAAapC,EACb4E,UAAU,aACV9H,UAAU,oBACVmF,eAAgBA,EAJjB,SAOE,SAAC3B,GAAD,OAEA,6CACCxD,UAAU,cACNwD,EAAS+B,gBAFd,IAGC3B,IAAKJ,EAASK,SACdH,GAAIR,EAJL,UAME,8BACE8C,EAAa,EACbnE,EACC,cAAC,IAAD,CACC7B,UAAU,sBACVuC,QAAS,kBAAMuD,GAAO,EAAGE,EAAcC,EAAiBf,EAAOhC,IAC/D5C,KAAK,QACLJ,MAAM,YAGP,cAAC,IAAD,CACCF,UAAU,sBACVuC,QAAS,kBAAMuD,GAAO,EAAGE,EAAcC,EAAiBf,EAAOhC,IAC/D5C,KAAK,UAEN,OAGU,mBAAX4C,GAA+ByD,GAEhC,cAAC,EAAD,CACCxF,mBAAoBA,EACpB6D,YAAaE,EAAMZ,OACnBW,cAAeA,EACfC,MAAOA,EACPrD,SAAUA,IAIZ,8BACc,gBAAXqB,GAA2C,IAAf8C,IAC5BnE,EACD,cAAC,IAAD,CACC7B,UAAU,8BACVuC,QAAS,kBAAMmE,KACfpG,KAAK,SACLJ,MAAM,UACND,MAAO,CAACuC,UAAW,cACnBkB,GAAG,SAGJ,cAAC,IAAD,CACC1D,UAAU,8BACVuC,QAAS,kBAAMmE,KACfpG,KAAK,SACLoD,GAAG,YAML2D,EAAYU,KAAI,SAAC9E,EAAME,GAAP,OAEhB,cAAC,EAAD,CAECF,KAAMA,EACNC,SAAUA,EACVC,MAAOA,EAAM6C,EAAaL,EAC1BvC,gBAAiBA,EACjBvB,SAAUA,EACVpC,aAAcA,EACd8B,UAAWA,EACX8B,WAAYA,EACZhC,gBAAiBA,EACjBF,mBAAoBA,GAVf8B,EAAKM,UAcXC,EAASkC,YAEV,+BACGM,EAAa,GAAGL,EAAUA,EAAUT,EAAMZ,OAE3CzC,EACC,cAAC,IAAD,CACC7B,UAAU,sBACVuC,QAAS,kBAAMuD,EAAM,EAAGE,EAAcC,EAAiBf,EAAOhC,IAC9D5C,KAAK,QACLJ,MAAM,YAGP,cAAC,IAAD,CACCF,UAAU,sBACVuC,QAAS,kBAAMuD,EAAM,EAAGE,EAAcC,EAAiBf,EAAOhC,IAC9D5C,KAAK,UAEN,iBCzNJR,EAAqB,SAACa,EAAgBiG,EAAcC,GACzD,IAAMa,EAAe,eAAOd,GAE3BjG,EAAeqH,cACfrH,EAAesH,kBACftH,EAAeuH,WACc,YAA7BvH,EAAeR,aACfQ,EAAewH,WAEfT,EAAgBU,cAAe,EAG/BV,EAAgBU,cAAe,EAEhCvB,EAAgBa,IAqJFW,EAlIG,SAAC,GAOZ,IANNxI,EAMK,EANLA,eACAD,EAKK,EALLA,YACAuF,EAIK,EAJLA,eACAtD,EAGK,EAHLA,SACA+E,EAEK,EAFLA,aACAC,EACK,EADLA,gBAYA,OATAO,qBAAU,WACT,GAAGR,EAAaa,QAAQ,CACvB,IAAMC,EAAe,eAAOd,GAC5Bc,EAAgBD,SAAU,EAC1BZ,EAAgBa,MAGf,CAACd,IAIH,cAAC,IAAD,CACCtB,YAAa,aACbH,eAAgBA,EAFjB,SAIE,SAAC3B,EAAUC,GAAX,OACY,8CACIzD,UAAW6B,EAAW,cAAgB,iBAClC2B,EAAS+B,gBAFjB,IAGI3B,IAAKJ,EAASK,SAHlB,UAOX+C,EAAae,mBAAqBf,EAAawB,aAE9C,cAAC,IAAD,CACA9H,KAAK,QACLN,UAAU,YACVuC,QAAS,kBArDK,SAACqE,EAAcC,EAAiBhH,GACnD,IAAM6H,EAAe,eAAOd,GAC5Bc,EAAgBD,SAAU,EAC1BC,EAAgBU,cAAe,EAQ/BxC,EAAaC,WAAY,EACzBgB,EAAgBa,GAChB7H,EATuB,CACtBsI,WAAW,GACXH,cAAc,EACdC,kBAAkB,EAClB9H,YAAa,UACb+H,WAAW,IA4CQI,CAAY1B,EAAcC,EAAiBhH,IAC1DK,MAAO2B,EAAW,UAAY,UAC9B5B,MAAO,CAACsI,QAAS,qBAKjB1G,EACC,cAAC,IAAD,CAAa7B,UAAU,eAAeM,KAAK,MAAML,MAAO,CAACuC,UAAW,gBAEpE,cAAC,IAAD,CAAUxC,UAAU,eAAeM,KAAK,QAEzCkD,EAASkC,YAEV,uBACChF,SAAU,SAAC8H,GACV,IAAM7H,EAAc,eAAOf,GAC3Be,EAAewH,WAAaK,EAAMC,OAAOC,MAAMC,cAC/C7I,EAAmBa,EAAgBiG,EAAcC,GACjDhH,EAAec,IAEhBiC,KAAK,OACL8C,YACCjC,EAAS+B,eACR,8BAEA,iBAEFkD,MAAO9I,EAAYuI,aAGpB,sBACCnI,UAAU,0BACVC,MAAOL,EAAYsI,UAAa,CAAChI,MAAM,OAAS,GAChDqC,QAAS,WACR,IAAM5B,EAAc,eAAOf,GAC3Be,EAAeuH,WAAavH,EAAeuH,UAC3CpI,EAAmBa,EAAgBiG,EAAcC,GACjDhH,EAAec,IAPjB,SAUC,cAAC,IAAD,CACCL,KAAK,QACLL,MAAO,CAAC2I,UAAW,MAAOpG,UAAW,sBAIvC,sBACCxC,UAAU,0BACVC,MAAOL,EAAYoI,aAAgB,CAAC9H,MAAM,OAAS,GACnDqC,QAAS,WACR,IAAM5B,EAAc,eAAOf,GAC3Be,EAAeqH,cAAgBrH,EAAeqH,aAC9ClI,EAAmBa,EAAgBiG,EAAcC,GACjDhH,EAAec,IAPjB,eAaA,sBACCX,UAAU,0BACVC,MAAOL,EAAYqI,iBAAmB,CAAC/H,MAAM,OAAS,GACtDqC,QAAS,WACR,IAAM5B,EAAc,eAAOf,GAC3Be,EAAesH,kBAAoBtH,EAAesH,iBAClDnI,EAAmBa,EAAgBiG,EAAcC,GACjDhH,EAAec,IAPjB,eAaA,sBAAMV,MAAO,CAAC4I,OAAQ,aAAtB,SACC,cAACrJ,EAAA,EAAD,CACCE,aAAc,GACdC,cAAe,GACfC,YAAaA,EACbC,eAAgBA,EAChBC,mBACC,SAACa,GAAD,OACAb,EAAmBa,EAAgBiG,EAAcC,gB,OCvH1CiC,EAnCK,SAAC,GAKd,IAJHlJ,EAIE,EAJFA,YACAmJ,EAGE,EAHFA,gBACAC,EAEE,EAFFA,UACAnH,EACE,EADFA,SAGA,OACI,sBAAK7B,UAAU,eAAf,UAEI,sBAAKA,UAAU,sBAAsBC,MAAO,CAAC6C,MAAO,QAApD,wBAEKlD,EAAYoI,cAAgB,aAC5BpI,EAAYqI,kBAAoB,iBAE7Be,EAAUC,oBAAsB,MAChCC,YAAWF,EAAU9D,MAAMiE,IAAIH,EAAUC,wBAIhDD,EAAUC,oBACP,8BACI,cAAC,IAAD,CACI3I,KAAK,MACLN,UAAU,sBACVuC,QAAS,kBAAMwG,KACf7I,MAAO2B,EAAW,QAAU,gBCuCrCuH,EA9DI,SAAC,GAab,IAZHL,EAYE,EAZFA,gBACAC,EAWE,EAXFA,UACAnH,EAUE,EAVFA,SACAwH,EASE,EATFA,QACAC,EAQE,EARFA,WACA/H,EAOE,EAPFA,UACAJ,EAME,EANFA,mBACAkC,EAKE,EALFA,WACAhC,EAIE,EAJFA,gBACAzB,EAGE,EAHFA,YACAC,EAEE,EAFFA,eACAoF,EACE,EADFA,cAMME,EACyB,gBAA3BF,EAAcG,aACbH,EAAchC,KAAKsB,WAAWD,OAPjC,EASsC0C,mBAAS,CAACW,mBAAmB,EAAOS,cAAc,EAAOX,SAAS,IATxG,mBASKb,EATL,KASmBC,EATnB,KAWF,OACI,gCACI,cAAC,EAAD,CACIhH,eAAgBA,EAChBD,YAAaA,EACbuF,eAAgBA,EAChBtD,SAAUA,EACV+E,aAAcA,EACdC,gBAAiBA,IAGrB,gCACI,cAAC,EAAD,CACIjH,YAAaA,EACbmJ,gBAAiBA,EACjBC,UAAWA,EACXnH,SAAUA,IAGd,cAAC,EAAD,CACIqD,MAAO8D,EAAUO,OACjB7C,cAAe2C,EACfnG,SAAU,cACVE,gBAAiBkG,EACjBzH,SAAUA,EACVpC,aAAcuJ,EAAU9D,MAAMiE,IAAIH,EAAUQ,gBAC5CjI,UAAWA,EACXJ,mBAAoBA,EACpBkC,WAAYA,EACZhC,gBAAiBA,EACjBuF,aAAcA,EACdC,gBAAiBA,WCvBtB4C,EApCQ,SAAC,GAKjB,IAJHT,EAIE,EAJFA,UACA7H,EAGE,EAHFA,mBACAuI,EAEE,EAFFA,aACA7H,EACE,EADFA,SAGJ,OACI,sBAAK7B,UAAU,eAAf,UAEI,sBAAKA,UAAU,sBAAsBC,MAAO,CAAC6C,MAAO,QAApD,qBAEa3B,EAAqB,WAAa,eAC1C6H,EAAUW,kBACH,MAAQT,YAAWF,EAAU9D,MAAMiE,IAAIH,EAAUW,oBAClDX,EAAUY,aAAatF,OACrBnD,EAAqB,qBAAuB,yBACnD,QAIL6H,EAAUY,aAAatF,QAAU0E,EAAUW,kBACxC,8BACI,cAAC,IAAD,CACIrJ,KAAK,MACLN,UAAU,sBACVuC,QAAS,kBAAMmH,KACfxJ,MAAO2B,EAAW,QAAU,YAGtC,SCUKgI,EAxCO,SAAC,GAUhB,IATHb,EASE,EATFA,UACAnH,EAQE,EARFA,SACAyH,EAOE,EAPFA,WACA/H,EAME,EANFA,UACAJ,EAKE,EALFA,mBACAkC,EAIE,EAJFA,WACAhC,EAGE,EAHFA,gBACAqI,EAEE,EAFFA,aACAzE,EACE,EADFA,cAGA,OACI,gCAEI,cAAC,EAAD,CACI+D,UAAWA,EACX7H,mBAAoBA,EACpBuI,aAAcA,EACd7H,SAAUA,IAGd,cAAC,EAAD,CACIqD,MAAO8D,EAAUc,UACjB5G,SAAU,iBACVE,gBAAiBkG,EACjBzH,SAAUA,EACVpC,aAAcuJ,EAAU9D,MAAMiE,IAAIH,EAAUQ,gBAC5CjI,UAAWA,EACXJ,mBAAoBA,EACpBkC,WAAYA,EACZsD,eAAgBqC,EAAUW,kBAC1BtI,gBAAiBA,EACjB4D,cAAeA,Q,QCsBhB8E,EAhDG,SAAC,GAQZ,IAPHf,EAOE,EAPFA,UACAnH,EAME,EANFA,SACAN,EAKE,EALFA,UACAJ,EAIE,EAJFA,mBACAkC,EAGE,EAHFA,WACAhC,EAEE,EAFFA,gBACA4D,EACE,EADFA,cAGME,EACyB,mBAA3BF,EAAcG,YACbH,EAAchC,MAAQgC,EAAchC,KAAKS,KAAKsF,EAAUQ,eAW7D,OACI,gCAEI,wBAAOxJ,UAAU,mCAAmCC,MAAO,CAAC6C,MAAO,QAAnE,UACMzB,EAAgC,SAAd,YACnB2H,EAAUQ,gBAAkB,MAAQN,YAAWF,EAAU9D,MAAMiE,IAAIH,EAAUQ,oBAGlF,cAAC,EAAD,CACItE,MAAO8D,EAAUgB,MACjB9G,SAAU,gBACVrB,SAAUA,EACVuB,gBAAiB,aACjB3D,aAAcuJ,EAAU9D,MAAMiE,IAAIH,EAAUQ,gBAC5CjI,UAAWA,EACXJ,mBAAoBA,EACpBkC,WAzBe,SAACJ,GACpB1B,IACA0I,IAAWC,UAAY,OACvBlB,EAAUmB,mBAAqBnB,EAAUQ,eACzCR,EAAUQ,eAAiBvG,EAAKS,GAChCL,MAqBIhC,gBAAiBA,EACjB8D,eAAgBA,QC4DjBiF,EArES,SAAC,GAclB,IAbHC,EAaE,EAbFA,gBACAtB,EAYE,EAZFA,gBACAC,EAWE,EAXFA,UACAnH,EAUE,EAVFA,SACAwH,EASE,EATFA,QACAC,EAQE,EARFA,WACA/H,EAOE,EAPFA,UACAJ,EAME,EANFA,mBACAkC,EAKE,EALFA,WACAhC,EAIE,EAJFA,gBACAqI,EAGE,EAHFA,aACA9J,EAEE,EAFFA,YACAC,EACE,EADFA,eACE,EAEwCmH,mBAAS,CAC/C5B,WAAY,GACZnC,KAAM,CAACS,GAAI,QAJb,mBAEKuB,EAFL,KAEoBqF,EAFpB,KAOF,OAEI,eAAC,IAAD,CACIC,UAAWF,EACXG,YAAa,SAACC,GAAD,OA3DL,SAACA,EAAOzB,EAAWsB,GAG/BvI,OAAO2I,UAAUC,SACjB5I,OAAO2I,UAAUC,QAAQ,IAI7B,IAAM1F,EAAgB,GAChBG,EAAaqF,EAAMG,OAAOtF,YAChCL,EAAcG,WAAaA,EAC3B,IAAMyF,EAAcJ,EAAMG,OAAOzH,MAC7B2H,EAAY,KAMA,mBAAb1F,EACC0F,EAAY9B,EAAUc,UAAUe,GAEf,gBAAbzF,EACJ0F,EAAY9B,EAAUO,OAAOsB,GAEZ,eAAbzF,IACJ0F,EAAY9B,EAAUgB,MAAMa,IAG7BC,IACC7F,EAAchC,KAAO6H,GAEzBR,EAAiBrF,GA4BeuF,CAAYC,EAAOzB,EAAWsB,IAF1D,UAKI,cAAC,EAAD,CACIvB,gBAAiBA,EACjBC,UAAWA,EACXnH,SAAUA,EACVwH,QAASA,EACTC,WAAYA,EACZ/H,UAAWA,EACXJ,mBAAoBA,EACpBkC,WAAYA,EACZhC,gBAAiBA,EACjBzB,YAAaA,EACbC,eAAgBA,EAChBoF,cAAeA,IAInB,cAAC,EAAD,CACI+D,UAAWA,EACXnH,SAAUA,EACVyH,WAAYA,EACZ/H,UAAWA,EACXJ,mBAAoBA,EACpBkC,WAAYA,EACZhC,gBAAiBA,EACjBqI,aAAcA,EACdzE,cAAeA,IAGnB,cAAC,EAAD,CACI+D,UAAWA,EACXnH,SAAUA,EACVN,UAAWA,EACXJ,mBAAoBA,EACpBkC,WAAYA,EACZhC,gBAAiBA,EACjB4D,cAAeA,QCnChB8F,UAlEG,SAAC,GAwBZ,IAvBHlJ,EAuBE,EAvBFA,SACAmH,EAsBE,EAtBFA,UACAqB,EAqBE,EArBFA,gBACAW,EAoBE,EApBFA,WACAC,EAmBE,EAnBFA,YACAxJ,EAkBE,EAlBFA,eACAC,EAiBE,EAjBFA,cACAJ,EAgBE,EAhBFA,YACAyH,EAeE,EAfFA,gBACAM,EAcE,EAdFA,QACAC,EAaE,EAbFA,WACA/H,EAYE,EAZFA,UACAC,EAWE,EAXFA,aACA6B,EAUE,EAVFA,WACAhC,EASE,EATFA,gBACAqI,EAQE,EARFA,aACAvI,EAOE,EAPFA,mBACAD,EAME,EANFA,yBACAE,EAKE,EALFA,mBACAxB,EAIE,EAJFA,YACAC,EAGE,EAHFA,eACA+B,EAEE,EAFFA,WACAqI,EACE,EADFA,WAGA,OAEI,sBAAKjK,UAAW6B,EAAW,sBAAwB,YAAnD,UAEI,cAAC,EAAD,CACIwI,gBAAiBA,EACjBtB,gBAAiBA,EACjBC,UAAWA,EACXnH,SAAUA,EACVwH,QAASA,EACTC,WAAYA,EACZ/H,UAAWA,EACXJ,mBAAoBA,EACpBkC,WAAYA,EACZhC,gBAAiBA,EACjBqI,aAAcA,EACd9J,YAAaA,EACbC,eAAgBA,EAChBoK,WAAYA,IAGhB,cAAC,EAAD,CACI/I,yBAA0BA,EAC1BC,mBAAoBA,EACpBC,mBAAoBA,EACpBC,gBAAiBA,EACjBC,YAAaA,EACbC,UAAWA,EACXC,aAAcA,EACd/B,aAAcuJ,EAAU9D,MAAMiE,IAAIH,EAAUQ,gBAC5C/H,eAAgBA,EAChBC,cAAeA,EACfC,WAAYqJ,GAAcC,EAC1BrJ,WAAYA,EACZC,SAAUA","file":"static/js/9.0d40b760.chunk.js","sourcesContent":["/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nColorPicker component\nImplements the color picker element of the \nrich text editor. Used to select the color \nfor the note from a selection of pastel colors\n*/\n\nimport { GithubPicker } from \"react-color\"\nimport { BsDropletHalf } from \"react-icons/bs\"\nimport Popup from \"reactjs-popup\"\n\n// Utils function needed to set the color through a switch\n// Takes the chosen color, the current selected note and \n// A function to set the state of the editor\nconst setColor = (\n    color, \n    selectedNote, \n    setBackColor, \n    setHasChanged, \n    setSearchProps, \n    searchCleanerCheck\n) => {\n\n    // Only used if the picker is in the dashboard\n    if(setSearchProps){\n        setSearchProps(\n            (searchProps) => {\n                const newSearchProps = {...searchProps}\n                newSearchProps.colorFilter = color.hex\n                searchCleanerCheck(newSearchProps)\n                return newSearchProps\n            }\n        )\n        return \n    }\n\n    setHasChanged(true)\n    selectedNote.colorPreview = color.hex;\n\n    switch(color.hex) {\n        case '#b80000':\n            selectedNote.color = '#EB9694'\n            break;\n        case '#db3e00':\n            selectedNote.color = '#FAD0C3'\n            break;\n        case '#fccb00':\n            selectedNote.color = '#FEF3BD'\n            break;\n        case '#008b02':\n            selectedNote.color = '#C1E1C5'\n            break;\n        case '#006b76':\n            selectedNote.color = '#BEDADC'\n            break;\n        case '#1273de':\n            selectedNote.color = '#C4DEF6'\n            break;\n        case '#5300eb':\n            selectedNote.color = '#d4c4fb'\n            break;\n        case '#ededed':\n            selectedNote.color = '#ffffff'\n            break;\n        default:\n            break\n    }\n    setBackColor({color: selectedNote.color, colorPreview: selectedNote.colorPreview})\n}\n\n// Color Picker component\n// Takes the current selected note and \n//a function to set the color state of the editor\nconst ColorPicker = ({\n    selectedNote,\n    setBackColor,\n    setHasChanged,\n    searchProps,\n    setSearchProps,\n    searchCleanerCheck\n}) => {\n\n    return (\n        <Popup\n            trigger={\n                <div \n                className='tools-btn' \n                style={{color : searchProps ? searchProps.colorFilter : undefined, fontSize: '19px'}\n                }>\n                    {searchProps ? '⬤' :\n                        <BsDropletHalf\n                            size='1.6em'\n                        />\n                    }\n                </div>\n            } \n            nested\n            modal\n            position='right'\n        >\n            <div className='picker'>\n                <GithubPicker \n                    onChange={(color)=> \n                        setColor(\n                            color, \n                            selectedNote, \n                            setBackColor, \n                            setHasChanged, \n                            setSearchProps, \n                            searchCleanerCheck\n                        )\n                    }\n                    colors={['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#5300EB', '#EDEDED']}\n                    triangle='hide'\n                />\n            </div>\n        </Popup>\n    )\n}\nexport default ColorPicker","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nEditorFooter component\nDefines the buttons of the footer and calls the respective functions\n*/\n\nimport { FcIdea, FcSettings, FcParallelTasks, FcBrokenLink, FcLink, FcImport, FcCheckmark, FcCancel} from 'react-icons/fc'\nimport { AiOutlineDisconnect, AiOutlineLink, AiOutlineImport, AiOutlineStop } from 'react-icons/ai';\nimport { GoLightBulb } from 'react-icons/go'\nimport { VscSettingsGear, VscCheck, VscSync } from 'react-icons/vsc';\nimport { IoIosGitBranch } from 'react-icons/io';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport { driveNotConnected, mergeModeOn } from '../helpers/Messages';\nimport React from 'react'\n\n// Footer component\n// takes the threadOrCollection state and a function to change it,\n// rootsOrBranches state and a function to chage it,\n// a function to switch the darkMode state\n// mergeMode state and a function to change it,\n// the selectedNote,\n// a function to change the current page, used to move to settings page,\n// the notesUpdating flag to show the animation\n// and the loadedUser flag to pass to the settings\n// Most of the props are used to show the correct icons and switch states\nconst Footer = ({\n    threadOrCollectionManage, \n    threadOrCollection, \n    setRootsOrBranches, \n    rootsOrBranches, \n    setDarkMode, \n    mergeMode, \n    setMergeMode,\n    selectedNote,\n    setCurrentPage,\n    notesUpdating,\n    loadedUser,\n    synchNotes,\n    darkMode\n}) => {\n\n    const darkModeSwitch = () =>{\n        window.localStorage.setItem('dark-mode', !darkMode)\n        setDarkMode((previousDarkMode) => !previousDarkMode)\n    }\n    return(\n        <div className='page-footer'\n            style={darkMode ? \n                {borderTop: '1px solid #2a2a2a', backgroundColor: '#1b1b1b'} \n                : \n                {borderTop: '#dddddd', background: 'linear-gradient(#eeeeee, white)', boxShadow: '0 0 3px #bbbbbb'}\n            }\n        >\n            {darkMode ?\n                <VscSettingsGear\n                    className='tools-btn'\n                    onClick={() => setCurrentPage('settings')}\n                    size='2.5em'\n                    style={{transform: 'scale(0.75)'}}\n                />\n                :\n                <FcSettings\n                    className='tools-btn'\n                    onClick={() => setCurrentPage('settings')}\n                    size='2.5em'\n                />\n            }\n\n            {!threadOrCollection ? (\n                darkMode ? \n                    <AiOutlineDisconnect\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                        style={{transform: 'rotate(45deg) scale(0.85)'}}\n                    />\n                :\n                    <FcBrokenLink\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                    />\n            )\n            :\n            (\n                darkMode ?\n                    <AiOutlineLink\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                        style={{transform: 'rotate(45deg) scale(0.85)'}}\n                    />\n                :\n                    <FcLink\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                    />\n                )\n            }\n            {\n                darkMode ?\n                    <IoIosGitBranch\n                        onClick={() =>\n                            setRootsOrBranches(\n                                (previous) => !previous\n                            )\n                        }\n                        size='2em'\n                        className='tools-btn'\n                        style={!rootsOrBranches && {transform: 'scaleY(-1)'}}\n                    />\n                :\n                    <FcParallelTasks\n                        onClick={() =>\n                            setRootsOrBranches(\n                                (previous) => !previous\n                            )\n                        }\n                        size='2.3em'\n                        className='tools-btn'\n                        style={rootsOrBranches ? {transform: 'scaleY(-1) rotate(90deg)'} : {transform: 'rotate(90deg)'}}\n                    />\n            }\n\n            {selectedNote ?\n                darkMode ?\n                    <AiOutlineImport\n                        onClick={() =>{\n                                setMergeMode(\n                                    (previous) => !previous\n                                )\n                                if(!mergeMode){\n                                    alert(mergeModeOn)\n                                }\n                            }\n                        }\n                        size='1.8em'\n                        className='tools-btn'\n                        style={{transform:'scaleX(1.1) rotate(-90deg)'}}\n                    /> \n                :\n                    <FcImport\n                        onClick={() =>{\n                                setMergeMode(\n                                    (previous) => !previous\n                                )\n                                if(!mergeMode){\n                                    alert(mergeModeOn)\n                                }\n                            }\n                        }\n                        size='2.3em'\n                        className='tools-btn'\n                        style={{transform:'scaleY(1.15) rotate(-90deg)'}}\n                    />    \n            : null}\n\n            {darkMode ?\n                <GoLightBulb\n                    onClick={() => darkModeSwitch()}\n                    size='2.5em'\n                    className='tools-btn'\n                    style={{transform: 'scaleY(0.7) scaleX(0.7)'}}\n                />  \n            :\n                <FcIdea\n                onClick={() => darkModeSwitch()}\n                size='2.5em'\n                className='tools-btn'\n                />  \n            }\n\n            {loadedUser ? (\n                notesUpdating>0?\n\n                    darkMode ? \n                        <VscSync \n                            size='2em'\n                        /> \n                    :\n                        <Loader \n                            type=\"Circles\" \n                            color=\"#00BFFF\" \n                            height='1.8em'\n                            width='2.3em'\n                        /> \n\n                :\n\n                    darkMode ? \n                        <VscCheck\n                            size='2em'\n                            className='tools-btn'\n                            onClick={()=>synchNotes()}\n                            style={{transform: 'scaleY(0.85)'}}\n                        />\n                    :\n                        <FcCheckmark\n                            size='2.3em'\n                            className='tools-btn'\n                            onClick={()=>synchNotes()}\n                        />\n            ) :\n\n            darkMode ?\n                <AiOutlineStop\n                    size='1.8em'\n                    onClick={()=>alert(driveNotConnected)}\n                    style={{transform: 'scaleX(-1)'}}\n                />\n            :\n                <FcCancel\n                    size='2.3em'\n                    onClick={()=>alert(driveNotConnected)}\n                />\n            }\n\n        </div>\n    );\n}\n\nexport default Footer;","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nNote component\nDefines the single note object and all the actions that are possible with it\n*/\n\nimport { Draggable } from 'react-beautiful-dnd';\nimport React from 'react';\nimport {RiPushpin2Fill} from 'react-icons/ri'\nimport { FaLink, FaFolder } from 'react-icons/fa'\nimport { ImTree } from 'react-icons/im'\nimport { FiPaperclip } from 'react-icons/fi'\n\n// Note component takes the note to show, \n// the name of the area it compares in,\n// the index of the note inside the sequence,\n// handleNotePress to select a note if it is pressed,\n// the darkMode, mergeMode, rootsOrBranches, threadOrCollection flags\n// the selectedNote,\n// the openEditor function to edit the note on double click\nconst Note = ({ \n\tnote, \n\tareaName, \n\tindex, \n\thandleNotePress, \n\tdarkMode, \n\tselectedNote,\n\tmergeMode,\n\topenEditor,\n\trootsOrBranches,\n\tthreadOrCollection\n\n}) => {\n\n\treturn (\n\n\t\t\t<Draggable key={note.ui_id} draggableId={note.ui_id} index={index}>\n\t\t\t\t{(provided, snapshot) => (\n\t\t\t\t\t\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<li \n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t(mergeMode && selectedNote.id===note.id && 'note no-scrollbar merge-mode')\n\t\t\t\t\t\t\t||\n\t\t\t\t\t\t\t(((darkMode && selectedNote && selectedNote.id===note.id) && \n\t\t\t\t\t\t\t\t'note note-dark no-scrollbar selected-note-dark') || \n\t\t\t\t\t\t\t((darkMode && (!selectedNote || selectedNote.id!==note.id)) && \n\t\t\t\t\t\t\t\t'note note-dark no-scrollbar') ||\n\t\t\t\t\t\t\t((!darkMode && selectedNote && selectedNote.id===note.id ) &&\n\t\t\t\t\t\t\t\t'note note-bright no-scrollbar selected-note') ||\n\t\t\t\t\t\t\t((!darkMode && (!selectedNote ||selectedNote.id!==note.id)) &&\n\t\t\t\t\t\t\t\t'note note-bright no-scrollbar')) \n\t\t\t\t\t\t}\n\t\t\t\t\t\tname={note.id}\n\t\t\t\t\t\tid={note.ui_id}\n\t\t\t\t\t\tref={provided.innerRef} \n\t\t\t\t\t\t{...provided.draggableProps}\n\t\t\t\t\t\t{...provided.dragHandleProps}\n\t\t\t\t\t\tonClick={()=> {handleNotePress(note)}}\n\t\t\t\t\t\tonDoubleClick={()=> openEditor(note)}\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t!(mergeMode && selectedNote.id===note.id) ? (\n\t\t\t\t\t\t\t\t!darkMode && note.color!=='#ffffff' ? \n\t\t\t\t\t\t\t\t\t(selectedNote && selectedNote.id===note.id ? \n\t\t\t\t\t\t\t\t\t\t{backgroundColor: note.color, ...provided.draggableProps.style} : \n\t\t\t\t\t\t\t\t\t{backgroundColor: note.color, border: '1px solid '+ note.color, ...provided.draggableProps.style}) : \n\t\t\t\t\t\t\t\t\t\t(note.color!=='#ffffff' ? \n\t\t\t\t\t\t\t\t\t\t\t{backgroundImage: 'linear-gradient(25deg, rgb(92, 92, 92) 92%, '+note.colorPreview + ' 92%)', ...provided.draggableProps.style} \n\t\t\t\t\t\t\t\t\t\t\t: provided.draggableProps.style))\n\t\t\t\t\t\t\t: provided.draggableProps.style\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{snapshot.isDropAnimating}\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{note.pinned && areaName==='search-area' &&\n\t\t\t\t\t\t\t\t\t<RiPushpin2Fill size='10px' className='header-icon'/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{note.thread.length ?\n\t\t\t\t\t\t\t\t\t<FaLink size='10px' className='header-icon'/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{note.collection.length ?\n\t\t\t\t\t\t\t\t\t<FaFolder size='10px' className='header-icon'/> : ''\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t{!rootsOrBranches && note.branches.length ?\n\t\t\t\t\t\t\t\t\t<ImTree size='10px' className='header-icon'/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{rootsOrBranches && note.roots.length ?\n\t\t\t\t\t\t\t\t\t<ImTree size='10px' className='header-icon' style={{transform: 'scaleY(-1)'}}\t/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{note.attachedImg && !note.attachedImg[2] ?\n\t\t\t\t\t\t\t\t\t<FiPaperclip size='10px' className='header-icon' style={{transform:'rotate(-45deg)'}}/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{(!note.attachedImg || !note.attachedImg[2]) ?\n\t\t\t\t\t\t\t\t<div className='note-content no-scrollbar' dangerouslySetInnerHTML={{__html: note.preview}}></div> : \n\t\t\t\t\t\t\t\t<div className='just-background-note' style={{backgroundImage: 'url('+ note.text +')'}}></div>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Draggable>\n\t);\n};\n\nexport default Note;\n","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nWrapper component\nUsed to wrap an unsaved thread inside an empty note\nor to expand the thread or collection contained in any\narbitrary note\n*/\n\nimport {Droppable} from 'react-beautiful-dnd';\nimport React from 'react'\n\nconst Wrapper = ({\n\tthreadOrCollection,\n    notesLength,\n    draggableInfo,\n    notes,\n    darkMode\n}) => {\n\n    // Disable dropping here unless the note comes from the search area\n    // and it is empty if you are trying to wrap an unsaved thread/collection\n    // or it is full if you are trying to expand it to show its content\n    const isDropDisabled = \n        draggableInfo.sourceArea!=='search-area' ||\n        (\n            notesLength>0 ? (\n\n                draggableInfo.note.thread.length>0 || \n                draggableInfo.note.collection.length>0\n            )\n            :\n            (\n                !draggableInfo.note.thread.length && \n                !draggableInfo.note.collection.length \n            )\n            \n        ) ||\n        (notes.find(note => note.id===draggableInfo.note.id)!==undefined)\n    \n    return (\n\n        <Droppable \n            droppableId='wrapper-area'\n            isDropDisabled={isDropDisabled}\n        >\n\n            {(provided, snapshot) => (\n                <div \n                    className='wrapper'\n                    {...provided.droppableProps} \n                    ref={provided.innerRef} \n                    style={ \n                        notesLength > 0 ? (\n                            {\n                            ...(\n                                darkMode ?\n                                    threadOrCollection ? {backgroundColor:'#fccb00', color:'black'} \n                                    : {backgroundColor:'#1273de', color:'white'}\n                                :\n                                    threadOrCollection ? {backgroundColor:'#fef3bd', color:'black'} \n                                    : {backgroundColor:'#c4def6', color:'black'}\n                            ), \n                            ...(!snapshot.isDraggingOver && {minWidth:\"8vh\"})\n                            })\n                        : \n                        darkMode ?\n                        {backgroundColor: '#2e2e2e', minWidth:\"8vh\", color: '#666666'}\n                        :\n                        {backgroundColor: '#f4f4f4', minWidth:\"8vh\", boxShadow: '1px 0px 1px #dddddd'}\n                    }\n                >\n\n                <div className='vertical-text'>{notesLength>0 ? 'WRAP' : 'drop to expand'}</div>\n\n                {provided.placeholder}\n\n                {\n                    snapshot.isDraggingOver?\n                    \n                        (notesLength > 0 ?\n                            (\n                                <div className='vertical-text'>\n                                    wrap <br></br> \n                                    {threadOrCollection ? ' thread ' : ' collection '}\n                                    <br></br> \n                                    inside note\n                                </div>\n                            ) \n                        :\n                            (\n                                <div className='vertical-text'>\n                                    expand\n                                    <br></br> \n                                    {draggableInfo.note.thread.length ? \n                                        'thread' : 'collection'\n                                    }\n                                </div>\n                            ) \n                        ) : null\n                }\n\n                </div>\n\n            )}\n\n        </Droppable>\n\n    )\n}\nexport default Wrapper","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nNotesList component\nDefines a general list of notes that acts as a Droppable\nin the framework of React Beautiful Dnd\n*/\n\nimport Note from './Note';\nimport {Droppable} from 'react-beautiful-dnd';\nimport { useEffect, useState } from 'react';\nimport {FcNext, FcPrevious, FcPlus} from 'react-icons/fc';\nimport { BsChevronRight, BsChevronLeft } from 'react-icons/bs';\nimport { BsPlusSquare } from 'react-icons/bs'\nimport Wrapper from './Wrapper';\nimport React from 'react'\n\n// Max size of a row of notes, it is necessary to press the arrow\n// button to access further notes\nconst SLICESIZE = 12\nexport const scrollTarget = {beginning: false}\n\n// Function used to change slice based on which arrow button has been pressed\nconst align = (dir, currentSlice, setCurrentSlice, notes, areaName) => {\n\n\t// Before changing slice, set up the autoscroll\n\t// Initialise a prop based on whether the button was next or prev\n\tconst prop = dir===-1 ? {inline:'start'} : {inline:'end'}\n\tvar focusPos = currentSlice*SLICESIZE+SLICESIZE-1\n\n\t// If overflows, go back to last note of the sequence\n\tif(focusPos>notes.length-1){\n\t\tfocusPos=notes.length-1\n\t}\n\n\t// scroll into the last note of the previous slice to give the idea of continuity \n\t// between slices\n\tdocument.getElementById(notes[focusPos].ui_id).scrollIntoView(prop);\n\tsetCurrentSlice(currentSlice+dir)\n\twindow.sessionStorage.setItem('current-slice-'+areaName, currentSlice+dir)\n}\n\nconst NotesList = ({\n\tnotes,\n\thandleAddNote,\n\tareaName,\n\thandleNotePress,\n\tdarkMode,\n\tselectedNote,\n\tmergeMode,\n\tthreadOrCollection,\n\topenEditor,\n\tworkspaceFlag, \n\trootsOrBranches,\n\tisDropDisabled,\n\tdraggableInfo,\n\tcleanFilters,\n\tsetCleanFilters\n}) => {\n\n\tconst retrievedSlice = window.sessionStorage.getItem('current-slice-'+areaName)\n\t// State that defines the slice the user is at\n\tconst [currentSlice, setCurrentSlice] = useState(\n\t\tretrievedSlice ? \n\t\tparseInt(retrievedSlice) :\n\t\t0\n\t)\n\t// State to hide the NotesList until the scroll is performed, used to avoid flickering\n\tconst [isVisible, setIsVisible] = useState(false)\n\n\t// Effect to set back the scroll once exiting the editor\n\tuseEffect(() => {\n\t\tconst slicedNotes = notes.slice(currentSlice*SLICESIZE, (currentSlice+1)*SLICESIZE+SLICESIZE)\n\t\tvar scrollSucceded=false\n\n\t\t// If there is a selectedNote to scroll to, do it\n\t\tif(selectedNote){\n\t\t\tconst focusPos = slicedNotes.find(note => note.id === selectedNote.id)\n\t\t\tif(focusPos){\n\t\t\t\tconst targetElement = document.getElementById(focusPos.ui_id)\n\t\t\t\tif(targetElement){\n\t\t\t\t\ttargetElement.scrollIntoView({inline: 'center'})\n\t\t\t\t\tscrollSucceded=true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise, some search is performed but there are no notesin the current slices, go to slice 0\n\t\tif(!slicedNotes.length && currentSlice!==0 && !scrollSucceded && areaName==='search-area'){\n\t\t\tsetCurrentSlice(0)\n\t\t\twindow.sessionStorage.setItem('current-slice-'+areaName, 0)\n\t\t}\n\t\tsetIsVisible(true)\n\t// eslint-disable-next-line\n\t}, [notes])\n\n\tuseEffect(() => {\n\t\tif(areaName==='search-area' && cleanFilters.goClean && currentSlice > 0){\n\t\t\tsetCurrentSlice(0)\n\t\t\twindow.sessionStorage.setItem('current-slice-'+areaName, 0)\n\t\t}\n\t// eslint-disable-next-line\n\t}, [cleanFilters])\n\n\tuseEffect(() => {\n\t\tif(areaName==='search-area'){\n\t\t\tconst newCleanFilters = {...cleanFilters}\n\t\t\tif(currentSlice > 0){\n\t\t\t\tnewCleanFilters.areSlicesScrolled = true\n\t\t\t}\n\t\t\telse{\n\t\t\t\tnewCleanFilters.areSlicesScrolled = false\n\t\t\t}\n\t\t\tif(scrollTarget.beginning){\n\t\t\t\tconst addButtonElement = document.getElementById('plus')\n\t\t\t\tif(addButtonElement){\n\t\t\t\t\taddButtonElement.scrollIntoView()\n\t\t\t\t}\n\t\t\t\tscrollTarget.beginning = false\n\t\t\t}\n\t\t\tsetCleanFilters(newCleanFilters)\n\t\t}\n\t// eslint-disable-next-line\n\t}, [currentSlice])\n\n\tconst slicedNotes = notes.slice(currentSlice*SLICESIZE, (currentSlice+1)*SLICESIZE+SLICESIZE)\n\n\treturn (\n\n\t\t<div style={{visibility: isVisible ? 'visible' : 'hidden'}}>\n\n\t\t\t<Droppable \n\t\t\t\tdroppableId={areaName} \n\t\t\t\tdirection='horizontal' \n\t\t\t\tclassName='droppable-wrapper' \n\t\t\t\tisDropDisabled={isDropDisabled}\n\t\t\t>\n\n\t\t\t\t{(provided) => (\n\n\t\t\t\t\t<ul \n\t\t\t\t\t\tclassName='notes-list' \n\t\t\t\t\t\t{...provided.droppableProps} \n\t\t\t\t\t\tref={provided.innerRef} \n\t\t\t\t\t\tid={areaName}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{currentSlice>0 ?\n\t\t\t\t\t\t\t\t\tdarkMode ?\n\t\t\t\t\t\t\t\t\t\t<BsChevronLeft \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(-1, currentSlice, setCurrentSlice, notes, areaName)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t\tcolor='#666666'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t<FcPrevious \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(-1, currentSlice, setCurrentSlice, notes, areaName)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{(areaName==='workspace-area' && workspaceFlag) &&\n\n\t\t\t\t\t\t\t\t<Wrapper \n\t\t\t\t\t\t\t\t\tthreadOrCollection={threadOrCollection}\n\t\t\t\t\t\t\t\t\tnotesLength={notes.length}\n\t\t\t\t\t\t\t\t\tdraggableInfo={draggableInfo}\n\t\t\t\t\t\t\t\t\tnotes={notes}\n\t\t\t\t\t\t\t\t\tdarkMode={darkMode}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{(areaName==='search-area' && currentSlice===0) &&\n\t\t\t\t\t\t\t\t\t(darkMode ?\n\t\t\t\t\t\t\t\t\t<BsPlusSquare \n\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn add-btn'\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddNote()}\n\t\t\t\t\t\t\t\t\t\tsize='2.25em'\n\t\t\t\t\t\t\t\t\t\tcolor='#555555'\n\t\t\t\t\t\t\t\t\t\tstyle={{transform: 'scale(0.8)'}}\n\t\t\t\t\t\t\t\t\t\tid='plus'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t<FcPlus\n\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn add-btn'\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddNote()}\n\t\t\t\t\t\t\t\t\t\tsize='2.25em'\n\t\t\t\t\t\t\t\t\t\tid='plus'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{slicedNotes.map((note, index) => (\n\n\t\t\t\t\t\t\t\t<Note\n\t\t\t\t\t\t\t\t\tkey={note.ui_id}\n\t\t\t\t\t\t\t\t\tnote={note}\n\t\t\t\t\t\t\t\t\tareaName={areaName}\n\t\t\t\t\t\t\t\t\tindex={index+currentSlice*SLICESIZE}\n\t\t\t\t\t\t\t\t\thandleNotePress={handleNotePress}\n\t\t\t\t\t\t\t\t\tdarkMode={darkMode}\n\t\t\t\t\t\t\t\t\tselectedNote={selectedNote}\n\t\t\t\t\t\t\t\t\tmergeMode={mergeMode}\n\t\t\t\t\t\t\t\t\topenEditor={openEditor}\n\t\t\t\t\t\t\t\t\trootsOrBranches={rootsOrBranches}\n\t\t\t\t\t\t\t\t\tthreadOrCollection={threadOrCollection}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t\t{provided.placeholder}\n\n\t\t\t\t\t\t\t<div> \n\t\t\t\t\t\t\t\t{(currentSlice+1)*SLICESIZE+SLICESIZE<notes.length ? \n\n\t\t\t\t\t\t\t\t\tdarkMode ?\n\t\t\t\t\t\t\t\t\t\t<BsChevronRight \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(1, currentSlice, setCurrentSlice, notes, areaName)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t\tcolor='#666666'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t<FcNext \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(1, currentSlice, setCurrentSlice, notes, areaName)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\n\t\t\t</Droppable>\n\t\t</div>\n\t);\n};\n\nexport default NotesList;\n","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nSearchBar component\n*/\n\nimport React, { useEffect } from 'react'\nimport { Droppable } from 'react-beautiful-dnd'\nimport { FcSearch } from 'react-icons/fc'\nimport { BiSearchAlt } from 'react-icons/bi'\nimport ColorPicker from './ColorPicker'\nimport { BsPaperclip } from 'react-icons/bs'\nimport { VscChromeClose } from 'react-icons/vsc'\nimport { scrollTarget } from './NotesList'\n\nconst searchCleanerCheck = (newSearchProps, cleanFilters, setCleanFilters) => {\n\tconst newCleanFilters = {...cleanFilters}\n\tif(\n\t\tnewSearchProps.threadFilter ||\n\t\tnewSearchProps.collectionFilter || \n\t\tnewSearchProps.imgFilter ||\n\t\tnewSearchProps.colorFilter!=='#ededed' ||\n\t\tnewSearchProps.searchText\n\t){\n\t\tnewCleanFilters.areFiltersOn = true\n\t}\n\telse{\n\t\tnewCleanFilters.areFiltersOn = false\n\t}\n\tsetCleanFilters(newCleanFilters)\n}\n\nconst cleanSearch = (cleanFilters, setCleanFilters, setSearchProps) => {\n\tconst newCleanFilters = {...cleanFilters}\n\tnewCleanFilters.goClean = true\n\tnewCleanFilters.areFiltersOn = false\n\tconst newSearchProps = {\n\t\tsearchText:'', \n\t\tthreadFilter: false, \n\t\tcollectionFilter: false,\n\t\tcolorFilter: '#ededed',\n\t\timgFilter: false\n\t}\n\tscrollTarget.beginning = true\n\tsetCleanFilters(newCleanFilters)\n\tsetSearchProps(newSearchProps)\n}\n\nconst SearchBar = ({ \n\tsetSearchProps, \n\tsearchProps ,\n\tisDropDisabled,\n\tdarkMode,\n\tcleanFilters,\n\tsetCleanFilters\n}) => {\t\n\n\tuseEffect(() => {\n\t\tif(cleanFilters.goClean){\n\t\t\tconst newCleanFilters = {...cleanFilters}\n\t\t\tnewCleanFilters.goClean = false\n\t\t\tsetCleanFilters(newCleanFilters)\n\t\t}\n\t// eslint-disable-next-line\n\t}, [cleanFilters])\n\n\treturn (\n\n\t\t<Droppable \n\t\t\tdroppableId={'search-bar'}\n\t\t\tisDropDisabled={isDropDisabled}\n\t\t>\n\t\t\t{(provided, snapshot) => (\n                <div \n                    className={darkMode ? 'search-dark' : 'search-bright'}\n                    {...provided.droppableProps} \n                    ref={provided.innerRef} \n\t\t\t\t>\n\n\t\t\t\t\t{\t\t\n\t\t\t\t\tcleanFilters.areSlicesScrolled || cleanFilters.areFiltersOn ?\n\t\t\t\t\t\n\t\t\t\t\t\t<VscChromeClose \n\t\t\t\t\t\tsize='1.6em'\n\t\t\t\t\t\tclassName='tools-btn'\n\t\t\t\t\t\tonClick={() => cleanSearch(cleanFilters, setCleanFilters, setSearchProps)}\n\t\t\t\t\t\tcolor={darkMode ? '#666666' : '#464646'}\n\t\t\t\t\t\tstyle={{padding: '3px 2px 3px 3px'}}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t:\n\n\t\t\t\t\t\tdarkMode ?\n\t\t\t\t\t\t\t<BiSearchAlt className='search-icons' size='2em' style={{transform: 'scale(0.8)'}}/>\n\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<FcSearch className='search-icons' size='2em' />\n\t\t\t\t\t}\n\t\t\t\t\t{provided.placeholder}\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\tconst newSearchProps = {...searchProps}\n\t\t\t\t\t\t\tnewSearchProps.searchText = event.target.value.toLowerCase()\n\t\t\t\t\t\t\tsearchCleanerCheck(newSearchProps, cleanFilters, setCleanFilters)\n\t\t\t\t\t\t\tsetSearchProps(newSearchProps)\n\t\t\t\t\t\t}}\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\tsnapshot.isDraggingOver ?\n\t\t\t\t\t\t\t\t'Work within this collection'\n\t\t\t\t\t\t\t: \n\t\t\t\t\t\t\t\t'Type to search'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tvalue={searchProps.searchText}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<span \n\t\t\t\t\t\tclassName='search-filter tools-btn' \n\t\t\t\t\t\tstyle={searchProps.imgFilter ?  {color:'red'} : {}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tconst newSearchProps = {...searchProps}\n\t\t\t\t\t\t\tnewSearchProps.imgFilter = !newSearchProps.imgFilter\n\t\t\t\t\t\t\tsearchCleanerCheck(newSearchProps, cleanFilters, setCleanFilters)\n\t\t\t\t\t\t\tsetSearchProps(newSearchProps)\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<BsPaperclip \n\t\t\t\t\t\t\tsize='0.9em' \n\t\t\t\t\t\t\tstyle={{marginTop: '4px', transform: 'rotate(180deg)'}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<span \n\t\t\t\t\t\tclassName='search-filter tools-btn' \n\t\t\t\t\t\tstyle={searchProps.threadFilter ?  {color:'red'} : {}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tconst newSearchProps = {...searchProps}\n\t\t\t\t\t\t\tnewSearchProps.threadFilter = !newSearchProps.threadFilter\n\t\t\t\t\t\t\tsearchCleanerCheck(newSearchProps, cleanFilters, setCleanFilters)\n\t\t\t\t\t\t\tsetSearchProps(newSearchProps)\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tT\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<span \n\t\t\t\t\t\tclassName='search-filter tools-btn'\n\t\t\t\t\t\tstyle={searchProps.collectionFilter ? {color:'red'} : {}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tconst newSearchProps = {...searchProps}\n\t\t\t\t\t\t\tnewSearchProps.collectionFilter = !newSearchProps.collectionFilter\n\t\t\t\t\t\t\tsearchCleanerCheck(newSearchProps, cleanFilters, setCleanFilters)\n\t\t\t\t\t\t\tsetSearchProps(newSearchProps)\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tC\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<span style={{margin: '0 5px 0 0'}}>\n\t\t\t\t\t\t<ColorPicker \n\t\t\t\t\t\t\tsetBackColor={{}}\n\t\t\t\t\t\t\tsetHasChanged={{}}\n\t\t\t\t\t\t\tsearchProps={searchProps}\n\t\t\t\t\t\t\tsetSearchProps={setSearchProps}\n\t\t\t\t\t\t\tsearchCleanerCheck={\n\t\t\t\t\t\t\t\t(newSearchProps) => \n\t\t\t\t\t\t\t\tsearchCleanerCheck(newSearchProps, cleanFilters, setCleanFilters)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</span>\n\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t</Droppable>\n\t);\n};\n\nexport default SearchBar;\n","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nSearchLabel component\nGives information about the current state of the search\nand the filters applied to it\n*/\n\nimport React from 'react';\nimport { getCaption } from '../helpers/DashboardUtils';\nimport { VscChromeClose } from 'react-icons/vsc';\n\nconst SearchLabel = ({ \n    searchProps, \n    closeCollection, \n    dashboard,\n    darkMode\n}) => {\n\n    return(\n        <div className='stripe-label'>\n\n            <div className='stripe-not-overflow' style={{width: '80vw'}}>\n                NOTE FINDER  \n                {searchProps.threadFilter && ' - THREADS'} \n                {searchProps.collectionFilter && ' - COLLECTIONS'}\n                {\n                    dashboard.openedCollectionId && ' : ' + \n                    getCaption(dashboard.notes.get(dashboard.openedCollectionId))\n                }\n            </div>\n\n            {dashboard.openedCollectionId && \n                <div>\n                    <VscChromeClose \n                        size='2em'\n                        className='tools-btn close-btn'\n                        onClick={() => closeCollection()}\n                        color={darkMode ? 'white' : 'black'}\n                    />\n                </div>\n            }\n\n        </div>\n    )\n}\n\nexport default SearchLabel","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nSearchArea component\nSearch Area that includes the searchBar, the Search Label\nand the notes list containing the results of the search\n*/\n\nimport React, { useState } from 'react';\nimport SearchBar from './SearchBar';\nimport SearchLabel from './SearchLabel';\nimport NotesList from './NotesList';\n\nexport var searchState = {searchEmpty:true, firstSlice:true}\n\nconst SearchArea = ({ \n    closeCollection, \n    dashboard, \n    darkMode, \n    addNote, \n    selectNote, \n    mergeMode, \n    threadOrCollection, \n    openEditor, \n    rootsOrBranches,\n    searchProps,\n    setSearchProps,\n    draggableInfo\n}) => {\n\n    // Dropping here is disabled unless the note comes from the \n    // search area itself and has a collection within it\n    // The gesture is used to expand it\n    const isDropDisabled = \n        draggableInfo.sourceArea!=='search-area' ||\n        !draggableInfo.note.collection.length\n\n    const [cleanFilters, setCleanFilters] = useState({areSlicesScrolled: false, areFiltersOn: false, goClean: false})\n\n    return(\n        <div>\n            <SearchBar \n                setSearchProps={setSearchProps} \n                searchProps={searchProps}\n                isDropDisabled={isDropDisabled}\n                darkMode={darkMode}\n                cleanFilters={cleanFilters}\n                setCleanFilters={setCleanFilters}\n            />\n\n            <div>\n                <SearchLabel \n                    searchProps={searchProps} \n                    closeCollection={closeCollection}\n                    dashboard={dashboard}\n                    darkMode={darkMode}\n                />\n                \n                <NotesList\n                    notes={dashboard.search}\n                    handleAddNote={addNote}\n                    areaName={'search-area'}\n                    handleNotePress={selectNote}\n                    darkMode={darkMode}\n                    selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                    mergeMode={mergeMode}\n                    threadOrCollection={threadOrCollection}\n                    openEditor={openEditor}\n                    rootsOrBranches={rootsOrBranches}\n                    cleanFilters={cleanFilters}\n                    setCleanFilters={setCleanFilters}\n                />\n            </div> \n        </div>\n    )\n}\n\nexport default SearchArea","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nWorkspaceLabel component\nGives information about the current state of the workspace\n*/\n\nimport React from 'react';\nimport { getCaption } from '../helpers/DashboardUtils';\nimport { VscChromeClose } from 'react-icons/vsc';\n\nconst WorkspaceLabel = ({ \n    dashboard,\n    threadOrCollection,\n    closeAndSave,\n    darkMode\n}) => {\n\nreturn(\n    <div className='stripe-label'>\n\n        <div className='stripe-not-overflow' style={{width: '80vw'}}>\n\n            CURRENT {threadOrCollection ? ' THREAD ' : ' COLLECTION '} \n            {dashboard.openedWorkspaceId ?\n                    ' : ' + getCaption(dashboard.notes.get(dashboard.openedWorkspaceId))\n                : (dashboard.workspaceIds.length ? \n                    (threadOrCollection ? ' : unsaved thread ' : ' : unsaved collection ') \n            : null)\n            }\n        </div>\n\n        {dashboard.workspaceIds.length || dashboard.openedWorkspaceId ?\n            <div>\n                <VscChromeClose \n                    size='2em'\n                    className='tools-btn close-btn'\n                    onClick={() => closeAndSave()}\n                    color={darkMode ? 'white' : 'black'}\n                />\n            </div>\n        : null}\n\n    </div>\n    )\n}\n\nexport default WorkspaceLabel","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nWorkspaceArea component\nContains the current workspace the user is working on\n*/\n\nimport React from 'react';\nimport NotesList from './NotesList';\nimport WorkspaceLabel from './WorkspaceLabel';\n\nconst WorkspaceArea = ({ \n    dashboard, \n    darkMode, \n    selectNote, \n    mergeMode, \n    threadOrCollection, \n    openEditor, \n    rootsOrBranches,\n    closeAndSave,\n    draggableInfo\n}) => { \n\n    return (\n        <div>\n\n            <WorkspaceLabel \n                dashboard={dashboard}\n                threadOrCollection={threadOrCollection}\n                closeAndSave={closeAndSave}\n                darkMode={darkMode}\n            />                \n\n            <NotesList\n                notes={dashboard.workspace}\n                areaName={'workspace-area'}\n                handleNotePress={selectNote}\n                darkMode={darkMode}\n                selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                workspaceFlag={!dashboard.openedWorkspaceId}\n                rootsOrBranches={rootsOrBranches}\n                draggableInfo={draggableInfo}\n            />\n\n        </div>\n    )\n}\n\nexport default WorkspaceArea","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nLinksArea component\nDefines the lowest row of notes of the dashboard\nwhich shows the links starting from/coming into the selectedNote\nBased of a rootsOrBranches flag\n*/\n\nimport React from 'react';\nimport NotesList from './NotesList';\nimport { getCaption } from '../helpers/DashboardUtils';\nimport { editorMode } from './Dashboard';\n\n// LinksArea component,\n// takes the dashboard to get the notes from,\n// The darkmode flag\n// some draggableInfo to know where the drags start from\nconst LinksArea = ({ \n    dashboard, \n    darkMode, \n    mergeMode, \n    threadOrCollection, \n    openEditor, \n    rootsOrBranches,\n    draggableInfo\n}) => { \n\n    const isDropDisabled = \n        draggableInfo.sourceArea==='workspace-area' ||\n        (draggableInfo.note && draggableInfo.note.id===dashboard.selectedNoteId)\n\n    const openEditorForLinks = (note) => {\n        if(!mergeMode){\n            editorMode.selection = 'prev'\n            dashboard.prevSelectedNoteId = dashboard.selectedNoteId\n            dashboard.selectedNoteId = note.id\n            openEditor()\n        }\n    }\n\n    return (\n        <div>\n\n            <label className='stripe-label stripe-not-overflow' style={{width: '90vw'}}>\n                {!rootsOrBranches ? ' BRANCHES' : ' ROOTS'}\n                {dashboard.selectedNoteId && ' - ' + getCaption(dashboard.notes.get(dashboard.selectedNoteId))} \n            </label>\n\n            <NotesList\n                notes={dashboard.links}\n                areaName={'branches-area'}\n                darkMode={darkMode}\n                handleNotePress={() => {}}\n                selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditorForLinks}\n                rootsOrBranches={rootsOrBranches}\n                isDropDisabled={isDropDisabled}\n            />\n\n        </div>\n    )\n}\n\nexport default LinksArea","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nNoteDragContext component\nDefines drag and drop context by using the React Beautiful DnD package\n*/\n\nimport React, { useState } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport SearchArea from './SearchArea';\nimport WorkspaceArea from './WorkspaceArea';\nimport LinksArea from './LinksArea';\n\n// Function that is called when a drag starts\n// Stores information about the note that has been moved and its\n// original position inside a state that then gets passed\nconst onDragStart = (start, dashboard, setDraggableInfo) => {\n\n    // give some short tactile feedback\n    if (window.navigator.vibrate) {\n        window.navigator.vibrate(25);\n    }\n\n    // Initialise the draggableInfo state\n    const draggableInfo = {}\n    const sourceArea = start.source.droppableId\n    draggableInfo.sourceArea = sourceArea\n    const sourceIndex = start.source.index\n    var noteFound = null\n\n    // return the note itself so that it is possible to access some \n    // of its properties, eg: the collection that it contains\n    // this is used for some special gestures such as the dragging\n    // into the searchBar gesture\n    if(sourceArea==='workspace-area'){\n        noteFound = dashboard.workspace[sourceIndex]\n    }\n    else if(sourceArea==='search-area'){\n        noteFound = dashboard.search[sourceIndex]\n    }\n    else if(sourceArea==='links-area'){\n        noteFound = dashboard.links[sourceIndex]\n    }\n    \n    if(noteFound){\n        draggableInfo.note = noteFound\n    }\n    setDraggableInfo(draggableInfo)\n}\n\nconst NoteDragContext = ({ \n    handleOnDragEnd,\n    closeCollection,\n    dashboard,\n    darkMode,\n    addNote,\n    selectNote,\n    mergeMode,\n    threadOrCollection,\n    openEditor,\n    rootsOrBranches,\n    closeAndSave,\n    searchProps,\n    setSearchProps\n}) => {\n\n    const [draggableInfo, setDraggableInfo] = useState({\n        sourceArea: '',\n        note: {id: null}\n    })\n\n    return(\n\n        <DragDropContext \n            onDragEnd={handleOnDragEnd} \n            onDragStart={(start) => onDragStart(start, dashboard, setDraggableInfo)}\n        >\n                \n            <SearchArea \n                closeCollection={closeCollection} \n                dashboard={dashboard} \n                darkMode={darkMode}\n                addNote={addNote}\n                selectNote={selectNote}\n                mergeMode={mergeMode} \n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                rootsOrBranches={rootsOrBranches}\n                searchProps={searchProps}\n                setSearchProps={setSearchProps}\n                draggableInfo={draggableInfo}\n            />                 \n\n            \n            <WorkspaceArea \n                dashboard={dashboard}\n                darkMode={darkMode}\n                selectNote={selectNote}\n                mergeMode={mergeMode} \n                threadOrCollection={threadOrCollection} \n                openEditor={openEditor} \n                rootsOrBranches={rootsOrBranches}\n                closeAndSave={closeAndSave}\n                draggableInfo={draggableInfo}\n            />\n\n            <LinksArea \n                dashboard={dashboard}\n                darkMode={darkMode}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                rootsOrBranches={rootsOrBranches}\n                draggableInfo={draggableInfo}\n            />\n\n        </DragDropContext>\n    )\n}\nexport default NoteDragContext","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nNotesPage component\nMain notes page, as opposed to Editor page or settings page\nWraps the noteDragDropContext and the Footer\n*/\n\nimport React from 'react';\nimport Footer from './Footer'\nimport NoteDragContext from './NotesDragContext';\n\nconst NotesPage = ({ \n    darkMode,\n    dashboard,\n    handleOnDragEnd,\n    GAPIloaded,\n    currentUser,\n    setCurrentPage,\n    notesUpdating,\n    setDarkMode,\n    closeCollection,\n    addNote,\n    selectNote,\n    mergeMode,\n    setMergeMode,\n    openEditor,\n    rootsOrBranches,\n    closeAndSave,\n    threadOrCollection,\n    threadOrCollectionManage,\n    setRootsOrBranches,\n    searchProps,\n    setSearchProps,\n    synchNotes,\n    editorMode\n}) => {\n\n    return(\n\n        <div className={darkMode ? 'container dark-mode' : 'container'}>\n\n            <NoteDragContext \n                handleOnDragEnd={handleOnDragEnd}\n                closeCollection={closeCollection}\n                dashboard={dashboard}\n                darkMode={darkMode}\n                addNote={addNote}\n                selectNote={selectNote}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                rootsOrBranches={rootsOrBranches}\n                closeAndSave={closeAndSave}\n                searchProps={searchProps}\n                setSearchProps={setSearchProps}\n                editorMode={editorMode}\n            />\n\n            <Footer \n                threadOrCollectionManage={threadOrCollectionManage}\n                threadOrCollection={threadOrCollection}\n                setRootsOrBranches={setRootsOrBranches}\n                rootsOrBranches={rootsOrBranches}\n                setDarkMode={setDarkMode}\n                mergeMode={mergeMode}\n                setMergeMode={setMergeMode}\n                selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                setCurrentPage={setCurrentPage}\n                notesUpdating={notesUpdating}\n                loadedUser={GAPIloaded && currentUser}\n                synchNotes={synchNotes}\n                darkMode={darkMode}\n            />\n            \n        </div>\n    )\n}\nexport default NotesPage"],"sourceRoot":""}