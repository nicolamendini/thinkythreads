{"version":3,"sources":["helpers/Messages.js","helpers/RequestsMakers.js","helpers/BackupHelper.js","helpers/DownloadHelper.js","helpers/DashboardPacker.js","helpers/NotesManupulation.js","helpers/DragManager.js","helpers/NoteDeleter.js","helpers/NoteMerger.js","components/KeyboardBindings.js","components/DashboardTree.js","components/DashboardOperations.js","components/Dashboard.js","components/ColorPicker.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js","helpers/DashboardUtils.js"],"names":["alreadyIn","cleanWorkspace","charLimit","mergeModeOn","driveNotConnected","newNoteDelimiter","exportBeginDelimiter","alertMergeMode","workspaceLimitReached","mergeLinksLimit","mergeWorkspaceLimit","mergeTextLimit","mergeBothCardsOccupied","getMediaUpdateRequest","note","id","window","gapi","client","request","path","method","params","uploadType","body","text","getMetadata","description","JSON","stringify","preview","branches","roots","thread","collection","pinned","color","colorPreview","attachedImg","leftLink","rightLink","appProperties","version","deleted","getMetaUpdateRequest","errorCatcher","error","counter","targetFunction","args","console","setTimeout","updateNoteFile","removeNoteFile","setNotesUpdating","prev","backupNote","metaOrMedia","parseInt","noteCopy","createThumbnail","driveVariables","authorisation","db","notes","update","put","sendUpdateRequest","key","updatesCounter","get","then","dbNote","mediaOrMeta","drive","files","list","q","folderId","fileExistenceCheck","resp","result","length","fileId","requestFunction","log","catch","metadata","mimeType","name","fields","parents","create","resource","createNoteFile","checkDriveFolder","setDriveFolderId","newResp","delete","getNote","newDashboard","notesOnDrive","metaResp","currIdx","setDashboardReady","finishedProcesses","alt","mediaResp","newNote","parse","set","prevFirstNote","firstNoteId","count","nextPageToken","getNotesPage","updateDriveNotes","targetPageToken","pageToken","i","noteFile","noteId","sanitiseForRemoval","driveNoteVersion","setNotesPageFromResp","sampleVersion","checkedAgainstDrive","decideForInsertion","searchProps","newSearch","insertingNote","replace","toLowerCase","includes","searchText","imgFilter","colorFilter","collectionFilter","threadFilter","copyNote","removeFromSequence","removingIdxs","sequence","filter","e","idx","reportAndAdd","index","message","push","alert","notesOrder","links","workspaceIds","errorAlert","updateElement","backup","n","addToBranches","noteFrom","noteToAdd","destination","rootsOrBranches","notAlreadyInBranches","notChildOfItself","branchesWithinLimit","LINKSLIMIT","notAlreadyInRoots","rootsWithinLimits","undefined","addElementAt","removeFromBranches","noteToDel","toast","getCaption","targetIdx","findIndex","removeElementAt","forceRemove","targetNoteId","presenceCheck","linkThreadNotes","wrapWorkspace","threadOrCollection","targetNote","prevSelectedNoteId","selectedNoteId","openInWorkspace","workspaceMode","closeAndSaveWorkspace","openedWorkspaceId","anyChangesFlag","arraysEqual","noteSelector","noteToSelect","mergeMode","setMergeMode","dashboard","packDashboard","mergeNotes","searchBar","document","getElementById","blur","dragManager","setThreadOrCollection","setSearchProps","source","droppableId","workspaceAdder","search","dropToBranches","manageWrapper","openedCollectionId","moveNoteInsideArea","sourceNote","dir","moveNoteInsideGraph","dropOnSearchBar","workspaceRemover","workspace","noteToRem","targetId","WORKSPACELIMIT","element","position","addToWorkspace","indexToRem","SHAREDMEX","resetSearchScroll","initSearchProps","noteDeleter","removingId","reselect","a","noteToRemove","checkConflicts","detachFromPosition","removingIndex","noteIdxInSearch","noteMerger","noteA","noteB","deleteNote","newBranches","Set","newRoots","newCollection","newThread","dbNoteA","dbNoteB","newText","TEXTLIMIT","noteC","setPreview","flatMap","Mousetrap","require","controller","Object","enabled","resetTimer","waitTimer","timer","KeyboardBindings","selectNote","addNote","setDelayedNoteUpdate","setTriggerRerender","currentPage","openEditor","closeAndSave","moveToTheExtremity","openOccurrences","selectInDir","preventDefault","returnValue","selectedNoteIdx","currentSearchSlice","SLICESIZE","noteToLeft","usingScrollKeys","setSearchSlice","scrollLeft","noteToRight","changeColorWithKey","selectedNote","sameNoteInSearch","find","sameNoteInWorkspace","pastelCols","vividCols","delay","moveToExtremityWithKey","endOrBeginning","bind","pinNoteWithKey","confirm","workspaceAddKey","workspaceRemKey","spacebarKeyAction","unbind","saveWorkspaceKey","NoteEditor","React","lazy","Settings","NotesPage","DashboardTree","triggerRerender","notesUpdating","setCurrentPage","darkMode","setDarkMode","GAPIloaded","currentUser","closeCollection","setRootsOrBranches","threadOrCollectionManage","synchNotes","updateNote","exportThread","signInFunction","signOutFunction","threadCollectionSwap","handleOnDragEnd","fallback","suspenseLoader","title","style","height","width","border","loadedUser","DashboardOperations","getNewNote","oldFirstNote","collectionNote","editorModeSelection","newSelectedNote","currOrPrevNoteDecice","toasts","leaveOpen","doBackup","bulkGet","wholeNotes","selectedThreadText","map","htmlText","reduce","accumulator","currentValue","pri","contentWindow","open","write","close","focus","print","exportThreadGivenProps","keys","threadCollectionFlag","collectionToThread","katex","PREVIEWLIMIT","goClean","areSlicesScrolled","Dexie","stores","localStorage","getItem","closingEditor","Dashboard","useState","Map","setDashboard","driveFolderId","dashboardReady","callbackFunction","beforeFunction","delayedNoteUpdate","useEffect","toArray","forEach","darkModeStored","delayDebounceFn","clearTimeout","delayUpdateNote","restoreDashboardState","getAllNotes","sFlag","wFlag","lFlag","disableCheck","size","lastNote","temp","prevNote","currNote","noteTracker","updateNextNote","checkLinksSanity","allFalse","getSearchFromProps","newWorkspace","getWorkspace","getLinksFromProps","ColorPicker","setBackColor","setHasChanged","searchCleanerCheck","trigger","className","fontSize","nested","modal","onChange","newSearchProps","hex","setColor","colors","triangle","config","SCOPE","discoveryUrl","App","state","googleAuth","loaded","onlineState","navigator","onLine","initScript","viewport","querySelector","setAttribute","content","innerHeight","addEventListener","setState","loadGAPI","script","createElement","onload","handleClientLoad","src","appendChild","initClient","init","process","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","setSigninStatus","signIn","signOut","user","hasGrantedScopes","setItem","getBasicProfile","getName","load","this","Component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","URL","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration","truncate","slice","area","originalIndex","targetIndex","newArea","sourceNoteId","backupMeta","blockUpdate","noteAtTargetPos","noteAtLeft","noteAtRight","attachToPosition","newPreview","string","split","substr","checkingId","cumulativeClause","ui_id","nanoid","imgStart","imgEnd","substring","img","exec","isFirst","default","ellipsis","justifyContent","display","backgroundColor","type","marginTop","array1","array2","areDifferent","removingNote","newLastNote","previousSelectedNote"],"mappings":"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","file":"static/js/main.1c3889f9.chunk.js","sourcesContent":["export const alreadyIn = 'Cannot insert a note inside its own Thread or Collection'\nexport const cleanWorkspace = 'Please close your workspace before swapping between Thread Mode and Collection Mode'\nexport const charLimit = 'Character limit reached. Additional content will not be saved. Please start a new note instead'\nexport const mergeModeOn = 'Merge Mode is on, please select another card to merge to the pink card. The content, links and references of the card you select will be copied. If you want to exit it, press the button again'\nexport const driveNotConnected = 'Google Drive is not connected. Please Login from the Settings page to allow the backup'\nexport const newNoteDelimiter = '------------------------------------------------------------ new note ---------------------------------------------------'\nexport const exportBeginDelimiter = '--------------------------------------------------------- exported thread -------------------------------------------\\n'\nexport const alertMergeMode = 'Merge Mode is on. Please finish merging or exit the Merge Mode before doing anything else'\nexport const workspaceLimitReached = 'Workspace length limit reached. Please save and start a new Workspace instead'\nexport const mergeLinksLimit = 'The number of links of the resulting note would exceed the limit. Please remove some links to continue'\nexport const mergeWorkspaceLimit = 'The size of the Thread or Collection of the resulting note would exceed the limit. Please remove some notes manually to continue'\nexport const mergeTextLimit = 'The size of the resulting text exceeds the limit. Please shorten some text to continue'\nexport const mergeBothCardsOccupied = 'Both the cards contain a Thread or a Collection and this generates a conflict in the mergin process. Please empty the Thread or Collection of one of the two notes and try again'","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nRequestMakers functions\nGenerally they create request that are then executed by other\nfunctions, define the requests bodies\n*/\n\nimport { db , driveVariables} from \"../components/Dashboard\"\nimport { createThumbnail } from \"./DashboardUtils\"\nimport { updateNoteFile, removeNoteFile } from \"./BackupHelper\"\n\n// Function to create a Media Update request\n// it changes the content of the file to be the text of the note\n// as shown in the body field of the request\nexport function getMediaUpdateRequest(note, id){ \n    return window.gapi.client.request({\n        path: 'upload/drive/v3/files/' + id,\n        method: 'PATCH',\n        params: {\n            uploadType: 'media'\n        },\n        body: note.text\n    })\n}\n\n// Function to convert a note into a metadata object\n// that then gets attached to a file in a request\nexport function getMetadata(note){\n    return {\n        description : JSON.stringify({\n            id: note.id,\n            preview: note.preview,\n            branches: note.branches,\n            roots: note.roots,\n            thread: note.thread,\n            collection: note.collection,\n            pinned: note.pinned,\n            color: note.color,\n            colorPreview: note.colorPreview,\n            attachedImg: note.attachedImg,\n            leftLink: note.leftLink,\n            rightLink: note.rightLink\n        }),\n        appProperties: {\n            version: note.version,\n            deleted: note.deleted\n        }\n    }\n}\n\n// Request to update the metadata only, \n// similar to the Media one except this passes the metadata\n// object in the body\nexport function getMetaUpdateRequest(note, id){\n    return window.gapi.client.request({\n        path: 'drive/v3/files/' + id,\n        method: 'PATCH',\n        body: getMetadata(note)\n    })\n}\n\n// Returns a request to create a file starting from a note\n// the file is created inside the folder given by drive Folder Id\nexport function createNoteFile(note, metadata){\n    if(!metadata){metadata = getMetadata(note)}\n    metadata.mimeType = 'application/json'\n    metadata.name = note.id\n    metadata.fields = 'id'\n    metadata.parents = [driveVariables.folderId]\n    return window.gapi.client.drive.files.create({\n            resource: metadata\n        }\n    )\n}\n\n// Returns a request to check if a file associated to a given note already exists \n// once the request is executed the response shows the search results\nexport function fileExistenceCheck(note){\n    return window.gapi.client.drive.files.list({\n        q:\"name='\"+ note.id +\n        \"' and mimeType='application/json' and trashed=false and '\"+ \n        driveVariables.folderId + \"' in parents\",\n    })\n}\n\n// Returns a request to get a notes media given the id of the note file directly\nexport function getMediaRequestById(fileId){\n    return window.gapi.client.drive.files.get({\n        mimeType: 'application/json',\n        fileId: fileId,\n        alt: 'media'\n    })\n}\n\n// Error catcher functions used in all the functions that involve Google Drive API\n// If an error occurs, call the function again with the same arguments up to 4 times\nexport function errorCatcher(error, counter, targetFunction, ...args){\n    console.error(error)\n    counter+=1\n    if(counter<5){\n        setTimeout(() => {\n            targetFunction(...args, counter)\n        }, 1000)\n    }\n    else{\n\n        // If the function to call again is update and max calls have been attempted, \n        //subtract one from the counter because the backup will be interrupted\n        if(targetFunction===updateNoteFile || targetFunction===removeNoteFile){\n            const setNotesUpdating = args[2]\n            setNotesUpdating((prev) => prev-1)\n        }\n    }\n}\n\n// Function called to backup a note both locally and on drive\n// takes the note, a metaOrMedia flag that controls the kind of update\n// and the setNotesUpdating Function used to keep track of the active updates\nexport function backupNote(note, metaOrMedia, setNotesUpdating){\n\n    // Increment the notes version and make a copy of it that will be backed up\n    note.version = parseInt(note.version) + 1\n    const noteCopy = {...note}\n\n    // If the note contains an image, backup the original text and reset the \n    // displaying text to the image itself. Exploits a trick to efficiently \n    // show an image preview when the note contains one at the beginning\n    createThumbnail(note)\n\n    // Perform the backup on drive as well if it is possible\n    if(driveVariables.authorisation){\n        updateNoteFile(noteCopy, metaOrMedia, setNotesUpdating)\n    }\n\n    // Perform the backup locally on indexedDB and store the text only when it is needed\n    if(metaOrMedia==='meta'){\n        delete noteCopy.text\n        db.notes.update(noteCopy.id, noteCopy)\n    }\n    else{\n        db.notes.put(noteCopy)\n    }\n}\n\n// Returns an update request for a given note\n// It is passed an updatesCounter to delay the execution of the update\n// in the case that already many updates are occuring\n// In other words it ensured that the requests are well separated in time\nexport function sendUpdateRequest(key, updatesCounter, setNotesUpdating){\n    db.notes.get(key).then((dbNote) => \n        setTimeout(() => {\n            updateNoteFile(dbNote, 'both', setNotesUpdating)\n        }, (200 * updatesCounter))\n    )\n}","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nBackupHelper functions\nFunction to backup notes on drive\n*/\n\nimport { db, driveVariables } from \"../components/Dashboard\"\nimport { exportBeginDelimiter, newNoteDelimiter } from \"./Messages\"\nimport { \n    getMediaUpdateRequest, \n    getMetaUpdateRequest, \n    errorCatcher, \n    fileExistenceCheck, \n    createNoteFile\n} from \"./RequestsMakers\"\n\n// Function to update a note file on drive\nexport function updateNoteFile(note, mediaOrMeta, setNotesUpdating, counter){\n\n    // Initialise the counter of calls\n    if(!counter){\n        setNotesUpdating((prev) => prev+1)\n        counter=0\n    }\n\n    // Try to access the file\n    fileExistenceCheck(note).then((resp)=>{\n\n        // If it does not exist\n        if(!resp.result.files.length){\n\n            // create it by calling this function again in media mode\n            createNoteFile(note).then(() => {\n\n                if(mediaOrMeta!=='meta'){\n                    updateNoteFile(note, 'media', setNotesUpdating)\n                    setNotesUpdating((prev) => prev-1)\n                }\n                else{\n                    setNotesUpdating((prev) => prev-1)\n                }\n\n            }).catch((error) => \n                errorCatcher(\n                    error, \n                    counter, \n                    updateNoteFile, \n                    note, \n                    mediaOrMeta, \n                    setNotesUpdating\n                )\n            )\n        }\n\n        // if the file exists, get its id and initialise a placeholder for the \n        // request function that is needed\n        else{\n            const fileId = resp.result.files[0].id\n            var requestFunction = null\n\n            // if the request is media or both, it is a media request\n            if(mediaOrMeta==='media' || mediaOrMeta==='both'){\n                requestFunction = getMediaUpdateRequest\n            }\n\n            // otherwise just ask for a meta request\n            else if(mediaOrMeta==='meta'){\n                requestFunction = getMetaUpdateRequest\n            }\n            requestFunction(note, fileId).then(function() {\n                // if the request is both, update meta as well after updating media\n                if(mediaOrMeta==='both'){\n                    setNotesUpdating((prev) => prev-1)\n                    updateNoteFile(note, 'meta', setNotesUpdating)\n                }\n\n                // otherwise update finished and decrease the active updates counter\n                else{\n                    console.log('updated')\n                    setNotesUpdating((prev) => prev-1)\n                }\n\n            }).catch((error) => \n                errorCatcher(\n                    error, \n                    counter, \n                    updateNoteFile, \n                    note, \n                    mediaOrMeta, \n                    setNotesUpdating\n                )\n            )\n        }\n    }).catch((error) =>     \n        errorCatcher(\n            error, \n            counter,    \n            updateNoteFile, \n            note, \n            mediaOrMeta, \n            setNotesUpdating\n        )\n    )\n}\n\n// Function to export a thread as a PDF or print\nexport function exportThreadGivenProps(dashboard){\n\n    // get all notes from DB that belong to thread and extract text\n    db.notes.bulkGet(dashboard.notes.get(dashboard.selectedNoteId).thread).then((wholeNotes) => {\n        const selectedThreadText = wholeNotes.map((note) => note.text);\n\n        // concatenate all of them with delimiters \n        const reducer = (accumulator, currentValue) => accumulator + \n             newNoteDelimiter\n            + currentValue;\n\n        // add the start delimiter\n        const htmlText = \n            exportBeginDelimiter + \n            selectedThreadText.reduce(reducer);\n\n        // print it\n        var pri = document.getElementById(\"ifmcontentstoprint\").contentWindow;\n        pri.document.open();\n        pri.document.write(htmlText);\n        pri.document.close();\n        pri.focus();\n        pri.print();\n    })\n}\n\n// Check for the existence of the thinkythreads folder\nexport function checkDriveFolder(setDriveFolderId, counter){\n\n    console.log('checkingfolder')\n    if(!counter){counter=0}\n\n    window.gapi.client.drive.files.list({\n      q:\"name='thinkythreads-data' \" +\n      \"and mimeType='application/vnd.google-apps.folder' \" +\n      \"and trashed=false\",\n    }).then((resp)=>{\n\n        // if it does not exist, create it\n        if(!resp.result.files.length){\n            var fileMetadata = {\n            'name': 'thinkythreads-data',\n            'mimeType': 'application/vnd.google-apps.folder'\n            };\n            window.gapi.client.drive.files.create({\n            resource: fileMetadata,\n            fields: 'id'\n            }).then((newResp) => {\n                    \n                // after creation, set the driveFolder state to the new folder\n                setDriveFolderId(newResp.result.id)\n\n            }).catch((error) => errorCatcher(error, counter, checkDriveFolder, setDriveFolderId))\n        }\n        else{\n            if(resp.result.files[0].id!==driveVariables.folderId){\n                setDriveFolderId(resp.result.files[0].id)\n            }\n        }\n    }).catch((error) => errorCatcher(error, counter, checkDriveFolder, setDriveFolderId))\n}\n\n// Removes a notes file from drive\nexport function removeNoteFile(fileId, setNotesUpdating, counter){\n    if(!counter){counter=0}\n\n    setNotesUpdating((prev) => prev+1)\n    window.gapi.client.drive.files.delete({\n        'fileId': fileId\n    }).then(function() { \n\n        setNotesUpdating((prev) => prev-1)\n\n    }).catch((error) => \n        errorCatcher(\n            error, \n            counter, \n            removeNoteFile, \n            fileId,  \n            setNotesUpdating,\n        )\n    )\n}\n","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nDownloadHelper functions\nContains functions that help the retrieval of notes on GDrive\n*/\n\nimport { driveVariables, db } from \"../components/Dashboard\";\nimport { removeNoteFile } from \"./BackupHelper\";\nimport { createThumbnail, sanitiseForRemoval } from \"./DashboardUtils\";\nimport { getMediaRequestById, errorCatcher, sendUpdateRequest } from \"./RequestsMakers\";\n\n// Function to create a new note from a drive file response\n// takes both the metaResponse and the mediaResponse\n// currIdx defines the index of the current file on drive\n// notesOnDrive stores all the notes that have been found on drive\nexport function setNoteFromResp(\n    newDashboard, \n    notesOnDrive, \n    metaResp, \n    mediaResp, \n    currIdx, \n    setNotesUpdating, \n    setDashboardReady,\n    finishedProcesses\n){\n\n    // create the note object and add the text field and version\n    const newNote = JSON.parse(metaResp.result.files[currIdx].description)\n    newNote.text = mediaResp.body\n    if(!newNote.text){\n        removeNoteFile(metaResp.result.files[currIdx].id, setNotesUpdating)\n    }\n    else{\n        newNote.version = parseInt(metaResp.result.files[currIdx].appProperties.version)\n\n        // add it to the dashboard and backup locally\n        newDashboard.notes.set(newNote.id, newNote)\n        if(!newNote.leftLink){\n            const prevFirstNote = newDashboard.notes.get(newDashboard.firstNoteId)\n            if(prevFirstNote){\n                prevFirstNote.leftLink = newNote.id\n                prevFirstNote.version += 1\n                db.notes.update(prevFirstNote.id, prevFirstNote)\n            }\n            newDashboard.firstNoteId = newNote.id\n            console.log('added first note', newNote.id)\n        }\n        db.notes.put(newNote).then(\n            // check if it needs a thumbnail and create it\n            createThumbnail(newNote)\n        )\n    }\n\n    finishedProcesses.count += 1\n    setNotesUpdating((prev) => prev-1)\n\n    // if all the notes on drive have been processed\n    if(finishedProcesses.count === metaResp.result.files.length){\n\n        // if there is a next page of files on drive, download the files of the next page\n        if(metaResp.result.nextPageToken){\n            getNotesPage(\n                newDashboard, \n                notesOnDrive,  \n                setNotesUpdating, \n                setDashboardReady, \n                metaResp.result.nextPageToken\n            )\n        }\n\n        // otherwise if all the files have been processed, update the notes on drive\n        else{\n            console.log('chiamato qui 2')\n            updateDriveNotes(\n                newDashboard, \n                notesOnDrive, \n                setNotesUpdating, \n                setDashboardReady\n            )\n        }\n    }\n}\n\n// get a single notes media given the metaResponse and the currIdx\nexport function getNote(\n    newDashboard, \n    notesOnDrive, \n    metaResp, \n    currIdx, \n    setNotesUpdating, \n    setDashboardReady, \n    finishedProcesses,\n    counter\n){\n    if(!counter){counter=0}\n    getMediaRequestById(metaResp.result.files[currIdx].id).then((mediaResp) =>\n\n        // once the media is downloaded, create an object from it and add it to dashboard\n        setNoteFromResp(\n            newDashboard, \n            notesOnDrive, \n            metaResp, \n            mediaResp, \n            currIdx, \n            setNotesUpdating, \n            setDashboardReady,\n            finishedProcesses\n        )\n\n    ).catch((error) => errorCatcher(\n        error, \n        counter, \n        getNote, \n        newDashboard, \n        notesOnDrive, \n        metaResp, \n        currIdx,\n        setNotesUpdating,\n        setDashboardReady,\n        finishedProcesses\n    ))\n}\n\n// download a whole page of files metadatas \n// so that later you can access their content individually\nexport function setNotesPageFromResp(\n    newDashboard, \n    notesOnDrive, \n    metaResp, \n    setNotesUpdating, \n    setDashboardReady\n){\n\n    // keep count of the files processed for this page\n    var finishedProcesses = {count: 0}\n\n    // for all the files on drive\n    for(let i=0; i<metaResp.result.files.length; i++){\n\n        // placeholder for the noteFile object and for the note id\n        const noteFile = metaResp.result.files[i]\n        const noteId = noteFile.name\n        \n        // else if the file was not a deleted one, add it to notesOnDrive\n        const noteDeletedFlag = noteFile.appProperties.deleted==='true'\n        if(!noteDeletedFlag){\n            const driveNoteVersion = parseInt(noteFile.appProperties.version)\n            notesOnDrive[noteId] = driveNoteVersion\n\n            // retrieve the note and check that it exists\n            const note = newDashboard.notes.get(noteId)\n            if(!note || driveNoteVersion>note.version){\n            \n                // if not retrieve its media and download it\n                getNote(\n                    newDashboard, \n                    notesOnDrive, \n                    metaResp, \n                    i,  \n                    setNotesUpdating, \n                    setDashboardReady,\n                    finishedProcesses\n                )\n                setNotesUpdating((prev) => prev+1)\n            }\n\n            // if conditions not met, end the process \n            else{\n                finishedProcesses.count +=1\n            }\n        }\n\n        else{\n            const removingNote = newDashboard.notes.get(noteId)\n            if(removingNote){\n                newDashboard.notes.delete(noteId)\n                db.notes.delete(noteId)\n                sanitiseForRemoval(newDashboard, noteId)\n                console.log('deleted first note', noteId)\n            }\n            finishedProcesses.count +=1\n        }\n    }\n\n    if(finishedProcesses.count === metaResp.result.files.length){\n        // if there are other pages, try with the next one\n        if(metaResp.result.nextPageToken){\n            getNotesPage(\n                newDashboard, \n                notesOnDrive, \n                setNotesUpdating, \n                setDashboardReady, \n                metaResp.result.nextPageToken\n            )\n        }\n\n        // otherwise update the notes on drive because they might be outdated\n        else{\n            updateDriveNotes(\n                newDashboard, \n                notesOnDrive, \n                setNotesUpdating, \n                setDashboardReady\n            )\n        }\n    }\n}\n\n// Function to get the metas of a whole drive page\nexport function getNotesPage(\n    newDashboard, \n    notesOnDrive, \n    setNotesUpdating, \n    setDashboardReady, \n    targetPageToken, \n    counter\n){\n\n    if(!counter){counter=0}\n    // list all files that are in that folder\n    window.gapi.client.drive.files.list({\n        fields: 'nextPageToken, files(description, id, name, appProperties)',\n        q:\"mimeType='application/json' and trashed=false and '\" + \n        driveVariables.folderId + \"' in parents\",\n        pageToken: targetPageToken\n\n    }).then((metaResp) => {\n\n        setNotesPageFromResp(\n            newDashboard, \n            notesOnDrive, \n            metaResp, \n            setNotesUpdating, \n            setDashboardReady\n        )\n        \n    }).catch((error) => errorCatcher(\n        error, \n        counter, \n        getNotesPage, \n        newDashboard, \n        notesOnDrive, \n        setNotesUpdating,\n        setDashboardReady,\n        targetPageToken\n    ))\n}\n\n// Function that starts the recursion, try to restore notes from drive\n// if not, update the notes on drive if needed\nexport function getAllNotes(\n    newDashboard, \n    setNotesUpdating, \n    setDashboardReady, \n    counter\n){\n\n    // notesOnDrive keeps track of the backup/restoring process\n    if(!counter){counter=0}\n    const notesOnDrive = {}\n\n    getNotesPage(\n        newDashboard, \n        notesOnDrive,  \n        setNotesUpdating, \n        setDashboardReady\n    )\n}\n\n// Update the notes on google drive if they might be outdated\nexport function updateDriveNotes(\n    newDashboard, \n    notesOnDrive, \n    setNotesUpdating, \n    setDashboardReady\n){\n    var updatesCounter = 0\n\n    for(const [key, note] of newDashboard.notes){\n\n        const sampleVersion = notesOnDrive[key]\n        // for each of the notes that need to be updated, send a request\n        if(!sampleVersion || sampleVersion<note.version){\n            updatesCounter+=1\n            sendUpdateRequest(key, updatesCounter, setNotesUpdating)\n        }\n\n        if(!note.leftLink){\n            newDashboard.firstNoteId = note.id\n        }\n    }\n\n    newDashboard.checkedAgainstDrive = true\n    console.log('setting dashboard')\n    setDashboardReady(newDashboard)\n}","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nDashboardPacker functions\nUpdate the functions based on the new states of the dashboard\n*/\n\nimport { copyNote } from \"./DashboardUtils\"\nimport { backupNote } from \"./RequestsMakers\"\n\nconst decideForInsertion = (note, searchProps, newSearch) => {\n\n    if(note){\n        var insertingNote = []\n\n        // if the text matched with the text on the searchBar insert it\n        if(note.preview.replace( /(<([^>]+)>)/ig, '').toLowerCase().includes(searchProps.searchText)){\n\n            insertingNote=[note]\n\n            if(searchProps.imgFilter && !note.attachedImg){\n                insertingNote=[]\n            }\n\n            if(insertingNote.length && searchProps.colorFilter!=='#ededed' && searchProps.colorFilter!==note.colorPreview){\n                insertingNote=[]\n            }\n\n            // if the thread filter and the collections filters are on but the note has none, remove it\n            if(insertingNote.length && searchProps.collectionFilter && searchProps.threadFilter){\n                if(!note.thread.length && !note.collection.length){\n                    insertingNote=[]\n                }\n            }\n\n            // if the thread filter is on but the note has none, remove it from the insertion\n            else if(insertingNote.length && searchProps.threadFilter){\n                if(!note.thread.length){\n                    insertingNote=[]\n                }\n            }\n\n            // if the collection filter is on but the note has none, remove it from the insertion\n            else if(insertingNote.length && searchProps.collectionFilter){\n                if(!note.collection.length){\n                    insertingNote=[]\n                }\n            }\n\n            // if the note is pinned, put at the beginning, if not, at the end\n            if(insertingNote.length){\n                if(note.pinned){\n                    newSearch.notes = [copyNote(insertingNote[0]), ...newSearch.notes]\n                }\n                else{\n                    newSearch.notes = [...newSearch.notes, copyNote(insertingNote[0])]\n                }\n            }\n        }\n    }\n    else{\n        console.log('exceeded')\n    }\n}\n\n// Change the search as the user is typing\nexport function getSearchFromProps(newDashboard, searchProps){\n\n    // go through all the notes and decide whether each note should be inserted\n    const newSearch = Object.create(null)\n    newSearch.notes = []\n    var note = {rightLink : newDashboard.firstNoteId}\n\n    // if a collection is opened\n    if(newDashboard.openedCollectionId){\n        const targetNote = newDashboard.notes.get(newDashboard.openedCollectionId)\n        if(targetNote){\n            for(const id of targetNote.collection){\n                note = newDashboard.notes.get(id)\n                decideForInsertion(note, searchProps, newSearch)\n            }\n        }\n        else{console.log('collection note does not exist')}\n    }\n\n    // otherwise go through all the notes\n    else{\n        for(let i=0; i<newDashboard.notes.size; i++){\n            if(note){\n                note = newDashboard.notes.get(note.rightLink)\n                decideForInsertion(note, searchProps, newSearch)\n            }\n        }\n    }\n\n    newDashboard.search = newSearch.notes\n}\n\n// Function to pack the workspace\nexport function getWorkspace(newDashboard){\n    const removingIdxs = []\n    const newWorkspace = newDashboard.workspaceIds.flatMap(\n        (id, index) => reportAndAdd(\n            newDashboard, \n            id, \n            index, \n            removingIdxs, \n            'noteOfWorkspaceNotFoundError!'\n        )\n    )\n    newDashboard.workspace = newWorkspace\n    if(removingIdxs.length){\n        newDashboard.workspaceIds = removeFromSequence(removingIdxs, newDashboard.workspaceIds)\n\n    }\n} \n\n// Get the notes that are links of the selectedNote based on the direction of links given by rootsOrBranches\nexport function getLinksFromProps(newDashboard, rootsOrBranches, setNotesUpdating){\n        \n    if(newDashboard.selectedNoteId){\n\n        const selectedNote = newDashboard.notes.get(newDashboard.selectedNoteId)\n        const removingIdxs = []\n\n        if(rootsOrBranches){\n            newDashboard.links = selectedNote.roots.flatMap(\n                (id, index) => reportAndAdd(\n                    newDashboard, \n                    id, \n                    index, \n                    removingIdxs, \n                    'noteOfLinksNotFoundError'\n                )   \n            )\n            if(removingIdxs.length){\n                selectedNote.roots = removeFromSequence(removingIdxs, selectedNote.roots)\n                backupNote(selectedNote, 'meta', setNotesUpdating)\n            }\n        }\n        else{\n            newDashboard.links = selectedNote.branches.flatMap(\n                (id, index) => reportAndAdd(\n                    newDashboard, \n                    id, \n                    index, \n                    removingIdxs, \n                    'noteOfLinksNotFoundError'\n                )\n            )\n            if(removingIdxs.length){\n                selectedNote.branches = removeFromSequence(removingIdxs, selectedNote.branches)\n                backupNote(selectedNote, 'meta', setNotesUpdating)\n            }   \n        }\n    }\n    else{\n        newDashboard.links = []\n    }\n}\n\n// Removes several elements from a sequence\n// Used if some ghost ids are present in some sequence\nexport function removeFromSequence(removingIdxs, sequence){\n    return sequence.filter(\n        (e, idx) => !removingIdxs.includes(idx)\n    )\n}\n\n// if the note corresponding to the id exists, return it\n// otherwise show an error report\nexport function reportAndAdd(newDashboard, id, index, removingIdxs, message){\n    const note = newDashboard.notes.get(id)\n\n    if(note){\n        return [copyNote(newDashboard.notes.get(id))]\n    }\n\n    else{\n        removingIdxs.push(index)\n        errorAlert(message, id, newDashboard)\n        return []\n    }\n}\n\nexport function errorAlert(message, id, newDashboard){\n    window.alert(\n        '-------- BETA VERSION ERROR REPORT ------- \\n' + \n        '---- PLEASE SHARE WITH THE DEVELOPER --- \\n' +\n        'along with some info about what you did to get here \\n' +\n        'EMAIL: nicolamendini0@gmail.com \\n' +\n        'THANK YOU!' +\n        '\\n\\nERROR: \\n' + \n        message + \n        '\\n\\nNOTE: \\n' + \n        id + '\\n' +\n        '\\n\\nNOTES-ORDER: \\n' + \n        newDashboard.notesOrder + \n        '\\n\\nLINKS: \\n' + \n        newDashboard.links +\n        '\\n\\nWORKSPACE-IDS: \\n' +\n        newDashboard.workspaceIds\n    )\n}\n\nconst updateElement = (note, updatesCounter, backup) => {\n    updatesCounter.n += 1\n    setTimeout(() => {\n        backup(note, 'meta')\n    }, (200 * updatesCounter.n))\n}\n\nexport function checkLinksSanity(newDashboard, backup){\n\n    // if there is more than one note\n    if(newDashboard.notes.size < 2){\n        return\n    }\n\n    var lastNote = null\n    var temp = null\n    var updatesCounter = Object.create(null)\n    updatesCounter.n = 0\n    var prevNote = newDashboard.notes.get(newDashboard.firstNoteId)\n    var currNote = null\n    var noteTracker = Object.create(null)\n    var updateNextNote = false\n\n    // FIRST NOTE SANITY\n    // recover first note if it temporarily got lost of track from firstNoteId\n    if(!prevNote || prevNote.leftLink){\n        console.log('first note temporarily inexistent or has a left link')\n        // TEST PASSED\n        for(const [, note] of newDashboard.notes){\n            if(!note.leftLink){\n                newDashboard.firstNoteId = note.id\n                prevNote = note\n                console.log('better prev note found')\n            }\n            if(!note.rightLink){\n                lastNote = note\n                console.log('last note found')\n            }\n        }\n\n        // if there are no other good candidates to be a first node, \n        // use the one that was already stored and  get rid of the wrong link\n        if(prevNote && prevNote.leftLink){\n            prevNote.leftLink = null\n            updateElement(prevNote, updatesCounter, backup)\n            console.log('removing wrong left link')\n        }\n\n        // trying to recover the first note going backwards\n        if(lastNote && !prevNote){\n            prevNote = lastNote\n            for(const [,] of newDashboard.notes){\n                temp = newDashboard.notes.get(prevNote.leftLink)\n                if(temp && !noteTracker[temp.id]){\n                    prevNote = temp\n                }\n                else{\n                    newDashboard.firstNoteId = prevNote.id\n                    prevNote.leftLink = null\n                    updateElement(prevNote, updatesCounter, backup)\n                    console.log('backwards recevery first note')\n                    break\n                }\n                noteTracker[prevNote.id] = true\n            }\n           noteTracker = Object.create(null)\n        }\n\n        // otherwise pick the first note in the map and go on\n        if(!prevNote){\n            for(const [, note] of newDashboard.notes){\n                prevNote = note\n                prevNote.leftLink = null\n                newDashboard.firstNoteId = prevNote.id\n                updateElement(prevNote, updatesCounter, backup)\n                console.log('last note not found, random picking a first note')\n                break\n            }\n        }\n    }\n\n    noteTracker[prevNote.id] = true\n\n    // ALL OTHER NOTES' SANITY\n    // for each note, check that it has links and that it is connected to the neighbours\n    for(let i=1; i<newDashboard.notes.size; i++){\n\n        // try to access the current note\n        currNote = newDashboard.notes.get(prevNote.rightLink)\n\n        // if the right link was correct\n        if(currNote){\n\n            // if there is a loop, discard the note\n            if(noteTracker[currNote.id]){\n                console.log('loop found: ', i)\n                currNote = null\n            }\n\n            // check that the left link of the found note is correct\n            else if(currNote.leftLink!==prevNote.id){\n                console.log('left link wrong, fixing: ', i)\n                currNote.leftLink = prevNote.id\n                updateNextNote = true\n            }\n        }\n\n        // if the current note was not found\n        if(!currNote){\n            console.log('the successor does not exist: ', i)\n\n            // try to find a match by scrolling in the opposite direction\n            for(const [, note] of newDashboard.notes){\n                if(note.leftLink===prevNote.id && !noteTracker[note.id]){\n                    console.log('found match: ', i)\n                    currNote = note\n                    prevNote.rightLink = currNote.id\n                    updateElement(prevNote, updatesCounter, backup)\n                    break\n                }\n            }\n\n            // hard recovery, try to pick the most suitable note\n            if(!currNote){\n                for(const [, note] of newDashboard.notes){\n                    // only consider them if they have not been encountered before\n                    if(!noteTracker[note.id]){\n                        // if we haven't find a replacement yet\n                        // or the replacement we've found is the last note\n                        // replace again because it's a better choice\n                        if(!currNote || !currNote.rightLink){\n                            currNote = note\n                        }\n                        // if we find a note that has a defective left link\n                        // that's the best we can aim for at this stage so use it and break\n                        if(!newDashboard.notes.get(note.leftLink)){\n                            console.log('slightly better hard choice found')\n                            currNote = note\n                            break\n                        }\n                    }\n                }\n                console.log('hard choice made: ', i)\n                prevNote.rightLink = currNote.id\n                currNote.leftLink = prevNote.id\n                updateElement(prevNote, updatesCounter, backup)\n                updateNextNote = true\n            }\n        }\n\n        // move the head ahead and eventually update\n        noteTracker[currNote.id] = true\n        prevNote = currNote\n        if(updateNextNote){\n            updateElement(prevNote, updatesCounter, backup)\n            updateNextNote = false\n        }\n    }\n\n    // at the end, check the last note\n    if(currNote.rightLink){\n        console.log('last note had a right link')\n        currNote.rightLink = null\n        updateElement(currNote, updatesCounter, backup)\n    }\n}","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nNotesManipulation functions\nFunction to manipulate and change Note objects\neg: add/remove links or edit threads \n*/\n\nimport { LINKSLIMIT} from '../components/Dashboard'\nimport { backupNote } from \"./RequestsMakers\";\nimport { addElementAt, arraysEqual, getCaption, removeElementAt } from \"./DashboardUtils\";\nimport { alreadyIn, mergeBothCardsOccupied } from \"./Messages\";\nimport { toast } from 'react-toastify';\n\nconst notifyAlreadyIn = () => toast(alreadyIn)\nconst notifyNotesAlreadyOccupied = () => toast(mergeBothCardsOccupied)\n\n// Function to add a note to a thread if the element is not the opened thread itself\nexport function addToWorkspace(newDashboard, element, position){\n    if(newDashboard.openedWorkspaceId===element){\n        //alreadyInAlert();\n    }\n    else{\n        newDashboard.workspaceIds = addElementAt(newDashboard.workspaceIds, position, element)\n    }\n}\n\n// Function to add note to the branches if a note is selected and the note is not already a child\n// Also checks that the links respect the limits. Adds the noteToAdd to the branches of noteFrom\n// and does the opposite with the roots\nexport function addToBranches (noteFrom, noteToAdd, destination, rootsOrBranches) {\n\n    const notAlreadyInBranches = !noteFrom.branches.includes(noteToAdd.id);\n    const notChildOfItself = noteFrom.id!==noteToAdd.id\n    const branchesWithinLimit = noteFrom.branches.length < LINKSLIMIT\n    const notAlreadyInRoots = !noteToAdd.roots.includes(noteFrom.id);\n    const rootsWithinLimits = noteToAdd.roots.length < LINKSLIMIT\n\n    if(notAlreadyInBranches && \n    notChildOfItself && \n    branchesWithinLimit && \n    notAlreadyInRoots && \n    rootsWithinLimits){\n\n        if(destination!==undefined){\n            if(rootsOrBranches){\n                noteFrom.branches.push(noteToAdd.id)\n                noteToAdd.roots = addElementAt(noteToAdd.roots, destination, noteFrom.id)\n            }\n            else{\n                noteFrom.branches = addElementAt(noteFrom.branches, destination, noteToAdd.id)\n                noteToAdd.roots.push(noteFrom.id)\n            }\n            return true\n        }\n        else{\n            noteFrom.branches.push(noteToAdd.id)\n            noteToAdd.roots.push(noteFrom.id)\n        }\n    }\n}\n\n// Specular function to remove a note from the branches and alert for all the threads\n// that rely on that connection so that the user first has to restructure them manually\nexport function removeFromBranches (newDashboard, noteFrom, noteToDel) {\n\n    // alert for all the threads that rely on the link to remove\n    for(const [, note] of newDashboard.notes){\n        for(let n=1; n<note.thread.length; n++){\n            if(note.thread[n-1]===noteFrom.id && note.thread[n]===noteToDel.id){\n                toast('The link you are tying to delete is used in the Thread : ' + getCaption(note) + '... \\nPlease restructure this Thread it if you desire to proceed.')\n                return false\n            }\n        }\n    }\n\n    // if the check is passed, remove the note from the branches of noteFrom\n    var targetIdx = noteFrom.branches.findIndex(id => id===noteToDel.id);\n    if(targetIdx!==-1){\n        noteFrom.branches = removeElementAt(\n            noteFrom.branches, \n            targetIdx\n        )\n    }\n\n    // and remove the link from the roots of noteToDel\n    targetIdx = noteToDel.roots.findIndex(id => id===noteFrom.id);\n    if(targetIdx!==-1){\n        noteToDel.roots = removeElementAt(\n            noteToDel.roots, \n            targetIdx\n        );\n    }\n\n    return true\n}\n\n// Function to force the removal of a note even if it appears in many other \n// threads or collections or branches\nexport function forceRemove(newDashboard, targetNoteId, setNotesUpdating){\n    var presenceCheck = false\n    var updatesCounter = 0\n\n    for(const [, note] of newDashboard.notes){\n\n        // remove all branches occurrences\n        if(note.branches.includes(targetNoteId)){\n            note.branches = note.branches.filter(\n                (id) => id!==targetNoteId\n            )\n            presenceCheck = true\n        }\n\n        // remove all roots occurrences\n        if(note.roots.includes(targetNoteId)){\n            note.roots = note.roots.filter(\n                (id) => id!==targetNoteId\n            )\n            presenceCheck = true\n        }\n\n        // redirect threads that relied on it and add new branches\n        if(note.thread.includes(targetNoteId)){\n            note.thread = note.thread.filter(\n                (id) => id!==targetNoteId\n            )\n            linkThreadNotes(newDashboard, note.thread, setNotesUpdating)\n            presenceCheck = true\n        }\n\n        // if any changes have been made to the current note, backup\n        if(presenceCheck){\n            updatesCounter+=1\n            setTimeout(() => {\n                backupNote(note, 'meta', setNotesUpdating)\n            }, (200 * updatesCounter))\n        }\n\n        presenceCheck = false           \n    }\n}\n\n// Link all the pairwise consecutive notes of a thread\nexport function linkThreadNotes(newDashboard, thread, setNotesUpdating){\n\n    var updatesCounter=0\n    // go through the whole thread and add the branch\n    for(let i=1; i<thread.length; i++){\n        const noteFrom = newDashboard.notes.get(thread[i-1])\n        const noteToAdd = newDashboard.notes.get(thread[i])\n\n        // if successful, backup\n        if(addToBranches(noteFrom, noteToAdd)){\n            updatesCounter+=1\n            setTimeout(() => {\n                backupNote(noteFrom, 'meta', setNotesUpdating)\n                backupNote(noteToAdd, 'meta', setNotesUpdating)\n            }, (200 * updatesCounter))\n        }\n    }\n}\n\n// Wrap an unsaved workspace with an empty note\nexport function wrapWorkspace(newDashboard, targetNoteId, setNotesUpdating, threadOrCollection){\n\n    // check that the note is empty\n    if(!newDashboard.notes.get(targetNoteId).thread.length && \n    !newDashboard.notes.get(targetNoteId).collection.length){\n\n        // check that the dragged note is not inside the collection that it is trying to wrap\n        if(!newDashboard.workspaceIds.includes(targetNoteId)){\n            const targetNote = newDashboard.notes.get(targetNoteId);\n\n            // if thread mode, add to the thread of the note and set color to yellow\n            if(threadOrCollection){\n                targetNote.thread = newDashboard.workspaceIds\n                linkThreadNotes(newDashboard, targetNote.thread, setNotesUpdating)\n            }\n\n            // if collection mode, add to the collection of the note and set color to blue\n            else{\n                targetNote.collection = newDashboard.workspaceIds\n            }\n\n            // set the wrapping note as the selectedNote\n            newDashboard.prevSelectedNoteId = newDashboard.selectedNoteId\n            newDashboard.selectedNoteId = targetNoteId\n\n            // open the note in the workspace and backup it\n            openInWorkspace(threadOrCollection, newDashboard, setNotesUpdating, threadOrCollection)\n            backupNote(targetNote, 'meta', setNotesUpdating)\n        }\n        else{\n            notifyAlreadyIn();\n        }\n    }\n}\n\n// Function to open a note in the workspace, so that the notes of the workspace \n// belong to either the notes thread or collection\nexport function openInWorkspace(workspaceMode, newDashboard, setNotesUpdating, threadOrCollection, targetNote){\n\n    // close and save the workspace that is already opened\n    closeAndSaveWorkspace(newDashboard, setNotesUpdating, threadOrCollection)\n\n    // retrieve the note we want to open\n    if(!targetNote){\n        targetNote = newDashboard.notes.get(newDashboard.selectedNoteId)\n    }\n\n    // if it is thread mode, open the thread\n    if(workspaceMode){\n        newDashboard.workspaceIds = [...targetNote.thread]\n    }\n\n    // otherwise open the collection\n    else{\n        newDashboard.workspaceIds = [...targetNote.collection]\n    }\n\n    // set the openedWorkspaceId as the id of the note we want to open\n    newDashboard.openedWorkspaceId = targetNote.id\n}\n\n// Function to close and save an active workspace\nexport function closeAndSaveWorkspace(newDashboard, setNotesUpdating, threadOrCollection){\n\n    if(newDashboard.openedWorkspaceId){\n        const targetNote = newDashboard.notes.get(newDashboard.openedWorkspaceId)\n        // flag to check if any changes occurred and therefore if there needs to be backup\n        var anyChangesFlag=false\n\n        if(threadOrCollection){\n\n            anyChangesFlag = arraysEqual(targetNote.thread, newDashboard.workspaceIds)\n\n            // if changes, assign and relink\n            if(anyChangesFlag){\n                targetNote.thread = newDashboard.workspaceIds;\n                linkThreadNotes(newDashboard, targetNote.thread, setNotesUpdating)\n            }\n        }\n\n        else{\n            \n            anyChangesFlag = arraysEqual(targetNote.collection, newDashboard.workspaceIds)\n\n            if(anyChangesFlag){\n                targetNote.collection = newDashboard.workspaceIds\n            }\n        }\n\n        // if any changes, backup the note\n        if(anyChangesFlag){\n            backupNote(targetNote, 'meta', setNotesUpdating)\n        }\n\n        newDashboard.openedWorkspaceId = null;\n    }\n\n    newDashboard.workspaceIds = [];\n}\n\n// Remove old selection and select a new note\nexport function noteSelector(noteToSelect, mergeMode, setMergeMode, dashboard, packDashboard, mergeNotes){\n\n    // If the mergeMode is not on, select a new note and update the links\n    if(!mergeMode){\n        if(!dashboard.selectedNoteId || dashboard.selectedNoteId!==noteToSelect.id){\n            // removing the focus from the search bar\n            const searchBar = document.getElementById('search-bar')\n            if(searchBar){\n                searchBar.blur()\n            }\n            const newDashboard = {...dashboard}\n            newDashboard.prevSelectedNoteId = newDashboard.selectedNoteId\n            newDashboard.selectedNoteId = noteToSelect.id\n            // this is done to make the update efective immediately and mitigate wrong renders\n            dashboard.selectedNoteId = noteToSelect.id\n            packDashboard(newDashboard, false, false, true, true)\n        } \n    }\n\n    // otherwise, check that there are not clashes between the two mergin notes and initialise the merging process\n    else{\n        if(noteToSelect.id!==dashboard.selectedNoteId){\n            if(\n            (noteToSelect.thread.length && dashboard.notes.get(dashboard.selectedNoteId).collection.length) ||\n            (dashboard.notes.get(dashboard.selectedNoteId).thread.length && noteToSelect.collection.length)\n            ){\n                notifyNotesAlreadyOccupied()\n            }\n\n            else{\n                mergeNotes(dashboard.notes.get(dashboard.selectedNoteId), noteToSelect);\n            }\n        }\n\n        // if the user merges a note with itself, do not do anything\n        else{\n            setMergeMode(false);\n        }\n    }\n}\n\n// Function to convert thread to collection\nexport function threadToCollection(note){\n    note.collection = [...new Set([...note.thread])]\n    note.thread = []\n}\n\n// Function to convert thread to collection\nexport function collectionToThread(note){\n    note.thread = note.collection\n    note.collection = []\n}\n","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nDragManager function\nManages all the drag gestures between notes\n*/\n\nimport { removeFromBranches, addToBranches, addToWorkspace, openInWorkspace, wrapWorkspace } from \"./NotesManupulation\";\nimport { addElementAt, removeElementAt } from \"./DashboardUtils\";\nimport { WORKSPACELIMIT, SHAREDMEX, initSearchProps } from \"../components/Dashboard\";\nimport { backupNote } from \"./RequestsMakers\";\nimport { moveNoteInsideGraph, moveNoteInsideArea } from \"./DashboardUtils\";\nimport { alertMergeMode, workspaceLimitReached } from \"./Messages\";\nimport { toast } from \"react-toastify\";\n\nconst notifyMerge = () => toast(alertMergeMode)\nconst notifyWorkspaceLimit = () => toast(workspaceLimitReached)\n\n// Manage the dragging and dropping rules\n// all the information that is needed is contained in the result\n// parameter that is provided by the DragAndDropContext component\n// from React Beautiful DnD\nexport function dragManager(\n    dashboard,\n    mergeMode, \n    threadOrCollection, \n    setThreadOrCollection,\n    rootsOrBranches, \n    setNotesUpdating,\n    packDashboard,\n    setSearchProps,\n    result\n){\n\n    // if the destination is invalid do not do anything\n    if(result.destination===null){return}\n\n    // if the mergeMode is on, disable the gestures\n    else if(mergeMode){notifyMerge()}\n\n    // if the source of the dragging is the search \n    else if(result.source.droppableId==='search-area'){\n\n        // if it goes to the workspace\n        if(result.destination.droppableId==='workspace-area'){\n            const targetId = dashboard.search[result.source.index].id\n            const destination = result.destination.index\n            workspaceAdder(dashboard, threadOrCollection, targetId, packDashboard, destination)\n        }\n\n        // if the destination was the links area aka branches area\n        else if(result.destination.droppableId==='branches-area'){\n            const newDashboard = {...dashboard}\n            const noteFrom = newDashboard.notes.get(dashboard.search[result.source.index].id)\n            dropToBranches(noteFrom, result, dashboard, newDashboard, rootsOrBranches, backupNote, setNotesUpdating)\n            packDashboard(newDashboard, false, false, true)\n        }\n\n        // if the destination is the wrapper area\n        else if(result.destination.droppableId==='wrapper-area'){\n            const newDashboard = {...dashboard}\n            const targetNote = dashboard.search[result.source.index]\n            manageWrapper(newDashboard, targetNote, threadOrCollection, setThreadOrCollection, setNotesUpdating)\n            packDashboard(newDashboard)\n        }\n\n        // if the destination is the search area itself just change the order of the notes\n        else if(result.destination.droppableId==='search-area'){\n            if(result.source.index!==result.destination.index){\n                if(dashboard.openedCollectionId){\n                    const newDashboard = {...dashboard}\n                    const targetNote = newDashboard.notes.get(newDashboard.openedCollectionId)\n                    if(targetNote){\n                        targetNote.collection = moveNoteInsideArea(\n                            targetNote.collection,\n                            result.source.index,\n                            result.destination.index\n                        )\n                        packDashboard(newDashboard, true)\n                        backupNote(targetNote, 'meta', setNotesUpdating)\n                    }\n                }\n                else{\n                    const sourceNote = dashboard.search[result.source.index]\n                    const targetNote = dashboard.search[result.destination.index]\n                    var dir = result.source.index > result.destination.index\n                    // only if not trying to move between pinned notes\n                    if(\n                    !(\n                        (!targetNote.pinned && sourceNote.pinned) ||\n                        (!sourceNote.pinned && targetNote.pinned)\n                    )\n                    ){\n                            \n                        // reorder the notes\n                        const newDashboard = {...dashboard}\n                        if(sourceNote.pinned){\n                            dir = !dir\n                        }\n                        moveNoteInsideGraph(\n                            newDashboard, \n                            sourceNote.id, \n                            targetNote.id, \n                            dir, \n                            (note) => backupNote(note, 'meta', setNotesUpdating)\n                        )\n                        newDashboard.prevSelectedNoteId = newDashboard.selectedNoteId\n                        newDashboard.selectedNoteId = sourceNote.id\n                        packDashboard(newDashboard, true, false, true)\n                    }\n                }\n            }\n        }\n\n        // if the destination is the search bar, open the collection of the dragging note in search\n        else if(result.destination.droppableId==='search-bar'){\n            const newDashboard = {...dashboard}\n            const targetNote = dashboard.search[result.source.index]\n            dropOnSearchBar(newDashboard, setSearchProps, packDashboard, targetNote)\n        }\n    }\n\n    // if the source is the workspace area\n    else if(result.source.droppableId==='workspace-area'){\n\n        // if the destination is the search, remove that note from the workspace\n        // select the dragging note and update the dashboard\n        if(result.destination.droppableId==='search-area'){\n            const newDashboard = {...dashboard}\n            const indexToRem = result.source.index\n            workspaceRemover(newDashboard, threadOrCollection, packDashboard, indexToRem)\n        }\n\n        // if the destination is the workspace area itself, just reorder the thread or collection and update\n        else if(result.destination.droppableId==='workspace-area'){\n            const newDashboard = {...dashboard}\n            newDashboard.workspaceIds = moveNoteInsideArea(newDashboard.workspaceIds, result.source.index, result.destination.index)\n            newDashboard.prevSelectedNoteId = newDashboard.selectedNoteId\n            newDashboard.selectedNoteId = newDashboard.workspaceIds[result.destination.index]\n            packDashboard(newDashboard, false, true, true)\n        }\n\n        // if the destination is the search bar, open the collection of the dragged note\n        else if(result.destination.droppableId==='search-bar'){\n            const newDashboard = {...dashboard}\n            const targetNote = dashboard.workspace[result.source.index]\n            dropOnSearchBar(newDashboard, setSearchProps, packDashboard, targetNote)\n        }\n\n        // if the destination was the links area aka branches area\n        else if(result.destination.droppableId==='branches-area'){\n            const newDashboard = {...dashboard}\n            const noteFrom = newDashboard.notes.get(dashboard.workspace[result.source.index].id)\n            dropToBranches(noteFrom, result, dashboard, newDashboard, rootsOrBranches, backupNote, setNotesUpdating)\n            packDashboard(newDashboard, false, false, true)\n        }\n    }\n\n    // if the source is the branches area\n    else if(result.source.droppableId==='branches-area'){\n\n        // if the destination is the search, remove a link\n        if(result.destination.droppableId==='search-area'){\n            const newDashboard = {...dashboard}\n            const noteFrom = newDashboard.notes.get(dashboard.links[result.source.index].id);\n            const noteToRem = newDashboard.notes.get(dashboard.selectedNoteId)\n\n            // if branches mode, remove noteToRem from noteFrom\n            if(!rootsOrBranches){\n                if(removeFromBranches(newDashboard, noteToRem, noteFrom)){\n                    backupNote(noteToRem, 'meta', setNotesUpdating)\n                    backupNote(noteFrom, 'meta', setNotesUpdating)\n                }\n            }\n\n            //otherwise do the opposite\n            else{\n                if(removeFromBranches(newDashboard, noteFrom, noteToRem)){\n                    backupNote(noteToRem, 'meta', setNotesUpdating)\n                    backupNote(noteFrom, 'meta', setNotesUpdating)\n                }\n            }\n\n            packDashboard(newDashboard, true, false, true);\n        }\n\n        // if the destination is the workspace area, add to thread\n        // not a case for the collections because links are only visible in thread mode\n        else if(result.destination.droppableId==='workspace-area'){\n            const targetId = dashboard.links[result.source.index].id\n            const destination = result.destination.index\n            workspaceAdder(dashboard, threadOrCollection, targetId, packDashboard, destination)\n        }\n\n        // if the destination is the branches area itself, just reorder and update\n        else if(result.destination.droppableId==='branches-area'){\n            if(result.source.index!==result.destination.index){\n                const newDashboard = {...dashboard}\n                const targetNote = newDashboard.notes.get(newDashboard.selectedNoteId)\n                if(rootsOrBranches){\n                    targetNote.roots = moveNoteInsideArea(\n                        targetNote.roots, \n                        result.source.index, \n                        result.destination.index\n                    )\n                }\n                else{\n                    targetNote.branches = moveNoteInsideArea(\n                        targetNote.branches, \n                        result.source.index, \n                        result.destination.index\n                    )\n                }\n                backupNote(targetNote, 'meta', setNotesUpdating)\n                packDashboard(newDashboard, false, false, true)\n            }\n        }\n\n        // if the destination is the search bar, open the collection of the dragging note in search\n        else if(result.destination.droppableId==='search-bar'){\n            const newDashboard = {...dashboard}\n            const targetNote = dashboard.links[result.source.index]\n            dropOnSearchBar(newDashboard, setSearchProps, packDashboard, targetNote)\n        }\n    }\n}\n\nconst dropToBranches = (\n    noteFrom, \n    result, \n    dashboard, \n    newDashboard, \n    rootsOrBranches, \n    backupNote, \n    setNotesUpdating\n) => {\n    const noteToAdd = newDashboard.notes.get(dashboard.selectedNoteId)\n    // if we are in branches mode add noteTo to noteFrom\n    if(!rootsOrBranches){\n        if(addToBranches(noteToAdd, noteFrom, result.destination.index, rootsOrBranches)){\n            backupNote(noteToAdd, 'meta', setNotesUpdating)\n            backupNote(noteFrom, 'meta', setNotesUpdating)\n        } \n    }\n\n    // otherwise do the opposite and add noteFrom to noteTo\n    else{\n        if(addToBranches(noteFrom, noteToAdd, result.destination.index, rootsOrBranches)){\n            backupNote(noteToAdd, 'meta', setNotesUpdating)\n            backupNote(noteFrom, 'meta', setNotesUpdating)\n        }   \n    }\n}\n\n// Function to add a note to the workspace\nexport function workspaceAdder(dashboard, threadOrCollection, targetId, packDashboard, destination){\n\n    if(destination===undefined || destination===null){\n        destination = dashboard.workspaceIds.length\n    }\n\n    // check that the workspace does not break the limits\n    if(dashboard.workspaceIds.length > WORKSPACELIMIT){\n        notifyWorkspaceLimit()\n    }\n\n    // else if we are in thread mode, add to the thread and update the dashboard\n    else if(threadOrCollection){\n        const newDashboard = {...dashboard}\n        addToWorkspace(newDashboard, targetId, destination)\n        packDashboard(newDashboard, false, true, true)\n    }\n\n    // else if we are in collectionMode, check that the notes collection is not \n    // already opened in dashboard and that the note is not already in, then add it\n    // to the collection and update the dashboard\n    else{\n        if(!dashboard.openedWorkspaceId ||\n            dashboard.openedWorkspaceId!==targetId\n        ){\n            if(!dashboard.workspaceIds.includes(targetId)){\n                const newDashboard = {...dashboard}\n                newDashboard.workspaceIds = addElementAt(newDashboard.workspaceIds, destination, targetId)\n                packDashboard(newDashboard, false, true)\n            }\n        }\n        else{\n            //alreadyInAlert();\n        }\n    }\n}\n\n// Function to remove a note from the workspace\nexport function workspaceRemover(newDashboard, threadOrCollection, packDashboard, indexToRem){\n    newDashboard.workspaceIds = removeElementAt(newDashboard.workspaceIds, indexToRem)\n    packDashboard(newDashboard, false, true, true)\n}\n\nexport function dropOnSearchBar(newDashboard, setSearchProps, packDashboard, targetNote){\n    SHAREDMEX.resetSearchScroll = true\n    newDashboard.openedCollectionId = targetNote.id\n    setSearchProps({...initSearchProps})\n    packDashboard(newDashboard, true)\n}\n\n// Function to manage the wrapper's functionality\nexport function manageWrapper(newDashboard, targetNote, threadOrCollection, setThreadOrCollection, setNotesUpdating){\n\n    // if the current workspace has notes, wrap them with the target note\n    if(newDashboard.workspaceIds.length>0 && !newDashboard.openedWorkspaceId){\n        wrapWorkspace(newDashboard, targetNote.id, setNotesUpdating, threadOrCollection )\n    }\n\n    // otherwise just expand the note so that the workspace now contains its thread or collection\n    else{\n        if(targetNote.thread.length){\n            openInWorkspace(true, newDashboard, setNotesUpdating, threadOrCollection, targetNote)\n            setThreadOrCollection(true)\n            \n        }\n        else if(targetNote.collection.length){\n            openInWorkspace(false, newDashboard, setNotesUpdating, threadOrCollection, targetNote)\n            setThreadOrCollection(false)\n        }\n        else{\n            openInWorkspace(threadOrCollection, newDashboard, setNotesUpdating, threadOrCollection)\n        }\n    }\n}\n","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nNoteDeleter function\nDeletes a note and resolves potential conflicts in the process\n*/\n\nimport { db, driveVariables } from \"../components/Dashboard\";\nimport { checkConflicts, detachFromPosition, removeElementAt, sanitiseForRemoval } from \"./DashboardUtils\";\nimport { forceRemove } from \"./NotesManupulation\";\nimport { backupNote } from \"./RequestsMakers\";\nimport { updateNoteFile } from \"./BackupHelper\";\n\n// Delete a note given by removingId from the notes array and cascade\n// forceFlag controls whether the removal shouldbe forced without asking\nexport async function noteDeleter(\n    removingId, \n    reselect,\n    newDashboard, \n    mergeMode, \n    setMergeMode,\n    setNotesUpdating,\n    packDashboard\n){\n\n    // get the note to remove and check for conflicts\n    const noteToRemove = newDashboard.notes.get(removingId)\n\n    // if no conflicts\n    if(checkConflicts(newDashboard, removingId) || mergeMode){\n        \n        // remove it from the dashboard\n        detachFromPosition(newDashboard, noteToRemove, (note) => backupNote(note, 'meta', setNotesUpdating))\n        newDashboard.notes.delete(removingId)\n        noteToRemove.deleted = true\n\n        // if this function was not called by merge mode then sanitise all collections and dashboard\n        if(!mergeMode){\n\n            // sanitise all the collections by simply removing the entry\n            // no conflicts because collections have no links\n            var updatesCounter=0\n            for(const [, note] of newDashboard.notes){\n                const removingIndex = note.collection.findIndex(id => id===removingId)\n                if(removingIndex!==-1){\n                    note.collection = removeElementAt(note.collection, removingIndex)   \n                    updatesCounter+=1\n                    setTimeout(() => {\n                        backupNote(note, 'meta', setNotesUpdating)\n                    }, (200 * updatesCounter))\n                }\n\n            }\n\n            sanitiseForRemoval(newDashboard, removingId)\n        }\n\n        // if it was called by merge mode, assume it is already sanitised previously and end merge mode\n        else{\n            setMergeMode(false)\n        }\n\n        // if possible, flag the note on drive as removed\n        if(driveVariables.authorisation){\n            updateNoteFile(noteToRemove, 'meta', setNotesUpdating)\n        }\n\n        // remove the note locally and update the dashboard\n        db.notes.delete(removingId)\n\n        if(reselect){\n            const noteIdxInSearch = newDashboard.search.findIndex(note => note.id===removingId)\n            if(noteIdxInSearch!==-1){\n                if(newDashboard.search[noteIdxInSearch+1]){\n                    newDashboard.selectedNoteId = newDashboard.search[noteIdxInSearch+1].id\n                }\n                else if(noteIdxInSearch > 0 && newDashboard.search[noteIdxInSearch-1]){\n                    newDashboard.selectedNoteId = newDashboard.search[noteIdxInSearch-1].id\n                }\n            }\n        }\n        \n        packDashboard(newDashboard)\n    }\n\n    // if there are conflicts ask to force the removal through the \n    // forceRemove function\n    else{            \n        forceRemove(newDashboard, removingId, setNotesUpdating);\n        noteDeleter(\n            removingId, \n            false, \n            newDashboard,\n            mergeMode, \n            setMergeMode,\n            setNotesUpdating,\n            packDashboard\n        )\n    }\n}\n","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nNoteMerger function\nMerges two notes objects in a meaningful way\nUnifies all the links and concatenates the text\nFor the user doing the same manually would make the system impractical\n*/\n\nimport { toast } from \"react-toastify\";\nimport { LINKSLIMIT, WORKSPACELIMIT, TEXTLIMIT, db } from \"../components/Dashboard\"\nimport { setPreview } from \"./DashboardUtils\";\nimport { mergeLinksLimit, mergeTextLimit, mergeWorkspaceLimit } from \"./Messages\";\nimport { addToBranches } from \"./NotesManupulation\";\nimport { linkThreadNotes } from \"./NotesManupulation\";\nimport { backupNote } from \"./RequestsMakers\";\n\nconst notifyTextLimit = () => toast(mergeTextLimit);\nconst notifyLinksLimit = () => toast(mergeLinksLimit);\nconst notifyWorkspaceLimit = () => toast(mergeWorkspaceLimit);\n\n// Merges noteA and noteB\nexport function noteMerger(\n    noteA, \n    noteB, \n    setMergeMode, \n    dashboard, \n    setNotesUpdating, \n    threadOrCollection, \n    packDashboard, \n    deleteNote\n){\n\n    // Unifies roots, branches, collection and thread by also \n    // using sets to avoid repeated entries when needed\n    const newBranches = [...new Set([...noteA.branches, ...noteB.branches])]\n    const newRoots = [...new Set([...noteA.roots, ...noteB.roots])]\n    const newCollection = [...new Set([...noteA.collection, ...noteB.collection])]\n    const newThread = [...noteA.thread, ...noteB.thread]\n\n    // check that the limits for branches and roots are met\n    if(newBranches.length > LINKSLIMIT || newRoots.length > LINKSLIMIT){\n        notifyLinksLimit()\n        setMergeMode(false)\n        return\n    }\n\n    // check that the limits for thread and collections are met\n    if(newCollection.length > WORKSPACELIMIT || newThread.length > WORKSPACELIMIT){\n        notifyWorkspaceLimit()\n        setMergeMode(false)\n        return\n    }\n\n    // if the checks passed, retrieve the notes and merge the contents\n    db.notes.get(noteA.id).then((dbNoteA) => \n        db.notes.get(noteB.id).then((dbNoteB) => {\n\n            const newText = dbNoteA.text + ' ' + dbNoteB.text\n\n            // check if the merged texts are still within the limits\n            // if not, abort\n            if(newText.length > TEXTLIMIT){\n                notifyTextLimit()\n                setMergeMode(false)\n                return\n            }\n\n            // if all the checks passed, initialise the new note C \n            // note C takes the same id as noteA\n            const newDashboard = {...dashboard}\n            const noteC = {\n                id: noteA.id,\n                text: newText,\n                branches: newBranches,\n                roots: newRoots,\n                thread: newThread,\n                collection: newCollection,\n                pinned: noteA.pinned || noteB.pinned,\n                color: noteA.color!=='#ffffff' ? noteA.color : noteB.color,\n                colorPreview: noteA.colorPreview!=='#ffffff' ? noteA.colorPreview : noteB.colorPreview,\n                version: noteA.version,\n                leftLink: noteA.leftLink,\n                rightLink: noteA.rightLink\n            }\n\n            // set the preview of the noteC based on the text\n            setPreview(noteC)\n            \n            // remove occurrences of noteA and noteB in noteC to avoid circularity of reference\n            noteC.branches = noteC.branches.filter((id) => \n                id!==noteA.id && id!==noteB.id\n            );\n            noteC.roots = noteC.roots.filter((id) => \n                id!==noteA.id && id!==noteB.id\n            );\n\n            // do the same for thread and collection\n            noteC.collection = noteC.collection.filter((id) =>\n                id!==noteA.id && id!==noteB.id\n            )\n            noteC.thread = noteC.thread.filter((id) =>\n                id!==noteA.id && id!==noteB.id\n            )\n            linkThreadNotes(newDashboard, noteC.thread, setNotesUpdating)\n\n            // add noteC to the dashboard\n            newDashboard.notes.set(noteC.id, noteC)\n\n            // start cleaning all the notes that have conflicts because they relied on the id\n            // of noteB that now will not exist anymore\n            var presenceCheck = false\n            var updatesCounter=0\n\n            for(const [, note] of newDashboard.notes){\n\n                // clean from threads if noteB ID included\n                if(note.thread.includes(noteB.id)){\n                    note.thread = note.thread.flatMap(\n                        (id) => id===noteB.id ? [noteA.id] : [id]\n                    )\n                    presenceCheck = true\n                }\n\n                // clean from collections if noteB ID included\n                if(note.collection.includes(noteB.id)){\n                    if(!note.collection.includes(noteC.id)){\n                        note.collection.push(noteC.id);\n                    }\n                    note.collection = note.collection.filter(\n                        (id) => id!==noteB.id\n                    )\n                    presenceCheck = true\n                }\n                    \n                // clean from branches if noteB ID included\n                if(note.branches.includes(noteB.id)){\n                    if(!note.branches.includes(noteC.id)){\n                        addToBranches(note, noteC)\n                    }\n                    note.branches = note.branches.filter(\n                        (id) => id!==noteB.id\n                    )\n                    presenceCheck = true\n                }\n\n                // clean from roots if noteB ID included\n                if(note.roots.includes(noteB.id)){\n                    if(!note.roots.includes(noteC.id)){\n                        addToBranches(noteC, note)\n                    }\n                    note.roots = note.roots.filter(\n                        (id) => id===noteB.id\n                    )\n                    presenceCheck = true\n                }\n            \n                // if any changes have been applied, backup the note\n                if(presenceCheck){\n                    updatesCounter+=1\n                    setTimeout(() => {\n                        backupNote(note, 'meta', setNotesUpdating)\n                    }, (200 * updatesCounter))\n                }\n                \n                \n                presenceCheck = false\n            }        \n            \n            // clean the current workspace from noteB \n            if(!threadOrCollection && dashboard.workspaceIds.includes(noteA.id)){\n                newDashboard.workspaceIds = newDashboard.workspaceIds.filter((id) =>\n                    id!==noteB.id\n                )\n            }\n            else{\n                newDashboard.workspaceIds = newDashboard.workspaceIds.flatMap((id) =>\n                    id===noteB.id ? [noteA.id] : [id]\n                )\n            }\n\n            // if noteB was open inside the collection, open noteC instead\n            if(newDashboard.openedCollectionId===noteB.id){\n                newDashboard.openedCollectionId=noteC.id\n            }\n\n            // if noteB was open inside the workspace, open noteC instead\n            if(newDashboard.openedWorkspaceId===noteB.id || newDashboard.openedWorkspaceId===noteA.id){\n                newDashboard.openedWorkspaceId=noteC.id\n                newDashboard.workspaceIds = newDashboard.workspaceIds.filter(\n                    (id) => id!==noteB.id && id!==noteA.id \n                )\n            }\n\n            // select noteC, backup, delete noteB and update the dashboard\n            newDashboard.prevSelectedNoteId = newDashboard.selectedNoteId\n            newDashboard.selectedNoteId = noteC.id;\n            backupNote(noteC, 'both', setNotesUpdating)\n            deleteNote(noteB.id, false, newDashboard)\n            packDashboard(newDashboard)\n        })\n    )\n}","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nKeyboardBindings Component\ncontains all the keyboard bindings that are applied to the dashboard and their relative functions\n*/\n\nimport { SLICESIZE, SHAREDMEX } from \"./Dashboard\"\nimport { pastelCols, vividCols } from \"./ColorPicker\"\nimport { workspaceAdder, workspaceRemover, manageWrapper } from \"../helpers/DragManager\"\n\nconst Mousetrap = require('mousetrap')\nconst controller = Object.create(null)\ncontroller.enabled = true\ncontroller.resetTimer = 0\ncontroller.waitTimer = 250\ncontroller.timer = controller.resetTimer\n\nconst KeyboardBindings = ({ \n\tdashboard,\n    selectNote,\n    deleteNote,\n    addNote,\n    packDashboard,\n    setDelayedNoteUpdate,\n    setTriggerRerender,\n    threadOrCollection,\n    setThreadOrCollection,\n    setNotesUpdating,\n    currentPage,\n    openEditor,\n    closeAndSave,\n    moveToTheExtremity,\n    mergeMode,\n    openOccurrences\n\n}) => {\n\n    // Function to select a new note and thus allow navigation with the left and right arrows\n    const selectInDir = (e, dir) => {\n        if (e.preventDefault) {\n            e.preventDefault()\n        } else {\n            // internet explorer\n            e.returnValue = false;\n        }\n        if(controller.enabled){\n            controller.enabled = false\n            controller.timer = controller.resetTimer\n\n            const selectedNoteIdx = dashboard.search.findIndex(note => note.id===dashboard.selectedNoteId)\n            if(\n                selectedNoteIdx!==-1 && \n                selectedNoteIdx>=(SHAREDMEX.currentSearchSlice)*SLICESIZE &&\n                selectedNoteIdx<=(SHAREDMEX.currentSearchSlice+1)*SLICESIZE+SLICESIZE-1\n            ){\n                if(dir==='left'){\n                    if(selectedNoteIdx!==0){\n                        const noteToLeft = dashboard.search[selectedNoteIdx-1]\n                        setTriggerRerender((prev) => !prev)\n                        selectNote(noteToLeft)\n                        SHAREDMEX.usingScrollKeys = true\n                        if(selectedNoteIdx===SHAREDMEX.currentSearchSlice*SLICESIZE){\n                            SHAREDMEX.setSearchSlice = -1\n                        }\n                    }\n                    else{\n                        document.getElementById('search-area').scrollLeft=0\n                    }\n                }\n                else if(dir==='right'){\n                    if(selectedNoteIdx!==dashboard.search.length-1){\n                        const noteToRight = dashboard.search[selectedNoteIdx+1]\n                        setTriggerRerender((prev) => !prev)\n                        selectNote(noteToRight)\n                        SHAREDMEX.usingScrollKeys = true\n                        if(selectedNoteIdx===(SHAREDMEX.currentSearchSlice+1)*SLICESIZE+SLICESIZE-1){\n                            SHAREDMEX.setSearchSlice = +1\n                        }\n                    }\n                    else{\n                        document.getElementById('search-area').scrollLeft=1000000\n                    }\n                }\n            }\n            setTimeout(()=>{controller.enabled = true}, controller.timer)\n        }\n    }\n\n    // Function to delete a note when pressing d\n    const safeDelete = () => {\n        if(dashboard.selectedNoteId){\n            if(window.confirm('Delete the note?')){\n                deleteNote(dashboard.selectedNoteId, true)\n            }\n        }\n    }\n\n    // Function to pin or unpin a note when pressing p, uses delayed update for efficiency\n    // otherwise it would have to refresh the dashboard immediately at each click which\n    // could be problematic if the user clicks very quickly\n    const pinNoteWithKey = () => {\n        const selectedNote = dashboard.notes.get(dashboard.selectedNoteId)\n        if(selectedNote){\n            const newDashboard = {...dashboard}\n            selectedNote.pinned = !selectedNote.pinned\n            packDashboard(newDashboard, true)\n            setDelayedNoteUpdate({note: selectedNote, delay: 1500, metaOrMedia: 'meta'})\n        }\n    }\n\n    // Function to change the color of a note with the number keys 1-8\n    const changeColorWithKey = (index) => {\n        const selectedNote = dashboard.notes.get(dashboard.selectedNoteId)\n        const sameNoteInSearch = dashboard.search.find(note => note.id===dashboard.selectedNoteId)\n        const sameNoteInWorkspace = dashboard.workspace.find(note => note.id===dashboard.selectedNoteId)\n        if(selectedNote){\n            selectedNote.color = pastelCols[index-1]\n            selectedNote.colorPreview = vividCols[index-1]\n            setDelayedNoteUpdate({note: selectedNote, delay: 1500, metaOrMedia: 'meta'})\n        }\n        if(sameNoteInSearch){\n            sameNoteInSearch.color = pastelCols[index-1]\n            sameNoteInSearch.colorPreview = vividCols[index-1]\n        }\n        if(sameNoteInWorkspace){\n            sameNoteInWorkspace.color = pastelCols[index-1]\n            sameNoteInWorkspace.colorPreview = vividCols[index-1]\n        }\n        setTriggerRerender((prev) => !prev)\n    }\n\n    // Wrapper functions with spacebar\n    const spacebarKeyAction = () => {\n        const selectedNote = dashboard.notes.get(dashboard.selectedNoteId)\n        if(selectedNote){\n            const newDashboard = {...dashboard}\n            manageWrapper(newDashboard, selectedNote, threadOrCollection, setThreadOrCollection, setNotesUpdating)\n            packDashboard(newDashboard)\n        }\n    }\n\n    // Function to add the selected note to the workspace\n    const workspaceAddKey = () => {\n        const targetId = dashboard.selectedNoteId\n        if(dashboard.notes.get(targetId)){\n            workspaceAdder(dashboard, threadOrCollection, targetId, packDashboard)\n        }\n    }\n\n    // Remove the selected note from the workspace\n    const workspaceRemKey = () => {\n        const newDashboard = {...dashboard}\n        const selectedNote = newDashboard.notes.get(newDashboard.selectedNoteId)\n        if(selectedNote){\n            var indexToRem = newDashboard.workspaceIds.findIndex(id => id===selectedNote.id)\n            if(indexToRem !== -1){\n                workspaceRemover(newDashboard, threadOrCollection, packDashboard, indexToRem)\n            }\n        }\n    }\n\n    // Function to save the workspace with ctrl+s\n    const saveWorkspaceKey = (e) => {\n        if (e.preventDefault) {\n            e.preventDefault()\n        } else {\n            // internet explorer\n            e.returnValue = false;\n        }\n        closeAndSave()\n    }\n\n    // Function to move a note all the way to the end or beginning of the search sequence\n    const moveToExtremityWithKey = (endOrBeginning) => {\n        moveToTheExtremity(endOrBeginning, true)\n        packDashboard({...dashboard}, true)\n    }\n\n    // function to find all the occurences of a note\n    const findOccurrencesKey = () => {\n        openOccurrences()\n        packDashboard({...dashboard}, false, true)\n    }\n\n    Mousetrap.bind('shift+left', () => currentPage==='notes' && !mergeMode && moveToExtremityWithKey(false))\n    Mousetrap.bind('shift+right', () => currentPage==='notes' && !mergeMode && moveToExtremityWithKey(true))\n    Mousetrap.bind('left', (e) => currentPage==='notes' && !mergeMode && selectInDir(e,'left'))\n    Mousetrap.bind('right', (e) => currentPage==='notes' && !mergeMode && selectInDir(e,'right'))\n    Mousetrap.bind('p', () => currentPage==='notes' && pinNoteWithKey())\n    Mousetrap.bind('enter', () => currentPage==='notes' && dashboard.selectedNoteId && !mergeMode && openEditor())\n    Mousetrap.bind('d', () => currentPage==='notes' && !mergeMode && safeDelete())\n    Mousetrap.bind('a', () => currentPage==='notes' && !mergeMode && addNote())\n    Mousetrap.bind('down', () => currentPage==='notes' && !mergeMode && workspaceAddKey())\n    Mousetrap.bind('up', () => currentPage==='notes' && !mergeMode && workspaceRemKey())\n    Mousetrap.bind('1', () => currentPage==='notes' && changeColorWithKey(1))\n    Mousetrap.bind('2', () => currentPage==='notes' && changeColorWithKey(2))\n    Mousetrap.bind('3', () => currentPage==='notes' && changeColorWithKey(3))\n    Mousetrap.bind('4', () => currentPage==='notes' && changeColorWithKey(4))\n    Mousetrap.bind('5', () => currentPage==='notes' && changeColorWithKey(5))\n    Mousetrap.bind('6', () => currentPage==='notes' && changeColorWithKey(6))\n    Mousetrap.bind('7', () => currentPage==='notes' && changeColorWithKey(7))\n    Mousetrap.bind('8', () => currentPage==='notes' && changeColorWithKey(8))\n    Mousetrap.bind('space', () => currentPage==='notes' && !mergeMode && spacebarKeyAction())\n    Mousetrap.unbind(['ctrl+s', 'meta+s'])\n    Mousetrap.bind(['ctrl+s', 'meta+s'], (e) => currentPage==='notes' && !mergeMode && saveWorkspaceKey(e))\n    Mousetrap.bind(['ctrl+/', 'meta+/'], () => currentPage==='notes' && !mergeMode && findOccurrencesKey())\n\n    return null\n}\n\nexport default KeyboardBindings\n","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nDashboardTree component\nContains the main connections between the ui elements of the dashboard\nand manages the page switch. Also defines all the dependencies\n*/\n\nimport KeyboardBindings from \"./KeyboardBindings\"\nimport { Suspense } from \"react\"\nimport { suspenseLoader } from \"../helpers/DashboardUtils\"\nimport React from \"react\"\nimport { ToastContainer } from \"react-toastify\"\n\n// Define the lazy loading\nconst NoteEditor = React.lazy(() => import(\"./Editor\"))\nconst Settings = React.lazy(() => import(\"./Settings\"))\nconst NotesPage = React.lazy(() => import('./NotesPage'))\n\n\nconst DashboardTree = ({\n    dashboard,\n    selectNote,\n    deleteNote,\n    addNote,\n    packDashboard,\n    setDelayedNoteUpdate,\n    triggerRerender,\n    setTriggerRerender,\n    threadOrCollection,\n    setThreadOrCollection,\n    notesUpdating,\n    setNotesUpdating,\n    currentPage,\n    setCurrentPage,\n    openEditor,\n    moveToTheExtremity,\n    closeAndSave,\n    mergeMode, \n    setMergeMode,\n    darkMode,\n    setDarkMode,\n    GAPIloaded,\n    currentUser,\n    closeCollection,\n    rootsOrBranches,\n    setRootsOrBranches,\n    searchProps, \n    setSearchProps,\n    threadOrCollectionManage,\n    synchNotes,\n    updateNote,\n    exportThread,\n    openOccurrences,\n    signInFunction,\n    signOutFunction,\n    threadCollectionSwap,\n    handleOnDragEnd\n}) => {\n\nreturn (\n        <div>\n            <KeyboardBindings\n                dashboard={dashboard}\n                selectNote={selectNote}\n                deleteNote={deleteNote}\n                addNote={addNote}\n                packDashboard={packDashboard}\n                setDelayedNoteUpdate={setDelayedNoteUpdate}\n                setTriggerRerender={setTriggerRerender}\n                threadOrCollection={threadOrCollection}\n                setThreadOrCollection={setThreadOrCollection}\n                setNotesUpdating={setNotesUpdating}\n                currentPage={currentPage}\n                openEditor={openEditor}\n                closeAndSave={closeAndSave}\n                moveToTheExtremity={moveToTheExtremity}\n                mergeMode={mergeMode}\n                openOccurrences={openOccurrences}\n            />\n\n            {currentPage==='notes' && \n                <Suspense fallback={suspenseLoader(darkMode)}>\n                    <NotesPage \n                        darkMode={darkMode}\n                        dashboard={dashboard}\n                        handleOnDragEnd={handleOnDragEnd}\n                        GAPIloaded={GAPIloaded}\n                        currentUser={currentUser}\n                        setCurrentPage={setCurrentPage}\n                        notesUpdating={notesUpdating}\n                        setDarkMode={setDarkMode}\n                        closeCollection={closeCollection}\n                        addNote={addNote}\n                        selectNote={selectNote}\n                        mergeMode={mergeMode}\n                        setMergeMode={setMergeMode}\n                        openEditor={openEditor}\n                        rootsOrBranches={rootsOrBranches}\n                        closeAndSave={closeAndSave}\n                        threadOrCollection={threadOrCollection}\n                        threadOrCollectionManage={threadOrCollectionManage}\n                        setRootsOrBranches={setRootsOrBranches}\n                        searchProps={searchProps}\n                        setSearchProps={setSearchProps}\n                        synchNotes={synchNotes}\n                        triggerRerender={triggerRerender}\n                    />\n                </Suspense>\n                \n            }\n\n            {currentPage==='editor' && dashboard.selectedNoteId && \n\n                <Suspense fallback={suspenseLoader(darkMode)}>\n                    <NoteEditor \n                        setCurrentPage={setCurrentPage} \n                        dashboard={dashboard} \n                        updateNote={updateNote}\n                        deleteNote={deleteNote}\n                        darkMode={darkMode}\n                        exportThread={exportThread}\n                        threadCollectionSwap={threadCollectionSwap}\n                        moveToTheExtremity={moveToTheExtremity}\n                        openOccurrences={openOccurrences}\n                        packDashboard={packDashboard}\n                        setDelayedNoteUpdate={setDelayedNoteUpdate}\n                    />\n                </Suspense>\n            }\n\n            <iframe title='printer' id=\"ifmcontentstoprint\" style={\n                {\n                    height: '0px', \n                    width: '0px', \n                    position: 'absolute', \n                    border: '0'\n                    }\n                }>\n            </iframe>\n\n            {currentPage==='settings' && \n\n                <Suspense fallback={suspenseLoader(darkMode)}>\n                    <Settings \n                        darkMode={darkMode}\n                        setCurrentPage={setCurrentPage} \n                        signInFunction={signInFunction} \n                        signOutFunction={signOutFunction} \n                        loadedUser={currentUser} \n                        GAPIloaded={GAPIloaded}/>\n                </Suspense>\n            }\n\n            <ToastContainer/>\n        </div>\n\t)\n}\n\nexport default DashboardTree","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nDashboardOperations component\nContains the main operations on notes such as creation, update, removal, etc\nProvides links between the ui elements and bigger functions contained in the helpers\n*/\n\nimport React from 'react'\nimport { addElementAt, getNewNote, moveNoteInsideGraph} from \"../helpers/DashboardUtils\";\nimport { exportThreadGivenProps} from '../helpers/BackupHelper';\nimport { backupNote } from '../helpers/RequestsMakers';\nimport { currOrPrevNoteDecice } from '../helpers/DashboardUtils';\nimport { dragManager } from '../helpers/DragManager';\nimport { closeAndSaveWorkspace, collectionToThread, \n    linkThreadNotes, noteSelector, threadToCollection } from '../helpers/NotesManupulation';\nimport { noteDeleter } from '../helpers/NoteDeleter';\nimport { noteMerger } from '../helpers/NoteMerger';\nimport { cleanWorkspace } from '../helpers/Messages';\nimport DashboardTree from './DashboardTree';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { db, SHAREDMEX } from './Dashboard';\n\nconst notify = () => toast(cleanWorkspace);\n\nconst DashboardOperations = ({\n    dashboard,\n    notesUpdating,\n    setNotesUpdating,\n    backup,\n    packDashboard,\n    currentPage,\n    setCurrentPage,\n    mergeMode,\n    setMergeMode,\n    threadOrCollection,\n    setThreadOrCollection,\n    rootsOrBranches,\n    setRootsOrBranches,\n    triggerRerender,\n    setTriggerRerender,\n    darkMode,\n    setDarkMode,\n    searchProps,\n    setSearchProps,\n    GAPIloaded,\n    currentUser,\n    synchNotes,\n    signInFunction,\n    signOutFunction,\n    setDelayedNoteUpdate\n\n}) => {\n\n    // Add a new note to the notes hashmap and put it first in the Search Order\n    const addNote = async () => {\n\n        const newDashboard = {...dashboard}\n        const newNote = getNewNote()\n\n        // Adding the new note to the HashMap and selecting it\n        newDashboard.notes.set(newNote.id, newNote)\n        newDashboard.prevSelectedNoteId = newDashboard.selectedNoteId\n        newDashboard.selectedNoteId = newNote.id\n\n        const oldFirstNote = newDashboard.notes.get(newDashboard.firstNoteId)\n        // Making it first note and linking it\n        if(oldFirstNote){\n            newNote.rightLink = newDashboard.firstNoteId\n            oldFirstNote.leftLink = newNote.id\n        }\n        newDashboard.firstNoteId = newNote.id\n\n        // If the note is added when a collection is open, add it to that collection \n        // And backup the meta of the note that contains the collection\n        if(newDashboard.openedCollectionId){\n            const collectionNote = newDashboard.notes.get(newDashboard.openedCollectionId)\n            collectionNote.collection = addElementAt(collectionNote.collection, 0, newNote.id)\n            backup(collectionNote, 'meta')\n        }\n\n        // Backup the new note and the notes order\n        db.notes.put(newNote)\n        backup(newNote, 'meta')\n        if(oldFirstNote){\n            backup(oldFirstNote, 'meta')\n        }\n\n        // Update the dashboard and open the editor component\n        packDashboard(newDashboard)\n        setCurrentPage('editor')\n        SHAREDMEX.editorModeSelection = 'prev'\n    }\n\n    // Update a note after the editor is closed\n    const updateNote = async (newSelectedNote) => {\n\n        // If the action selected from the editor was to get all the occurences,\n        // open them in the workspace\n        const newDashboard = {...dashboard}\n\n        // Backup and update the dashboard such that it contains the updated note\n        newDashboard.notes.set(newSelectedNote.id, newSelectedNote)\n\n        newDashboard.selectedNoteId = newSelectedNote.id\n\n        backup(newSelectedNote, 'both')\n        currOrPrevNoteDecice(newDashboard)\n        packDashboard(newDashboard)\n    }\n\n    // Delete a note by calling the note deleter function\n    const deleteNote = async (removingId, reselect, newDashboard) => {\n\n        // If no newDashboard is given, use the one from the state\n        // used because sometimes many operations have to happen on the same\n        // dashboard before the UI update is called, improves efficiency\n        if(!newDashboard){\n            newDashboard = {...dashboard}\n        }\n\n        noteDeleter(\n            removingId, \n            reselect, \n            newDashboard, \n            mergeMode, \n            setMergeMode,\n            setNotesUpdating,\n            packDashboard\n        )\n\n        // If the mergeMode was true, set it to false\n        // This happens when the merging procedure is called\n        if(mergeMode){\n            setMergeMode(false)\n        }\n    }\n\n    // Function that manges all the dragging gestures between notes of the UI\n    const handleOnDragEnd = async (result) => {\n        dragManager(\n            dashboard, \n            mergeMode, \n            threadOrCollection, \n            setThreadOrCollection,\n            rootsOrBranches, \n            setNotesUpdating,\n            packDashboard,\n            setSearchProps,\n            result\n        )\n    }\n\n    // Function that changes the mode of the dashboard\n    // but it has to be unwrapped otherwise show an alert\n    // if its unwrapped it switched by converting the workspace\n    // to get rid of repeated notes for collections\n    const threadOrCollectionManage = async () => {\n        if(dashboard.openedWorkspaceId){\n            notify()\n        }\n        else{\n            if(threadOrCollection){\n                const newDashboard = {...dashboard}\n                newDashboard.workspaceIds = [...new Set([...newDashboard.workspaceIds])]\n                packDashboard(newDashboard)\n                setThreadOrCollection(false)\n                SHAREDMEX.toasts && \n                    toast('The Collection Mode is on, no links will be stored when you create groups of notes')\n            }\n            else{\n                setThreadOrCollection(true)\n                SHAREDMEX.toasts && \n                    toast('The Thread Mode is on, links between consecutive notes will be stored')\n            }\n        }\n    }\n\n    // Function that calls the noteSelector\n    // called when a note is selected (click on)\n    const selectNote = async (noteToSelect) => {\n        noteSelector(\n            noteToSelect, \n            mergeMode, \n            setMergeMode, \n            dashboard, \n            packDashboard, \n            mergeNotes\n        )\n    }   \n\n    // Function that calls the noteMerger when a note is selected in mergeMode on\n    const mergeNotes = async (noteA, noteB) => {\n        noteMerger(\n            noteA, \n            noteB, \n            setMergeMode, \n            dashboard, \n            setNotesUpdating, \n            threadOrCollection, \n            packDashboard, \n            deleteNote\n        )\n    }\n\n    // Function that closes the workspace and eventually saves it inside a note\n    // Takes a leaveOpen flag that does not update the dashboard if true\n    // used to perform multiple operations on the same dashboard before UI can update\n    const closeAndSave = async (leaveOpen, newDashboard) => {\n        if(!newDashboard){\n            newDashboard={...dashboard}\n        }\n\n        closeAndSaveWorkspace(\n            newDashboard, \n            setNotesUpdating, \n            threadOrCollection\n        )\n\n        if(!leaveOpen){\n            packDashboard(newDashboard)\n        }\n    }\n\n    // Function that opens the occurences of a note among all the other notes\n    const openOccurrences = () => {\n        \n\n        closeAndSave(true, dashboard)\n\n        // applies a filter that checks if the current note is either in a thread or \n        // collection of any other note\n        dashboard.workspaceIds = [...dashboard.notes.keys()].filter(\n            (id) => \n                dashboard.notes.get(id).thread.includes(dashboard.selectedNoteId) ||\n                dashboard.notes.get(id).collection.includes(dashboard.selectedNoteId)\n        )\n\n        // Set workspace mode to false (collection mode)\n        setThreadOrCollection(false)\n    }\n\n    // Utils function that exports the thread as PDF or to print\n    const exportThread = () => {\n        exportThreadGivenProps(dashboard)\n    }\n\n    // Utils function that opens the editor by first retrieving the \n    // note from the local indexedDB because the text is not stored \n    // on the RAM for efficiency \n    const openEditor = () => {\n        db.notes.get(dashboard.selectedNoteId).then((dbNote) => {\n            dashboard.notes.set(dashboard.selectedNoteId, dbNote)\n            setCurrentPage('editor')\n        })\n    }\n\n    // Function that closes the opened collection of the Search area\n    const closeCollection = () => {\n        const newDashboard = {...dashboard}\n        newDashboard.openedCollectionId = null\n        SHAREDMEX.resetSearchScroll = true\n        packDashboard(newDashboard, true)\n    }\n\n    // swap between thread or collection\n    const threadCollectionSwap = (threadCollectionFlag) => {\n\n        const newDashboard = {...dashboard}\n        const selectedNote = newDashboard.notes.get(newDashboard.selectedNoteId)\n        if(threadCollectionFlag){\n            threadToCollection(selectedNote)\n        }\n        else{\n            collectionToThread(selectedNote)\n            linkThreadNotes(newDashboard, selectedNote.thread, setNotesUpdating)\n            if(newDashboard.openedCollectionId===newDashboard.selectedNoteId){\n                newDashboard.openedCollectionId=null\n            }\n        }\n        if(newDashboard.openedWorkspaceId===newDashboard.selectedNoteId){\n            setThreadOrCollection(!threadOrCollection)\n        }\n        packDashboard(newDashboard)\n        backup(selectedNote, 'meta')\n        setCurrentPage('notes')\n    }\n\n    // Function to move a note all the way to the end of the search\n    const moveToTheExtremity = (endOrBeginning, doBackup) => {\n\n        var targetNote = null\n        if(endOrBeginning){\n            // find the last note\n            for(const [, note] of dashboard.notes){\n                if(!note.rightLink){\n                    targetNote = note\n                }\n            }\n        }\n        else{\n            targetNote = dashboard.notes.get(dashboard.firstNoteId)\n        }\n\n        if(!targetNote || targetNote.id===dashboard.selectedNoteId){\n            return\n        }\n\n        const selectedNote = dashboard.notes.get(dashboard.selectedNoteId)\n        if(!selectedNote || selectedNote.pinned){\n            return\n        }\n\n        moveNoteInsideGraph(\n            dashboard, \n            dashboard.selectedNoteId, \n            targetNote.id, \n            !endOrBeginning, \n            (note) => backupNote(note, 'meta', setNotesUpdating),\n            !doBackup\n        )\n    }\n    return (\n        <DashboardTree \n            dashboard={dashboard}\n            selectNote={selectNote}\n            deleteNote={deleteNote}\n            addNote={addNote}\n            packDashboard={packDashboard}\n            setDelayedNoteUpdate={setDelayedNoteUpdate}\n            triggerRerender={triggerRerender}\n            setTriggerRerender={setTriggerRerender}\n            threadOrCollection={threadOrCollection}\n            setThreadOrCollection={setThreadOrCollection}\n            notesUpdating={notesUpdating}\n            setNotesUpdating={setNotesUpdating}\n            currentPage={currentPage}\n            setCurrentPage={setCurrentPage}\n            openEditor={openEditor}\n            moveToTheExtremity={moveToTheExtremity}\n            closeAndSave={closeAndSave}\n            mergeMode={mergeMode}\n            setMergeMode={setMergeMode}\n            darkMode={darkMode}\n            setDarkMode={setDarkMode}\n            GAPIloaded={GAPIloaded}\n            currentUser={currentUser}\n            closeCollection={closeCollection}\n            rootsOrBranches={rootsOrBranches}\n            setRootsOrBranches={setRootsOrBranches}\n            searchProps={searchProps}\n            setSearchProps={setSearchProps}\n            threadOrCollectionManage={threadOrCollectionManage}\n            synchNotes={synchNotes}\n            updateNote={updateNote}\n            exportThread={exportThread}\n            openOccurrences={openOccurrences}\n            signInFunction={signInFunction}\n            signOutFunction={signOutFunction}\n            threadCollectionSwap={threadCollectionSwap}\n            handleOnDragEnd={handleOnDragEnd}\n        />\n    )\n}\n\nexport default DashboardOperations","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nDashboard component\nImplements the dashboard, which is the main component of the project\n*/\n\nimport { useState, useEffect} from 'react';\nimport React from 'react'\nimport Dexie from 'dexie'\nimport { createThumbnail, restoreDashboardState} from \"../helpers/DashboardUtils\";\nimport { checkDriveFolder} from '../helpers/BackupHelper';\nimport { getAllNotes } from '../helpers/DownloadHelper';\nimport { backupNote } from '../helpers/RequestsMakers';\nimport { getSearchFromProps, getLinksFromProps, getWorkspace, checkLinksSanity } from '../helpers/DashboardPacker';\n\n//importing and registering the formula compiler\nimport \"katex/dist/katex.min.css\";\nimport katex from \"katex\";\nimport DashboardOperations from './DashboardOperations';\n\nwindow.katex = katex\n\n// Define the limits of the app to avoid extreme usages and crashes\nexport const LINKSLIMIT = 150\nexport const WORKSPACELIMIT = 300\nexport const TEXTLIMIT = 1048576\nexport const PREVIEWLIMIT = 200\nexport const SLICESIZE = 12\n\n// Define some shared variables that will be accessible from all components\nexport const driveVariables = {authorisation: false, folderId: ''}\n\nexport const initSearchProps = {\n    searchText:'', \n    threadFilter: false, \n    collectionFilter: false,\n    colorFilter: '#ededed',\n    imgFilter: false,\n    goClean: false,\n    areSlicesScrolled: false\n}\n\n// Initialise the local indexedDB that will contain the notes\nexport const db = new Dexie('notes-db')\ndb.version(1).stores({\n    notes: \n        'id, text, preview, branches, roots, thread, collection' + \n        ', pinned, color, colorPreview, attachedImg, version, leftLink, rightLink'\n})\n\n// object containing several useful variables that have to be shared between classes\n// editorModeSelection tells whether the editor should select the current selected note or the\n// previously selected note once it is closed, based on where the note was opened from in the dashboard\n// usingScrollKeys tells whether the user is scrolling with the keyboard\n// currentSearchSlice tells at what slice of note the search area is currently at\n// closingEditor tells you whether the rerender is caused by the editor closing\n// resetSearchScroll tells you whether to reset the scroll of the search after cleaning the search\n// toasts tells you whether the toast setting is on\n// setSearchSlice tells you whether the change in slice is due to resetting the search or scrolling through pages\n// in particular it tells you whether you are scrolling left or right with the keys\nexport const SHAREDMEX = {\n    editorModeSelection: 'curr',\n    usingScrollKeys: false,\n    currentSearchSlice: window.localStorage.getItem('current-slice-search-area'),\n    closingEditor: false,\n    resetSearchScroll: false,\n    toasts: !(window.localStorage.getItem('dashboard-toasts')==='false'),\n    setSearchSlice: 0\n}\n\n// Dashboard component, \n// takes the Google sign in and out functions\n// a GAPIloaded flag to know when the GoogleAPI script has been loaded\n// and the current user to make sure that the user has logged in\n// the username di per se is not used\nconst Dashboard = ({\n    signInFunction, \n    signOutFunction, \n    GAPIloaded, \n    currentUser\n}) => {\n\n    // Main state of the dashboard containing all the correlated variables\n    // they are put together to minimise the number of renderings and \n    // avoid clashes due to asynchronous state updating\n\tconst [dashboard, setDashboard] = useState(\n        {\n            notes: new Map(), \n            firstNoteId: '',\n            workspaceIds: [],\n            selectedNoteId: null,\n            prevSelectedNoteId: null,\n            openedCollectionId: null,\n            openedWorkspaceId: null,\n            search: [],\n            links: [],\n            workspace: [],\n            checkedAgainstDrive: true\n        }\n    );\n\n    // State that defines the search, in particular\n    // the text in the search bar and the state of the two buttons on it\n    const [searchProps, setSearchProps] = useState({...initSearchProps})\n    // State that defines whether the user wants to see Roots or Branches\n    const [rootsOrBranches, setRootsOrBranches] = useState(false);\n    // State that defines the workspace mode currently on\n    const [threadOrCollection, setThreadOrCollection] = useState(false);\n    // State that defines whereas the mergemode is on\n    const [mergeMode, setMergeMode] = useState(false);\n    // State that defines the page of the dashboard, whether notes, \n    // editor or settings\n    const [currentPage, setCurrentPage] = useState('notes');\n    // State that defines the current ID of the thinkythreads folder on drive\n    const [driveFolderId, setDriveFolderId] = useState(null);\n    // Darkmode flag\n    const [darkMode, setDarkMode] = useState(false);\n    // State tha keeps the count of how many notes are updating at the moment\n    const [notesUpdating, setNotesUpdating] = useState(0)\n    // State tha keeps the count of how many notes are updating at the moment\n    const [dashboardReady, setDashboardReady] = useState(false)\n    // Note to update but with a delay, used for several functions\n    const [delayedNoteUpdate, setDelayedNoteUpdate] = useState({\n        note: null, \n        delay: 0, \n        metaOrMedia: '',\n        callbackFunction: null,\n        beforeFunction: null\n    })\n    // mock state used to trigger the rerendering of specific notes only inside the list of notes\n    // the alternative would be to rerender eerything but its quite expensive\n    const [triggerRerender, setTriggerRerender] = useState(true)\n\n    // Effect called only when the component is first loaded\n    // Retrieves the notes from the db\n    useEffect(() => {\n        const newDashboard = {...dashboard}\n        db.notes.toArray().then(function(resp){\n            resp.forEach((note) => {\n                newDashboard.notes.set(note.id, note)\n                createThumbnail(note)\n            })\n\n            // If the note doesn't have a left link, it's because it's the first of the sequence\n            for(const [, note] of newDashboard.notes){\n                if(!note.leftLink){\n                    newDashboard.firstNoteId = note.id\n                }\n            }\n            packDashboard(newDashboard)\n        })\n\n        // retrieve and set the dark mode as it was set by the user last\n        const darkModeStored = window.localStorage.getItem('dark-mode')\n        if(darkModeStored){\n            setDarkMode(darkModeStored==='true')\n        }\n\n    // eslint-disable-next-line\n    },[])\n\n    // Effect that is called every time the rootsOrBranches switch changes\n    // Refreshed the Links area of the dashboard\n    useEffect(() => {\n        const newDashboard = {...dashboard}\n        packDashboard(newDashboard, false, false, true)\n    // eslint-disable-next-line\n\t}, [rootsOrBranches])\n\n    // Effect that is called every time the searchProps change\n    // Refreshed the Search area of the dashboard\n    useEffect(() => {\n        const delayDebounceFn = setTimeout(() => {\n            const newDashboard = {...dashboard}\n            packDashboard(newDashboard, true)\n          }, 200)\n      \n          return () => clearTimeout(delayDebounceFn)\n    // eslint-disable-next-line\n\t}, [searchProps])\n\n    // Effect that controls the delayed update of a note\n    // takes the note, a function to run before calling the backup, \n    // and a callback to call afterwards\n    useEffect(() => {\n        if(delayedNoteUpdate.note){\n            const delayUpdateNote = setTimeout(() => {\n                if(delayedNoteUpdate.beforeFunction){\n                    delayedNoteUpdate.beforeFunction()\n                }\n                backup(delayedNoteUpdate.note, delayedNoteUpdate.metaOrMedia)\n                if(delayedNoteUpdate.callbackFunction){\n                    delayedNoteUpdate.callbackFunction()\n                }\n            }, delayedNoteUpdate.delay)\n            return () => clearTimeout(delayUpdateNote)\n        }\n    // eslint-disable-next-line\n\t}, [delayedNoteUpdate])\n\n    // Effect that kicks in when either GAPIloaded\n    // or currentUser change\n    // Accesses the user's Drive and checks for the existence of\n    // a thinkythreads folder\n    useEffect(() => {\n        driveVariables.authorisation = false\n        if(GAPIloaded && currentUser){\n            driveVariables.authorisation = true\n            checkDriveFolder(setDriveFolderId);\n        }\n    // eslint-disable-next-line\n    },[GAPIloaded, currentUser])\n\n\n    // Once the folder is found or created, this effect retrieves all notes from drive\n    useEffect(() => {\n        driveVariables.folderId = driveFolderId\n        if(GAPIloaded && currentUser && driveFolderId){\n            synchNotes()\n        }\n    // eslint-disable-next-line\n    },[driveFolderId, GAPIloaded, currentUser])\n\n    useEffect(() => {\n        if(!dashboard.selectedNoteId && currentPage==='editor'){\n            setCurrentPage('notes')\n        }\n    // eslint-disable-next-line\n    },[dashboard])\n\n    useEffect(() => {\n        if(dashboardReady){\n            const newDashboard = {...dashboardReady}\n            restoreDashboardState(newDashboard, dashboard)\n            packDashboard(newDashboard)\n            setDashboardReady(false)\n        }\n    // eslint-disable-next-line\n    }, [dashboardReady, dashboard])\n\n    // Utils function to synchronise all the notes with GDRIVE\n    const synchNotes = (newDashboard) => {\n        if(!newDashboard){\n            newDashboard = {...dashboard}\n        }\n        if(newDashboard.checkedAgainstDrive){\n            console.log('synching')\n            newDashboard.checkedAgainstDrive = false\n            getAllNotes(\n                newDashboard, \n                setNotesUpdating, \n                setDashboardReady\n            )\n        }\n    }\n\n    // Utils function used to backup a note\n    // takes the note itself and a metaOrMedia\n    // flag that controls whether there should be a partial or full backup\n    // eg: links, colour, pinned, etc (meta) or/and main body text (media)\n    const backup = async (note, metaOrMedia) => {\n        backupNote(note, metaOrMedia, setNotesUpdating)\n    }\n\n    // Utils function used to refresh the whole dashboard and not just individual areas\n    const packDashboard = (newDashboard, sFlag, wFlag, lFlag, disableCheck) => {\n\n        if(!disableCheck){\n            checkLinksSanity(newDashboard, backup)\n        }\n\n        // Flags that control what parts of the dashboard should be recomputed\n        const allFalse = !sFlag && !wFlag && !lFlag\n        if(allFalse || sFlag){ \n            getSearchFromProps(newDashboard, searchProps)\n        }\n        if(allFalse || wFlag){\n            getWorkspace(newDashboard)\n        }\n        if(allFalse || lFlag){\n            getLinksFromProps(newDashboard, rootsOrBranches, setNotesUpdating)\n        }\n        setDashboard(newDashboard)\n    }\n\n    return(\n        <DashboardOperations \n            dashboard={dashboard}\n            notesUpdating={notesUpdating}\n            setNotesUpdating={setNotesUpdating}\n            backup={backup}\n            packDashboard={packDashboard}\n            currentPage={currentPage}\n            setCurrentPage={setCurrentPage}\n            mergeMode={mergeMode}\n            setMergeMode={setMergeMode}\n            threadOrCollection={threadOrCollection}\n            setThreadOrCollection={setThreadOrCollection}\n            rootsOrBranches={rootsOrBranches}\n            setRootsOrBranches={setRootsOrBranches}\n            triggerRerender={triggerRerender}\n            setTriggerRerender={setTriggerRerender}\n            darkMode={darkMode}\n            setDarkMode={setDarkMode}\n            searchProps={searchProps}\n            setSearchProps={setSearchProps}\n            GAPIloaded={GAPIloaded}\n            currentUser={currentUser}\n            synchNotes={synchNotes}\n            signInFunction={signInFunction}\n            signOutFunction={signOutFunction}\n            setDelayedNoteUpdate={setDelayedNoteUpdate}\n        />\n    )\n}\n\nexport default Dashboard;\n","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nColorPicker component\nImplements the color picker element of the \nrich text editor. Used to select the color \nfor the note from a selection of pastel colors\n*/\n\nimport { GithubPicker } from \"react-color\"\nimport { BsDropletHalf } from \"react-icons/bs\"\nimport Popup from \"reactjs-popup\"\n\n// Arrays containing the colors allowed for the notes, both for light and dark mode\nexport const vividCols = ['#b80000', '#db3e00', '#fccb00', '#008b02', '#006b76', '#1273de', '#5300eb', '#ededed']\nexport const pastelCols = ['#EB9694', '#FAD0C3', '#FEF3BD', '#C1E1C5', '#BEDADC', '#C4DEF6', '#d4c4fb', '#ffffff']\n\n// Utils function needed to set the color through a switch\n// Takes the chosen color, the current selected note and \n// A function to set the state of the editor\nconst setColor = (\n    color, \n    selectedNote, \n    setBackColor, \n    setHasChanged, \n    setSearchProps,\n) => {\n\n    // Only used if the picker is in the dashboard\n    // Set the color used as a filter for the notes of the search\n    if(setSearchProps){\n        setSearchProps(\n            (searchProps) => {\n                const newSearchProps = {...searchProps}\n                newSearchProps.colorFilter = color.hex\n                return newSearchProps\n            }\n        )\n        return \n    }\n\n    // if the color was changed, tell the editor\n    setHasChanged(true)\n    selectedNote.colorPreview = color.hex;\n\n    // switch case defining the corresponding vivid/pastel colors\n    switch(color.hex) {\n        case vividCols[0]:\n            selectedNote.color = pastelCols[0]\n            break;\n        case vividCols[1]:\n            selectedNote.color = pastelCols[1]\n            break;\n        case vividCols[2]:\n            selectedNote.color = pastelCols[2]\n            break;\n        case vividCols[3]:\n            selectedNote.color = pastelCols[3]\n            break;\n        case vividCols[4]:\n            selectedNote.color = pastelCols[4]\n            break;\n        case vividCols[5]:\n            selectedNote.color = pastelCols[5]\n            break;\n        case vividCols[6]:\n            selectedNote.color = pastelCols[6]\n            break;\n        case vividCols[7]:\n            selectedNote.color = pastelCols[7]\n            break;\n        default:\n            break\n    }\n    setBackColor({color: selectedNote.color, colorPreview: selectedNote.colorPreview})\n}\n\n// Color Picker component\n// Takes the current selected note and \n//a function to set the color state of the editor\nconst ColorPicker = ({\n    selectedNote,\n    setBackColor,\n    setHasChanged,\n    searchProps,\n    setSearchProps,\n    searchCleanerCheck\n}) => {\n\n    return (\n        <Popup\n            trigger={\n                <div \n                className='tools-btn' \n                style={{color : searchProps ? searchProps.colorFilter : undefined, fontSize: '19px'}\n                }>\n                    {searchProps ? '⬤' :\n                        <BsDropletHalf\n                            size='1.6em'\n                        />\n                    }\n                </div>\n            } \n            nested\n            modal\n            position='right'\n        >\n            <div className='picker'>\n                <GithubPicker \n                    onChange={(color)=> \n                        setColor(\n                            color, \n                            selectedNote, \n                            setBackColor, \n                            setHasChanged, \n                            setSearchProps, \n                            searchCleanerCheck\n                        )\n                    }\n                    colors={['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#5300EB', '#EDEDED']}\n                    triangle='hide'\n                />\n            </div>\n        </Popup>\n    )\n}\nexport default ColorPicker","import React, { Component } from 'react';\nimport Dashboard from \"./components/Dashboard\";\nrequire('dotenv').config()\n\nvar SCOPE = 'https://www.googleapis.com/auth/drive.file';\nvar discoveryUrl = 'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest';\n\nexport default class App extends Component {\n\n  state = {\n    googleAuth: '',\n    currentUser: localStorage.getItem('currentUser'),\n    loaded: false,\n    driveFolderId:'',\n    onlineState: window.navigator.onLine\n  }\n\n  componentDidMount(){\n   this.initScript()\n  }\n\n  initScript = async () => {\n    // Load authentication script and get Drive API ready\n    var viewport = document.querySelector(\"meta[name=viewport]\");\n    viewport.setAttribute(\n      \"content\", \n      viewport.content + \n      \", height=\" + window.innerHeight + \n      ', user-scalable=no'\n    )\n\n    window.addEventListener('online', () => this.setState({onlineState: true}));\n    window.addEventListener('offline', () => this.setState({onlineState: false}));\n    if(this.state.onlineState){\n      this.loadGAPI()\n    }\n  }\n\n  loadGAPI = async () => {\n    var script = document.createElement('script');\n    script.onload=this.handleClientLoad;\n    script.src=\"https://apis.google.com/js/api.js\";\n    document.body.appendChild(script);\n    console.log('loadingGAPI')\n  }\n\n  componentDidUpdate(){\n    if(this.state.onlineState && !this.state.loaded){\n      this.loadGAPI()\n    }\n  }\n\n  // access is restricted\n  initClient = async () => {\n    try{\n      window.gapi.client.init({\n          'apiKey': process.env.REACT_APP_API_KEY,\n          'clientId': process.env.REACT_APP_CLIENT_ID,\n          'scope': SCOPE,\n          'discoveryDocs': [discoveryUrl]\n        }).then(() => {\n          this.setState({\n            googleAuth: window.gapi.auth2.getAuthInstance(),\n            loaded: true\n          })\n          this.state.googleAuth.isSignedIn.listen(this.updateSigninStatus);  \n          this.state.googleAuth.then(this.setSigninStatus());\n      });\n    }catch(e){\n      console.log(e);\n    }\n\n    // Add event listeners only after script is loaded\n  }\n\n  signInFunction = () => {\n    this.state.googleAuth.signIn()\n  }\n\n  signOutFunction = () => {\n    this.state.googleAuth.signOut()\n  }\n\n  updateSigninStatus = () => {\n    this.setSigninStatus();\n  }\n\n  setSigninStatus = () => {\n    var user = this.state.googleAuth.currentUser.get();\n    if (!user.isSignedIn()){\n      localStorage.setItem('currentUser', null);\n    }\n    else{\n      var isAuthorized = user.hasGrantedScopes(SCOPE);\n      if(isAuthorized){\n        localStorage.setItem('currentUser', user.getBasicProfile().getName());\n      } \n    }\n    this.setState({currentUser : localStorage.getItem('currentUser')});\n  }\n\n  handleClientLoad=()=>{\n    window.gapi.load('client:auth2', this.initClient);\n  }\n\n  render() {\n\n    console.log((localStorage.getItem('currentUser')));\n\n    const currentUser = this.state.currentUser!==null && this.state.currentUser!=='null'\n    return <Dashboard \n      signInFunction={this.signInFunction} \n      signOutFunction={this.signOutFunction} \n      GAPIloaded={this.state.loaded && this.state.onlineState} \n      currentUser={currentUser}\n      />\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nDashboardUtils function\nUtils functions to perform small operations\n*/\n\nimport { nanoid } from \"nanoid\";\nimport { db, PREVIEWLIMIT } from \"../components/Dashboard\";\nimport Loader from 'react-loader-spinner';\nimport React from 'react'\nimport { SHAREDMEX } from \"../components/Dashboard\";\n\nconst truncate = require('truncate-html')\n\n// Adds element at a certain position\nexport function addElementAt (sequence, position, element) {\n    return [...sequence.slice(0, position), element, ...sequence.slice(position)]\n}\n\n// Removes the element at a given position\nexport function removeElementAt(sequence, position) {\n    return [...sequence.slice(0, position), ...sequence.slice(position+1)];\n}\n\n// Moves a note within an area\nexport function moveNoteInsideArea(area, originalIndex, targetIndex) {\n    var newArea = removeElementAt(area, originalIndex)\n    const note = area[originalIndex];\n    newArea = [...newArea.slice(0, targetIndex), note, ...newArea.slice(targetIndex)]\n    return newArea;\n}\n\n// function to move notes inside the graph\nexport function moveNoteInsideGraph(newDashboard, sourceNoteId, targetNoteId, dir, backupMeta, blockUpdate){\n    const sourceNote = newDashboard.notes.get(sourceNoteId)\n    const targetNote = newDashboard.notes.get(targetNoteId)\n    detachFromPosition(newDashboard, sourceNote, backupMeta)\n    attachToPosition(newDashboard, sourceNote, targetNote, dir, backupMeta, blockUpdate)\n}\n\nexport function detachFromPosition(newDashboard, note, backupMeta){\n    const noteAtLeft = newDashboard.notes.get(note.leftLink)\n    const noteAtRight = newDashboard.notes.get(note.rightLink)\n    // detach note from its position\n    if(noteAtLeft){\n        noteAtLeft.rightLink = note.rightLink\n        backupMeta(noteAtLeft)\n    }\n    if(noteAtRight){\n        noteAtRight.leftLink = note.leftLink\n        backupMeta(noteAtRight)\n        if(note.id===newDashboard.firstNoteId){\n            newDashboard.firstNoteId = noteAtRight.id\n        }\n    }\n}\n\nexport function attachToPosition(newDashboard, sourceNote, noteAtTargetPos, dir, backupMeta, blockUpdate){\n    const noteAtLeft = newDashboard.notes.get(noteAtTargetPos.leftLink)\n    const noteAtRight = newDashboard.notes.get(noteAtTargetPos.rightLink)\n\n    if(dir){\n        sourceNote.rightLink = noteAtTargetPos.id\n        noteAtTargetPos.leftLink = sourceNote.id\n        if(noteAtLeft){\n            sourceNote.leftLink = noteAtLeft.id\n            noteAtLeft.rightLink = sourceNote.id\n            backupMeta(noteAtLeft)\n        }\n        else{\n            sourceNote.leftLink = null\n            newDashboard.firstNoteId = sourceNote.id\n        }\n    }\n    else{\n        sourceNote.leftLink = noteAtTargetPos.id\n        noteAtTargetPos.rightLink = sourceNote.id\n        if(noteAtRight){\n            sourceNote.rightLink = noteAtRight.id\n            noteAtRight.leftLink = sourceNote.id\n            backupMeta(noteAtRight)\n        }\n        else{\n            sourceNote.rightLink = null\n        }\n    }\n    if(!blockUpdate){\n        backupMeta(sourceNote)\n    }\n    backupMeta(noteAtTargetPos)\n}\n\n// Truncates a string with three dots\nexport function truncString (string, n){\n    return string.substr(0,n-1)+(string.length>n?'...':'');\n};\n\n// Gets a caption from a notes preview\nexport function getCaption(targetNote){\n    if(targetNote){\n        const newPreview = targetNote.preview.replace('<br/>', '<br>')\n            .replace('<p></p><p><br></p>', '')\n            .replace('<p><strong></strong></p><p><br>', '')\n        return truncString(newPreview.split('<br>')[0].replace(/<[^>]*>?/gm, ''), 100)\n    }\n    else{\n        return ''\n    }\n}\n\n// Check if the note defined by idx has any conflict with any other note\nexport function checkConflicts (newDashboard, checkingId) {\n    const reducer = (cumulativeClause, id) => \n        cumulativeClause && \n        !newDashboard.notes.get(id).thread.includes(checkingId) && \n        !newDashboard.notes.get(id).branches.includes(checkingId)\n    const noConflictsFlag = [...newDashboard.notes.keys()].reduce(reducer, true);\n    return noConflictsFlag\n}\n\n// Copy note with a fresh ui_id so that it can be used as draggable\nexport function copyNote (note) {\n    return {\n        ui_id: nanoid(),\n        id: note.id,\n        text: note.text,\n        preview: note.preview,\n        branches: note.branches,\n        roots: note.roots,\n        thread: note.thread,\n        collection: note.collection,\n        pinned: note.pinned,\n        color: note.color,\n        colorPreview: note.colorPreview,\n        attachedImg: note.attachedImg,\n        leftLink: note.leftLink,\n        rightLink: note.rightLink\n    }\n}\n\n// If the note has an image at the first position, it \n// replaces the text with the image so that it can be used as a preview\n// just an efficiency trick\nexport function createThumbnail(note){\n    if(note.attachedImg && note.attachedImg.length){\n        const [imgStart, imgEnd, isFirst] = note.attachedImg\n        if(isFirst && note.text.length > imgEnd-imgStart){\n            note.text = note.text.substring(imgStart, imgEnd).split('\"')[0]\n        }\n    }\n    else{\n        delete note.text\n    }\n}\n\n// Get a fresh note with new ID\nexport function getNewNote(){\n    const newNote = {\n        id: nanoid(),\n        text: '',\n        preview: '',\n        branches: [],\n        roots: [],\n        thread: [],\n        collection: [],\n        pinned: false,\n        color: '#ffffff',\n        colorPreview: '#ffffff',\n        attachedImg: false,\n        version: 0,\n        leftLink: null,\n        rightLink: null\n    }\n    return newNote\n}\n\n// Set the preview of a note based on the note itself\nexport function setPreview(note){\n\n    // regular expression to check whether the note contains an image\n    const re = /<img src=.*?>/gm\n    const img = re.exec(note.text)\n\n    // if so, set the note.attachedImg attribute with info about the position of the img in the html \n    if(img){\n        const isFirst = note.text.substring(0, img.index).replace( /(<([^>]+)>)|(\\s|(&nbsp))*/gm, '')===''\n        note.attachedImg = [img.index+10, img.index+img[0].length, isFirst]\n    }\n    else{\n        note.attachedImg = false\n    }\n\n    // remove all spaces to compute the preview\n    var preview = truncate.default(\n            note.text.replace(/<p><br\\/><\\/p>|<p>(\\s|(&nbsp))*<\\/p>|<img .*?>/gm,''), \n            PREVIEWLIMIT,\n            {ellipsis: '...'}\n        )\n\n    // if the preview is empty\n    if(preview.replace( /(<([^>]+)>)/ig, '')===''){\n\n        // if there is an image\n        if(note.attachedImg){\n            preview = 'image only note'\n        }\n\n        // if the preview is empty and the note has no images either\n        else{\n            preview = 'empty note kept for its links'\n        }\n    }\n    note.preview = preview\n}\n\n// Tiny suspense loader component to avoid blank loading pages\nexport const suspenseLoader = (darkMode) => {\n    return (\n        <div style={{\n            justifyContent: 'center', \n            display: 'flex',\n            backgroundColor: darkMode ? '#171717' : 'white',\n            height: '100vh'\n            }}\n        >\n            <Loader\n                type=\"ThreeDots\"\n                color=\"#c6c6c6\"\n                height={50}\n                width={50}\n                style={{\n                    marginTop: '25%'\n                }}\n            />\n        </div>\n    )\n}\n\n// Utils function to see if two arrays are equal in a shallow way\nexport function arraysEqual(array1, array2){\n    var areDifferent = false\n    // if length is different, changes are sure\n    if(array1.length!==array2.length){\n        areDifferent=true\n    }\n\n    // otherwise check element by element\n    else{\n        for(let i=0; i<array1.length; i++){\n            if(array1[i]!==array2[i]){\n                areDifferent=true\n            }\n        }\n    }\n    return areDifferent\n}\n\nexport function sanitiseForRemoval(newDashboard, removingId){\n    // sanitise the dashboard to prevent conflicts from the removal of the removingId note\n    const removingNote = newDashboard.notes.get(removingId)\n\n    if(newDashboard.openedWorkspaceId===removingId){\n        newDashboard.openedWorkspaceId = null\n    }\n    if(newDashboard.openedCollectionId===removingId){\n        newDashboard.openedCollectionId = null\n    }\n    if(newDashboard.selectedNoteId===removingId){\n        newDashboard.selectedNoteId = null\n    }\n    if(newDashboard.prevSelectedNoteId===removingId){\n        newDashboard.prevSelectedNoteId = null\n    }\n    if(newDashboard.firstNoteId===removingId){\n        if(removingNote && removingNote.rightLink){\n            const noteAtRight = newDashboard.notes.get(removingNote.rightLink)\n            if(noteAtRight){\n                newDashboard.firstNoteId = noteAtRight.id\n                noteAtRight.leftLink = null\n                noteAtRight.version += 1\n                delete noteAtRight.text\n                db.notes.update(noteAtRight.id, noteAtRight)\n            }\n        }\n    }\n    if(removingNote && !removingNote.rightLink){\n        const newLastNote = newDashboard.notes.get(removingNote.leftLink)\n        if(newLastNote){\n            newLastNote.rightLink = null\n            newLastNote.version += 1\n            delete newLastNote.text\n            db.notes.update(newLastNote.id, newLastNote)\n        }\n    }\n    newDashboard.workspaceIds = newDashboard.workspaceIds.filter(id => id!==removingId)\n}\n\n// Function to decide what note to select when the editor is closed\nexport function currOrPrevNoteDecice(newDashboard){\n    if(SHAREDMEX.editorModeSelection==='prev'){\n        const previousSelectedNote = newDashboard.notes.get(newDashboard.prevSelectedNoteId)\n        if(previousSelectedNote){\n            newDashboard.selectedNoteId = previousSelectedNote.id\n        }\n        SHAREDMEX.editorModeSelection = 'curr'\n    }\n}\n\nexport function restoreDashboardState(newDashboard, dashboard){\n    if(newDashboard.notes.get(dashboard.selectedNoteId)){\n        newDashboard.selectedNoteId = dashboard.selectedNoteId\n    }\n    if(newDashboard.notes.get(dashboard.prevSelectedNoteId)){\n        newDashboard.prevSelectedNoteId = dashboard.prevSelectedNoteId\n    }\n    if(newDashboard.notes.get(dashboard.openedCollectionId)){\n        newDashboard.openedCollectionId = dashboard.openedCollectionId\n    }\n    if(newDashboard.notes.get(dashboard.openedWorkspaceId)){\n        newDashboard.openedWorkspaceId = dashboard.openedWorkspaceId\n    }\n    newDashboard.workspaceIds = dashboard.workspaceIds.flatMap(\n        (id) => \n            newDashboard.notes.get(id) ? [id] : []\n    )\n}\n\n"],"sourceRoot":""}