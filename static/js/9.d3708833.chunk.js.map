{"version":3,"sources":["components/Footer.js","components/SearchBar.js","components/SearchLabel.js","components/Note.js","components/Wrapper.js","components/NotesList.js","components/SearchArea.js","components/WorkspaceLabel.js","components/WorkspaceArea.js","components/LinksArea.js","components/NotesDragContext.js","components/NotesPage.js"],"names":["notifyMerge","SHAREDMEX","toasts","toast","mergeModeOn","notifyDrive","driveNotConnected","notifySynch","Footer","threadOrCollectionManage","threadOrCollection","setRootsOrBranches","rootsOrBranches","setDarkMode","mergeMode","setMergeMode","selectedNote","setCurrentPage","notesUpdating","loadedUser","synchNotes","darkMode","darkModeSwitch","window","localStorage","setItem","previousDarkMode","className","style","borderTop","backgroundColor","background","boxShadow","onClick","size","transform","previous","type","color","height","width","SearchBar","setSearchProps","searchProps","isDropDisabled","useEffect","goClean","areSlicesScrolled","newSearchProps","droppableId","provided","snapshot","droppableProps","ref","innerRef","threadFilter","collectionFilter","imgFilter","colorFilter","searchText","initSearch","initSearchProps","paddingTop","placeholder","onChange","event","target","value","toLowerCase","isDraggingOver","id","marginTop","margin","ColorPicker","setBackColor","setHasChanged","SearchLabel","closeCollection","dashboard","openedCollectionId","getCaption","notes","get","Note","note","areaName","index","handleNotePress","openEditor","triggerRerender","draggableId","ui_id","usingScrollKeys","name","draggableProps","dragHandleProps","onDoubleClick","onContextMenu","e","preventDefault","backgroundImage","colorPreview","border","isDropAnimating","pinned","thread","length","collection","branches","roots","attachedImg","text","dangerouslySetInnerHTML","__html","preview","Wrapper","notesLength","draggableInfo","workspaceFlag","sourceArea","minWidth","undefined","align","dir","currentSlice","setCurrentSlice","prop","inline","focusPos","SLICESIZE","document","getElementById","scrollIntoView","sessionStorage","currentSearchSlice","tryFocusOnNote","slicedNotes","find","targetElement","setSearchSlice","block","NotesList","handleAddNote","retrievedSlice","getItem","useState","parseInt","isVisible","setIsVisible","closingEditor","holder","resetSearchScroll","scrollLeft","slice","visibility","direction","onScroll","container","saveScroll","map","SearchArea","addNote","selectNote","search","selectedNoteId","WorkspaceLabel","closeAndSave","openedWorkspaceId","workspaceIds","WorkspaceArea","workspace","LinksArea","links","editorModeSelection","prevSelectedNoteId","NoteDragContext","handleOnDragEnd","setDraggableInfo","onDragEnd","onDragStart","start","navigator","vibrate","source","sourceIndex","noteFound","NotesPage","GAPIloaded","currentUser","editorMode"],"mappings":"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","file":"static/js/9.d3708833.chunk.js","sourcesContent":["/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nEditorFooter component\nDefines the buttons of the footer and calls the respective functions\n*/\n\nimport { FcIdea, FcSettings, FcParallelTasks, FcBrokenLink, FcLink, FcImport, FcCheckmark, FcCancel} from 'react-icons/fc'\nimport { AiOutlineDisconnect, AiOutlineLink, AiOutlineImport, AiOutlineStop } from 'react-icons/ai';\nimport { GoLightBulb } from 'react-icons/go'\nimport { VscSettingsGear, VscCheck, VscSync } from 'react-icons/vsc';\nimport { IoIosGitBranch } from 'react-icons/io';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport { driveNotConnected, mergeModeOn } from '../helpers/Messages';\nimport React from 'react'\nimport { toast } from 'react-toastify';\nimport { SHAREDMEX } from './Dashboard';\n\nconst notifyMerge = () => SHAREDMEX.toasts && toast(mergeModeOn);\nconst notifyDrive = () => SHAREDMEX.toasts && toast(driveNotConnected);\nconst notifySynch = () => SHAREDMEX.toasts && toast('Synchronising your notes...')\n\n// Footer component\n// takes the threadOrCollection state and a function to change it,\n// rootsOrBranches state and a function to chage it,\n// a function to switch the darkMode state\n// mergeMode state and a function to change it,\n// the selectedNote,\n// a function to change the current page, used to move to settings page,\n// the notesUpdating flag to show the animation\n// and the loadedUser flag to pass to the settings\n// Most of the props are used to show the correct icons and switch states\nconst Footer = ({\n    threadOrCollectionManage, \n    threadOrCollection, \n    setRootsOrBranches, \n    rootsOrBranches, \n    setDarkMode, \n    mergeMode, \n    setMergeMode,\n    selectedNote,\n    setCurrentPage,\n    notesUpdating,\n    loadedUser,\n    synchNotes,\n    darkMode\n}) => {\n\n    const darkModeSwitch = () =>{\n        window.localStorage.setItem('dark-mode', !darkMode)\n        setDarkMode((previousDarkMode) => !previousDarkMode)\n    }\n    return(\n        <div className='page-footer'\n            style={darkMode ? \n                {borderTop: '1px solid #2a2a2a', backgroundColor: '#1b1b1b'} \n                : \n                {borderTop: '#dddddd', background: 'linear-gradient(#eeeeee, white)', boxShadow: '0 0 3px #bbbbbb'}\n            }\n        >\n            {darkMode ?\n                <VscSettingsGear\n                    className='tools-btn'\n                    onClick={() => setCurrentPage('settings')}\n                    size='2.5em'\n                    style={{transform: 'scale(0.75)'}}\n                />\n                :\n                <FcSettings\n                    className='tools-btn'\n                    onClick={() => setCurrentPage('settings')}\n                    size='2.5em'\n                />\n            }\n\n            {!threadOrCollection ? (\n                darkMode ? \n                    <AiOutlineDisconnect\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                        style={{transform: 'rotate(45deg) scale(0.85)'}}\n                    />\n                :\n                    <FcBrokenLink\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                    />\n            )\n            :\n            (\n                darkMode ?\n                    <AiOutlineLink\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                        style={{transform: 'rotate(45deg) scale(0.85)'}}\n                    />\n                :\n                    <FcLink\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                    />\n                )\n            }\n            {\n                darkMode ?\n                    <IoIosGitBranch\n                        onClick={() =>\n                            setRootsOrBranches(\n                                (previous) => !previous\n                            )\n                        }\n                        size='2em'\n                        className='tools-btn'\n                        style={!rootsOrBranches && {transform: 'scaleY(-1)'}}\n                    />\n                :\n                    <FcParallelTasks\n                        onClick={() =>\n                            setRootsOrBranches(\n                                (previous) => {\n                                    SHAREDMEX.toasts && toast(\n                                        previous ?\n                                            'The Branches Mode is on, now you will see the effectual links between notes' \n                                            : \n                                            'The Roots Mode is on, now you will see the causal links between notes' \n                                        )\n                                    return !previous\n                                }\n                            )\n                        }\n                        size='2.3em'\n                        className='tools-btn'\n                        style={rootsOrBranches ? {transform: 'scaleY(-1) rotate(90deg)'} : {transform: 'rotate(90deg)'}}\n                    />\n            }\n\n            {selectedNote ?\n                darkMode ?\n                    <AiOutlineImport\n                        onClick={() =>{\n                                setMergeMode(\n                                    (previous) => !previous\n                                )\n                                if(!mergeMode){\n                                    notifyMerge()\n                                }\n                            }\n                        }\n                        size='1.8em'\n                        className='tools-btn'\n                        style={{transform:'scaleX(1.1) rotate(-90deg)'}}\n                    /> \n                :\n                    <FcImport\n                        onClick={() =>{\n                                setMergeMode(\n                                    (previous) => !previous\n                                )\n                                if(!mergeMode){\n                                    SHAREDMEX.toasts && notifyMerge()\n                                }\n                            }\n                        }\n                        size='2.3em'\n                        className='tools-btn'\n                        style={{transform:'scaleY(1.15) rotate(-90deg)'}}\n                    />    \n            : null}\n\n            {darkMode ?\n                <GoLightBulb\n                    onClick={() => darkModeSwitch()}\n                    size='2.5em'\n                    className='tools-btn'\n                    style={{transform: 'scaleY(0.7) scaleX(0.7)'}}\n                />  \n            :\n                <FcIdea\n                onClick={() => darkModeSwitch()}\n                size='2.5em'\n                className='tools-btn'\n                />  \n            }\n\n            {loadedUser ? (\n                notesUpdating>0?\n\n                    darkMode ? \n                        <VscSync \n                            size='2em'\n                        /> \n                    :\n                        <Loader \n                            type=\"Circles\" \n                            color=\"#00BFFF\" \n                            height='1.8em'\n                            width='2.3em'\n                        /> \n\n                :\n\n                    darkMode ? \n                        <VscCheck\n                            size='2em'\n                            className='tools-btn'\n                            onClick={()=>{ notifySynch(); synchNotes()}}\n                            style={{transform: 'scaleY(0.85)'}}\n                        />\n                    :\n                        <FcCheckmark\n                            size='2.3em'\n                            className='tools-btn'\n                            onClick={()=>{notifySynch(); synchNotes()}}\n                        />\n            ) :\n\n            darkMode ?\n                <AiOutlineStop\n                    size='1.8em'\n                    onClick={()=>notifyDrive()}\n                    style={{transform: 'scaleX(-1)'}}\n                />\n            :\n                <FcCancel\n                    size='2.3em'\n                    onClick={()=>notifyDrive()}\n                />\n            }\n\n        </div>\n    );\n}\n\nexport default Footer;","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nSearchBar component\n*/\n\nimport React, { useEffect } from 'react'\nimport { Droppable } from 'react-beautiful-dnd'\nimport { FcSearch } from 'react-icons/fc'\nimport { BiSearchAlt } from 'react-icons/bi'\nimport ColorPicker from './ColorPicker'\nimport { BsPaperclip } from 'react-icons/bs'\nimport { VscChromeClose } from 'react-icons/vsc'\nimport { initSearchProps, SHAREDMEX } from './Dashboard'\n\n\nconst SearchBar = ({ \n\tsetSearchProps, \n\tsearchProps ,\n\tisDropDisabled,\n\tdarkMode\n}) => {\t\n\n\tuseEffect(() => {\n\t\tif(searchProps.goClean && !searchProps.areSlicesScrolled){\n\t\t\tconst newSearchProps = {...searchProps}\n\t\t\tnewSearchProps.goClean = false\n\t\t\tsetSearchProps(newSearchProps)\n\t\t}\n\t// eslint-disable-next-line\n\t}, [searchProps])\n\n\t// function to check whether any search filters are active\n\tconst searchCleanerCheck = () => {\n\t\tif(\n\t\t\tsearchProps.threadFilter ||\n\t\t\tsearchProps.collectionFilter || \n\t\t\tsearchProps.imgFilter ||\n\t\t\tsearchProps.colorFilter!=='#ededed' ||\n\t\t\tsearchProps.searchText ||\n\t\t\tsearchProps.areSlicesScrolled\n\t\t){\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\n\treturn (\n\n\t\t<Droppable \n\t\t\tdroppableId={'search-bar'}\n\t\t\tisDropDisabled={isDropDisabled}\n\t\t>\n\t\t\t{(provided, snapshot) => (\n                <div \n                    className={darkMode ? 'search-dark' : 'search-bright'}\n                    {...provided.droppableProps} \n                    ref={provided.innerRef} \n\t\t\t\t>\n\n\t\t\t\t\t{\t\t\n\t\t\t\t\tsearchCleanerCheck() ?\n\t\t\t\t\t\n\t\t\t\t\t\t<VscChromeClose \n\t\t\t\t\t\t\tsize='1.6em'\n\t\t\t\t\t\t\tclassName='tools-btn search-icons'\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tconst initSearch = {...initSearchProps}\n\t\t\t\t\t\t\t\t\tinitSearch.areSlicesScrolled = searchProps.areSlicesScrolled\n\t\t\t\t\t\t\t\t\tinitSearchProps.goClean = true\n\t\t\t\t\t\t\t\t\tsetSearchProps(initSearch)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcolor={darkMode ? '#666666' : '#464646'}\n\t\t\t\t\t\t\tstyle={{paddingTop: '3px', transform:'scale(0.8)'}}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t:\n\n\t\t\t\t\t\tdarkMode ?\n\t\t\t\t\t\t\t<BiSearchAlt className='search-icons' size='2em' />\n\t\t\t\t\t\t:\n\t\t\t\t\t\t\t<FcSearch className='search-icons' size='2em' />\n\t\t\t\t\t}\n\t\t\t\t\t{provided.placeholder}\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\t\tconst newSearchProps = {...searchProps}\n\t\t\t\t\t\t\tnewSearchProps.searchText = event.target.value.toLowerCase()\n\t\t\t\t\t\t\tsetSearchProps(newSearchProps)\n\t\t\t\t\t\t\tSHAREDMEX['search-area-scroll'] = 0\n\t\t\t\t\t\t}}\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\tsnapshot.isDraggingOver ?\n\t\t\t\t\t\t\t\t'Work within this collection'\n\t\t\t\t\t\t\t: \n\t\t\t\t\t\t\t\t'Type to search'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tvalue={searchProps.searchText}\n\t\t\t\t\t\tid='search-bar'\n\t\t\t\t\t/>\n\n\t\t\t\t\t<span \n\t\t\t\t\t\tclassName='search-filter tools-btn' \n\t\t\t\t\t\tstyle={searchProps.imgFilter ?  {color:'red'} : {}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tconst newSearchProps = {...searchProps}\n\t\t\t\t\t\t\tnewSearchProps.imgFilter = !newSearchProps.imgFilter\n\t\t\t\t\t\t\tsetSearchProps(newSearchProps)\n\t\t\t\t\t\t\tSHAREDMEX['search-area-scroll'] = 0\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<BsPaperclip \n\t\t\t\t\t\t\tsize='0.9em' \n\t\t\t\t\t\t\tstyle={{marginTop: '4px', transform: 'rotate(180deg)'}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<span \n\t\t\t\t\t\tclassName='search-filter tools-btn' \n\t\t\t\t\t\tstyle={searchProps.threadFilter ?  {color:'red'} : {}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tconst newSearchProps = {...searchProps}\n\t\t\t\t\t\t\tnewSearchProps.threadFilter = !newSearchProps.threadFilter\n\t\t\t\t\t\t\tsetSearchProps(newSearchProps)\n\t\t\t\t\t\t\tSHAREDMEX['search-area-scroll'] = 0\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tT\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<span \n\t\t\t\t\t\tclassName='search-filter tools-btn'\n\t\t\t\t\t\tstyle={searchProps.collectionFilter ? {color:'red'} : {}}\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tconst newSearchProps = {...searchProps}\n\t\t\t\t\t\t\tnewSearchProps.collectionFilter = !newSearchProps.collectionFilter\n\t\t\t\t\t\t\tsetSearchProps(newSearchProps)\n\t\t\t\t\t\t\tSHAREDMEX['search-area-scroll'] = 0\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\tC\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<span style={{margin: '0 5px 0 0'}}>\n\t\t\t\t\t\t<ColorPicker \n\t\t\t\t\t\t\tsetBackColor={{}}\n\t\t\t\t\t\t\tsetHasChanged={{}}\n\t\t\t\t\t\t\tsearchProps={searchProps}\n\t\t\t\t\t\t\tsetSearchProps={setSearchProps}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</span>\n\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t</Droppable>\n\t);\n};\n\nexport default SearchBar;\n","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nSearchLabel component\nGives information about the current state of the search\nand the filters applied to it\n*/\n\nimport React from 'react';\nimport { getCaption } from '../helpers/DashboardUtils';\nimport { VscChromeClose } from 'react-icons/vsc';\n\nconst SearchLabel = ({ \n    searchProps, \n    closeCollection, \n    dashboard,\n    darkMode\n}) => {\n\n    return(\n        <div className='stripe-label'>\n\n            <div className='stripe-not-overflow' style={{width: '80vw'}}>\n                NOTE FINDER  \n                {searchProps.threadFilter && ' - THREADS'} \n                {searchProps.collectionFilter && ' - COLLECTIONS'}\n                {\n                    dashboard.openedCollectionId && ' : ' + \n                    getCaption(dashboard.notes.get(dashboard.openedCollectionId))\n                }\n            </div>\n\n            {dashboard.openedCollectionId && \n                <div>\n                    <VscChromeClose \n                        size='2em'\n                        className='tools-btn close-btn'\n                        onClick={() => closeCollection()}\n                        color={darkMode ? 'white' : 'black'}\n                    />\n                </div>\n            }\n\n        </div>\n    )\n}\n\nexport default SearchLabel","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nNote component\nDefines the single note object and all the actions that are possible with it\n*/\n\nimport { Draggable } from 'react-beautiful-dnd';\nimport React from 'react';\nimport {RiPushpin2Fill} from 'react-icons/ri'\nimport { FaLink, FaFolder } from 'react-icons/fa'\nimport { ImTree } from 'react-icons/im'\nimport { FiPaperclip } from 'react-icons/fi'\nimport { SHAREDMEX } from './Dashboard';\n\n// Note component takes the note to show, \n// the name of the area it compares in,\n// the index of the note inside the sequence,\n// handleNotePress to select a note if it is pressed,\n// the darkMode, mergeMode, rootsOrBranches, threadOrCollection flags\n// the selectedNote,\n// the openEditor function to edit the note on double click\n\n\nconst Note = ({ \n\tnote, \n\tareaName, \n\tindex, \n\thandleNotePress, \n\tdarkMode, \n\tselectedNote,\n\tmergeMode,\n\topenEditor,\n\trootsOrBranches,\n\ttriggerRerender\n\n}) => {\n\n\treturn (\n\n\t\t\t<Draggable key={note.ui_id} draggableId={note.ui_id} index={index}>\n\t\t\t\t{(provided, snapshot) => (\n\t\t\t\t\t\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<li \n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t(mergeMode && selectedNote.id===note.id && 'note no-scrollbar merge-mode')\n\t\t\t\t\t\t\t||\n\t\t\t\t\t\t\t(((darkMode && selectedNote && selectedNote.id===note.id && !SHAREDMEX.usingScrollKeys) && \n\t\t\t\t\t\t\t\t'note note-dark no-scrollbar selected-note-dark') || \n\t\t\t\t\t\t\t((darkMode && (!selectedNote || selectedNote.id!==note.id)) && \n\t\t\t\t\t\t\t\t'note note-dark no-scrollbar') ||\n\t\t\t\t\t\t\t((!darkMode && selectedNote && selectedNote.id===note.id && !SHAREDMEX.usingScrollKeys) &&\n\t\t\t\t\t\t\t\t'note note-bright no-scrollbar selected-note') ||\n\t\t\t\t\t\t\t((!darkMode && (!selectedNote ||selectedNote.id!==note.id)) &&\n\t\t\t\t\t\t\t\t'note note-bright no-scrollbar')) \n\t\t\t\t\t\t}\n\t\t\t\t\t\tname={note.id}\n\t\t\t\t\t\tid={note.ui_id}\n\t\t\t\t\t\tref={provided.innerRef} \n\t\t\t\t\t\t{...provided.draggableProps}\n\t\t\t\t\t\t{...provided.dragHandleProps}\n\t\t\t\t\t\tonClick={()=> selectedNote&&selectedNote.id===note.id ? openEditor(note) : areaName!=='branches-area' && handleNotePress(note)}\n\t\t\t\t\t\tonDoubleClick={()=> openEditor(note)}\n\t\t\t\t\t\tonContextMenu={(e) => {e.preventDefault(); areaName==='branches-area' && handleNotePress(note)}}\n\t\t\t\t\t\tstyle={ \n\t\t\t\t\t\t\t!(mergeMode && selectedNote.id===note.id) ? (\n\t\t\t\t\t\t\t\t!darkMode && note.color!=='#ffffff' ? \n\t\t\t\t\t\t\t\t\t(selectedNote && selectedNote.id===note.id ? \n\t\t\t\t\t\t\t\t\t\t{backgroundColor: note.color, ...provided.draggableProps.style} : \n\t\t\t\t\t\t\t\t\t{backgroundColor: note.color, border: '1px solid '+ note.color, ...provided.draggableProps.style}) : \n\t\t\t\t\t\t\t\t\t\t(note.color!=='#ffffff' ? \n\t\t\t\t\t\t\t\t\t\t\t{backgroundImage: 'linear-gradient(25deg, rgb(92, 92, 92) 92%, '+note.colorPreview + ' 92%)', ...provided.draggableProps.style} \n\t\t\t\t\t\t\t\t\t\t\t: provided.draggableProps.style))\n\t\t\t\t\t\t\t: provided.draggableProps.style\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{snapshot.isDropAnimating}\n\t\t\t\t\t\t\t{selectedNote && selectedNote.id===note.id && triggerRerender}\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{note.pinned && areaName==='search-area' &&\n\t\t\t\t\t\t\t\t\t<RiPushpin2Fill size='10px' className='header-icon'/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{note.thread.length ?\n\t\t\t\t\t\t\t\t\t<FaLink size='10px' className='header-icon'/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{note.collection.length ?\n\t\t\t\t\t\t\t\t\t<FaFolder size='10px' className='header-icon'/> : ''\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t{!rootsOrBranches && note.branches.length ?\n\t\t\t\t\t\t\t\t\t<ImTree size='10px' className='header-icon'/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{rootsOrBranches && note.roots.length ?\n\t\t\t\t\t\t\t\t\t<ImTree size='10px' className='header-icon' style={{transform: 'scaleY(-1)'}}\t/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{note.attachedImg && !note.attachedImg[2] ?\n\t\t\t\t\t\t\t\t\t<FiPaperclip size='10px' className='header-icon' style={{transform:'rotate(-45deg)'}}/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{(!note.attachedImg || !note.attachedImg[2]) ?\n\t\t\t\t\t\t\t\t<div className='note-content no-scrollbar' dangerouslySetInnerHTML={{__html: note.preview}}></div> : \n\t\t\t\t\t\t\t\t<div className='just-background-note' style={{backgroundImage: 'url('+ note.text +')'}}></div>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Draggable>\n\t);\n};\n\nexport default Note;\n","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nWrapper component\nUsed to wrap an unsaved thread inside an empty note\nor to expand the thread or collection contained in any\narbitrary note\n*/\n\nimport {Droppable} from 'react-beautiful-dnd';\nimport React from 'react'\n\nconst Wrapper = ({\n\tthreadOrCollection,\n    notesLength,\n    draggableInfo,\n    notes,\n    darkMode,\n    workspaceFlag\n}) => {\n\n    // Disable dropping here unless the note comes from the search area\n    // and it is empty if you are trying to wrap an unsaved thread/collection\n    // or it is full if you are trying to expand it to show its content\n    const isDropDisabled = \n        (workspaceFlag && draggableInfo.sourceArea==='workspace-area') \n        \n        ||\n\n        (workspaceFlag && draggableInfo.note.id!==null && notesLength>0 && (\n\n            draggableInfo.note.thread.length>0 || \n            draggableInfo.note.collection.length>0\n        ))\n            \n        \n    \n    return (\n\n        <Droppable \n            droppableId='wrapper-area'\n            isDropDisabled={isDropDisabled}\n        >\n\n            {(provided, snapshot) => (\n                <div \n                    className='wrapper'\n                    {...provided.droppableProps} \n                    ref={provided.innerRef} \n                    style={ \n                        (notesLength > 0 && workspaceFlag) ? (\n                            (\n                                darkMode ?\n                                    threadOrCollection ? {backgroundColor:'#fccb00', color:'black', minWidth:\"8vh\"} \n                                    : {backgroundColor:'#1273de', color:'white', minWidth:\"8vh\"}\n                                :\n                                    threadOrCollection ? {backgroundColor:'#fef3bd', color:'black', minWidth:\"8vh\"} \n                                    : {backgroundColor:'#c4def6', color:'black', minWidth:\"8vh\"}\n                            ) \n                            )\n                        : \n                        darkMode ?\n                        {backgroundColor: snapshot.isDraggingOver ? '#aaaaaa' : '#2e2e2e', minWidth:\"8vh\", color: '#666666'}\n                        :\n                        {\n                            backgroundColor: snapshot.isDraggingOver ? draggableInfo.note.color : '#f4f4f4', \n                            minWidth: \"8vh\", \n                            boxShadow: '1px 0px 1px #dddddd', \n                            border: snapshot.isDraggingOver ? '1px dashed #aaaaaa' : undefined,\n                        }\n                    }\n                >\n\n                {\n                    snapshot.isDraggingOver?\n                    \n                        ((notesLength > 0 && workspaceFlag) ?\n                            (\n                                <div className='vertical-text'>\n                                    wrap <br></br> \n                                    {threadOrCollection ? ' thread ' : ' collection '}\n                                    <br></br> \n                                    inside note\n                                </div>\n                            ) \n                        :\n                            (\n                                <div className='vertical-text'>\n                                    expand\n                                    <br></br> \n                                    {draggableInfo.note.thread.length ? \n                                        'thread' : 'collection'\n                                    }\n                                </div>\n                            ) \n                        ) : <div className='vertical-text'>{(notesLength > 0 && workspaceFlag) ? 'wrap' : 'drop to expand'}</div>\n                }\n\n                {provided.placeholder}\n\n                </div>\n\n            )}\n\n        </Droppable>\n\n    )\n}\nexport default Wrapper","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nNotesList component\nDefines a general list of notes that acts as a Droppable\nin the framework of React Beautiful Dnd\n*/\n\nimport Note from './Note';\nimport {Droppable} from 'react-beautiful-dnd';\nimport { useEffect, useState } from 'react';\nimport {FcNext, FcPrevious, FcPlus} from 'react-icons/fc';\nimport { BsChevronRight, BsChevronLeft } from 'react-icons/bs';\nimport { BsPlusSquare } from 'react-icons/bs'\nimport Wrapper from './Wrapper';\nimport React from 'react'\nimport { SHAREDMEX, SLICESIZE } from './Dashboard';\n\n// Max size of a row of notes, it is necessary to press the arrow\n// button to access further notes\n// Function used to change slice based on which arrow button has been pressed\nconst align = (dir, currentSlice, setCurrentSlice, notes, areaName) => {\n\n\t// Before changing slice, set up the autoscroll\n\t// Initialise a prop based on whether the button was next or prev\n\tconst prop = dir===-1 ? {inline:'start'} : {inline:'end'}\n\tvar focusPos = currentSlice*SLICESIZE+SLICESIZE-1\n\n\t// If overflows, go back to last note of the sequence\n\tif(focusPos>notes.length-1){\n\t\tfocusPos=notes.length-1\n\t}\n\n\t// scroll into the last note of the previous slice to give the idea of continuity \n\t// between slices\n\tdocument.getElementById(notes[focusPos].ui_id).scrollIntoView(prop);\n\tsetCurrentSlice(currentSlice+dir)\n\twindow.sessionStorage.setItem('current-slice-'+areaName, currentSlice+dir)\n\tif(areaName==='search-area'){\n\t\tSHAREDMEX.currentSearchSlice = currentSlice+dir\n\t}\n}\n\nconst tryFocusOnNote = (selectedNote, slicedNotes) => {\n\t// If there is a selectedNote to scroll to, do it\n\tif(selectedNote){\n\t\tconst focusPos = slicedNotes.find(note => note.id === selectedNote.id)\n\t\tif(focusPos){\n\t\t\tconst targetElement = document.getElementById(focusPos.ui_id)\n\t\t\tif(targetElement){\n\t\t\t\t// if the note is between a slice\n\t\t\t\tif(!SHAREDMEX.setSearchSlice){\n\t\t\t\t\ttargetElement.scrollIntoView({block: 'nearest'})\n\t\t\t\t}\n\t\t\t\t// if the note is at the beginning of a slice\n\t\t\t\telse if(SHAREDMEX.setSearchSlice===-1){\n\t\t\t\t\ttargetElement.scrollIntoView({block: 'nearest', inline: 'start'})\n\t\t\t\t}\n\t\t\t\t// if the note is at the end of a slice\n\t\t\t\telse{\n\t\t\t\t\ttargetElement.scrollIntoView({block: 'nearest', inline: 'end'})\n\t\t\t\t}\n\t\t\t\tSHAREDMEX.setSearchSlice=0\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst NotesList = ({\n\tnotes,\n\thandleAddNote,\n\tareaName,\n\thandleNotePress,\n\tdarkMode,\n\tselectedNote,\n\tmergeMode,\n\tthreadOrCollection,\n\topenEditor,\n\tworkspaceFlag, \n\trootsOrBranches,\n\tisDropDisabled,\n\tdraggableInfo,\n\tsearchProps,\n\tsetSearchProps,\n\ttriggerRerender\n}) => {\n\n\tconst retrievedSlice = window.sessionStorage.getItem('current-slice-'+areaName)\n\t// State that defines the slice the user is at\n\tconst [currentSlice, setCurrentSlice] = useState(\n\t\tretrievedSlice ? \n\t\tparseInt(retrievedSlice) :\n\t\t0\n\t)\n\t// State to hide the NotesList until the scroll is performed, used to avoid flickering\n\tconst [isVisible, setIsVisible] = useState(false)\n\n\t// Effect to set back the scroll once exiting the editor\n\tuseEffect(() => {\n\t\tif(!SHAREDMEX.usingScrollKeys){\n\t\t\tif(areaName !=='search-area' && !SHAREDMEX.closingEditor){\n\t\t\t\ttryFocusOnNote(selectedNote, slicedNotes)\n\t\t\t}\n\t\t\telse{\n\t\t\t\tconst holder = document.getElementById(areaName)\n\t\t\t\tif(holder){\n\t\t\t\t\tif(SHAREDMEX.resetSearchScroll){\n\t\t\t\t\t\tholder.scrollLeft = 0\n\t\t\t\t\t\tSHAREDMEX.resetSearchScroll = false\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tholder.scrollLeft = SHAREDMEX[areaName+'-scroll']\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Otherwise, if there are no notes in the current slices, go to slice 0\n\t\tif(!slicedNotes.length && currentSlice!==0){\n\t\t\tsetCurrentSlice(0)\n\t\t\twindow.sessionStorage.setItem('current-slice-'+areaName, 0)\n\t\t\tSHAREDMEX[areaName+'-scroll'] = 0\n\t\t\tif(areaName === 'search-area'){\n\t\t\t\tSHAREDMEX.currentSearchSlice = 0\n\t\t\t}\n\t\t}\n\t\tsetIsVisible(true)\n\t// eslint-disable-next-line\n\t}, [notes])\n\n\t// effect to keep the selected note at the center if the user is scrolling with the keys\n\tuseEffect(() => {\n\t\tif(areaName==='search-area' && SHAREDMEX.usingScrollKeys){\n\t\t\tif(!SHAREDMEX.setSearchSlice){\n\t\t\t\ttryFocusOnNote(selectedNote, slicedNotes)\n\t\t\t\tsetIsVisible(true)\n\t\t\t}\n\t\t\telse{\n\t\t\t\tsetCurrentSlice(currentSlice+SHAREDMEX.setSearchSlice)\n\t\t\t\twindow.sessionStorage.setItem('current-slice-'+areaName, currentSlice+SHAREDMEX.setSearchSlice)\n\t\t\t\tSHAREDMEX.currentSearchSlice = currentSlice+SHAREDMEX.setSearchSlice\n\t\t\t}\n\t\t\tSHAREDMEX.usingScrollKeys = false\n\t\t}\n\t// eslint-disable-next-line\n\t},[selectedNote])\n\n\t// Effect to restore the search to the first slice\n\tuseEffect(() => {\n\t\tif(areaName==='search-area' && searchProps.goClean && currentSlice > 0){\n\t\t\tsetCurrentSlice(0)\n\t\t\twindow.sessionStorage.setItem('current-slice-'+areaName, 0)\n\t\t\tSHAREDMEX.currentSearchSlice = 0\n\t\t}\n\t// eslint-disable-next-line\n\t}, [searchProps])\n\n\tuseEffect(() => {\n\t\tif(areaName==='search-area'){\n\t\t\tconst newSearchProps = {...searchProps}\n\t\t\t// record whether the slices are scrolled\n\t\t\tif(currentSlice > 0){\n\t\t\t\tnewSearchProps.areSlicesScrolled = true\n\t\t\t}\n\t\t\telse{\n\t\t\t\tnewSearchProps.areSlicesScrolled = false\n\t\t\t}\n\t\t\t// if you have to clean the search, do it\n\t\t\tif(searchProps.goClean){\n\t\t\t\tconst container = document.getElementById(areaName)\n\t\t\t\tcontainer.scrollLeft = 0\n\t\t\t\tnewSearchProps.goClean = false\n\t\t\t}\n\t\t\tsetSearchProps(newSearchProps)\n\t\t\t// if the page is changing, focus on the note\n\t\t\tif(SHAREDMEX.setSearchSlice){\n\t\t\t\ttryFocusOnNote(selectedNote, slicedNotes)\n\t\t\t}\n\t\t}\n\t// eslint-disable-next-line\n\t}, [currentSlice])\n\n\tuseEffect(()=>{\n\t\tif(isVisible){\n\t\t\tSHAREDMEX.closingEditor = false\n\t\t}\n\t},[isVisible])\n\n\tconst saveScroll = () => {\n\t\tconst container = document.getElementById(areaName)\n\t\tif(container){\n\t\t\tSHAREDMEX[areaName+'-scroll'] = container.scrollLeft\n\t\t}\n\t}\n\n\tconst slicedNotes = notes.slice(currentSlice*SLICESIZE, (currentSlice+1)*SLICESIZE+SLICESIZE)\n\n\treturn (\n\n\t\t<div style={{visibility: isVisible ? 'visible' : 'hidden'}}>\n\n\t\t\t<Droppable \n\t\t\t\tdroppableId={areaName} \n\t\t\t\tdirection='horizontal' \n\t\t\t\tclassName='droppable-wrapper' \n\t\t\t\tisDropDisabled={isDropDisabled}\n\t\t\t>\n\n\t\t\t\t{(provided) => (\n\n\t\t\t\t\t<ul \n\t\t\t\t\t\tclassName='notes-list' \n\t\t\t\t\t\t{...provided.droppableProps} \n\t\t\t\t\t\tref={provided.innerRef} \n\t\t\t\t\t\tid={areaName}\n\t\t\t\t\t\tonScroll={() => saveScroll()}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{currentSlice>0 ?\n\t\t\t\t\t\t\t\t\tdarkMode ?\n\t\t\t\t\t\t\t\t\t\t<BsChevronLeft \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(-1, currentSlice, setCurrentSlice, notes, areaName)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t\tcolor='#666666'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t<FcPrevious \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(-1, currentSlice, setCurrentSlice, notes, areaName)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{areaName==='workspace-area' &&\n\n\t\t\t\t\t\t\t\t<Wrapper \n\t\t\t\t\t\t\t\t\tthreadOrCollection={threadOrCollection}\n\t\t\t\t\t\t\t\t\tnotesLength={notes.length}\n\t\t\t\t\t\t\t\t\tdraggableInfo={draggableInfo}\n\t\t\t\t\t\t\t\t\tnotes={notes}\n\t\t\t\t\t\t\t\t\tdarkMode={darkMode}\n\t\t\t\t\t\t\t\t\tworkspaceFlag={workspaceFlag}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{(areaName==='search-area' && currentSlice===0) &&\n\t\t\t\t\t\t\t\t\t(darkMode ?\n\t\t\t\t\t\t\t\t\t<BsPlusSquare \n\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn add-btn'\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddNote()}\n\t\t\t\t\t\t\t\t\t\tsize='2.25em'\n\t\t\t\t\t\t\t\t\t\tcolor='#555555'\n\t\t\t\t\t\t\t\t\t\tstyle={{transform: 'scale(0.8)'}}\n\t\t\t\t\t\t\t\t\t\tid='plus'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t<FcPlus\n\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn add-btn'\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddNote()}\n\t\t\t\t\t\t\t\t\t\tsize='2.25em'\n\t\t\t\t\t\t\t\t\t\tid='plus'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{slicedNotes.map((note, index) => (\n\n\t\t\t\t\t\t\t\t<Note\n\t\t\t\t\t\t\t\t\tkey={note.ui_id}\n\t\t\t\t\t\t\t\t\tnote={note}\n\t\t\t\t\t\t\t\t\tareaName={areaName}\n\t\t\t\t\t\t\t\t\tindex={index+currentSlice*SLICESIZE}\n\t\t\t\t\t\t\t\t\thandleNotePress={handleNotePress}\n\t\t\t\t\t\t\t\t\tdarkMode={darkMode}\n\t\t\t\t\t\t\t\t\tselectedNote={selectedNote}\n\t\t\t\t\t\t\t\t\tmergeMode={mergeMode}\n\t\t\t\t\t\t\t\t\topenEditor={openEditor}\n\t\t\t\t\t\t\t\t\trootsOrBranches={rootsOrBranches}\n\t\t\t\t\t\t\t\t\ttriggerRerender={triggerRerender}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t\t{provided.placeholder}\n\n\t\t\t\t\t\t\t<div> \n\t\t\t\t\t\t\t\t{(currentSlice+1)*SLICESIZE+SLICESIZE<notes.length ? \n\n\t\t\t\t\t\t\t\t\tdarkMode ?\n\t\t\t\t\t\t\t\t\t\t<BsChevronRight \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(1, currentSlice, setCurrentSlice, notes, areaName)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t\tcolor='#666666'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t<FcNext \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(1, currentSlice, setCurrentSlice, notes, areaName)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\n\t\t\t</Droppable>\n\t\t</div>\n\t);\n};\n\nexport default NotesList;\n","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nSearchArea component\nSearch Area that includes the searchBar, the Search Label\nand the notes list containing the results of the search\n*/\n\nimport React from 'react';\nimport SearchBar from './SearchBar';\nimport SearchLabel from './SearchLabel';\nimport NotesList from './NotesList';\n\nconst SearchArea = ({ \n    closeCollection, \n    dashboard, \n    darkMode, \n    addNote, \n    selectNote, \n    mergeMode, \n    threadOrCollection, \n    openEditor, \n    rootsOrBranches,\n    searchProps,\n    setSearchProps,\n    draggableInfo,\n    triggerRerender\n}) => {\n\n    // Dropping here is disabled unless the note comes from the \n    // search area itself and has a collection within it\n    // The gesture is used to expand it\n    const isDropDisabled = \n        !draggableInfo.note ||\n        !draggableInfo.note.collection ||\n        !draggableInfo.note.collection.length\n\n    return(\n        <div>\n            <SearchBar \n                setSearchProps={setSearchProps} \n                searchProps={searchProps}\n                isDropDisabled={isDropDisabled}\n                darkMode={darkMode}\n            />\n\n            <div>\n                <SearchLabel \n                    searchProps={searchProps} \n                    closeCollection={closeCollection}\n                    dashboard={dashboard}\n                    darkMode={darkMode}\n                />\n                \n                <NotesList\n                    notes={dashboard.search}\n                    handleAddNote={addNote}\n                    areaName={'search-area'}\n                    handleNotePress={selectNote}\n                    darkMode={darkMode}\n                    selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                    mergeMode={mergeMode}\n                    threadOrCollection={threadOrCollection}\n                    openEditor={openEditor}\n                    rootsOrBranches={rootsOrBranches}\n                    searchProps={searchProps}\n                    setSearchProps={setSearchProps}\n                    triggerRerender={triggerRerender}\n                />\n            </div> \n        </div>\n    )\n}\n\nexport default SearchArea","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nWorkspaceLabel component\nGives information about the current state of the workspace\n*/\n\nimport React from 'react';\nimport { getCaption } from '../helpers/DashboardUtils';\nimport { VscChromeClose } from 'react-icons/vsc';\n\nconst WorkspaceLabel = ({ \n    dashboard,\n    threadOrCollection,\n    closeAndSave,\n    darkMode\n}) => {\n\nreturn(\n    <div className='stripe-label'>\n\n        <div className='stripe-not-overflow' style={{width: '80vw'}}>\n\n            CURRENT {threadOrCollection ? ' THREAD ' : ' COLLECTION '} \n            {dashboard.openedWorkspaceId ?\n                    ' : ' + getCaption(dashboard.notes.get(dashboard.openedWorkspaceId))\n                : (dashboard.workspaceIds.length ? \n                    (threadOrCollection ? ' : unsaved thread ' : ' : unsaved collection ') \n            : null)\n            }\n        </div>\n\n        {dashboard.workspaceIds.length || dashboard.openedWorkspaceId ?\n            <div>\n                <VscChromeClose \n                    size='2em'\n                    className='tools-btn close-btn'\n                    onClick={() => closeAndSave()}\n                    color={darkMode ? 'white' : 'black'}\n                />\n            </div>\n        : null}\n\n    </div>\n    )\n}\n\nexport default WorkspaceLabel","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nWorkspaceArea component\nContains the current workspace the user is working on\n*/\n\nimport React from 'react';\nimport NotesList from './NotesList';\nimport WorkspaceLabel from './WorkspaceLabel';\n\nconst WorkspaceArea = ({ \n    dashboard, \n    darkMode, \n    selectNote, \n    mergeMode, \n    threadOrCollection, \n    openEditor, \n    rootsOrBranches,\n    closeAndSave,\n    draggableInfo,\n    triggerRerender\n}) => { \n\n    return (\n        <div>\n\n            <WorkspaceLabel \n                dashboard={dashboard}\n                threadOrCollection={threadOrCollection}\n                closeAndSave={closeAndSave}\n                darkMode={darkMode}\n            />                \n\n            <NotesList\n                notes={dashboard.workspace}\n                areaName={'workspace-area'}\n                handleNotePress={selectNote}\n                darkMode={darkMode}\n                selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                workspaceFlag={!dashboard.openedWorkspaceId}\n                rootsOrBranches={rootsOrBranches}\n                draggableInfo={draggableInfo}\n                triggerRerender={triggerRerender}\n            />\n\n        </div>\n    )\n}\n\nexport default WorkspaceArea","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nLinksArea component\nDefines the lowest row of notes of the dashboard\nwhich shows the links starting from/coming into the selectedNote\nBased of a rootsOrBranches flag\n*/\n\nimport React from 'react';\nimport NotesList from './NotesList';\nimport { getCaption } from '../helpers/DashboardUtils';\nimport { SHAREDMEX } from './Dashboard';\n\n// LinksArea component,\n// takes the dashboard to get the notes from,\n// The darkmode flag\n// some draggableInfo to know where the drags start from\nconst LinksArea = ({ \n    dashboard, \n    darkMode, \n    mergeMode, \n    threadOrCollection, \n    openEditor, \n    rootsOrBranches,\n    draggableInfo,\n    triggerRerender,\n    selectNote\n}) => { \n\n    // Flag to check whether a note is allowed to be dropped in the links area\n    const isDropDisabled = \n        (draggableInfo.note && draggableInfo.note.id===dashboard.selectedNoteId)\n\n    // function to open the editor when a note is double clicked from the links area\n    // requires a special function to do so because it cannot undergo the usual process of \n    // only being selected, because otherwise that selection would change the links area itself\n    // and lead to unstable navigation\n    const openEditorForLinks = (note) => {\n        if(!mergeMode){\n            SHAREDMEX.editorModeSelection = 'prev'\n            dashboard.prevSelectedNoteId = dashboard.selectedNoteId\n            dashboard.selectedNoteId = note.id\n            openEditor()\n        }\n    }\n\n    return (\n        <div>\n\n            <label className='stripe-label stripe-not-overflow' style={{width: '90vw'}}>\n                {!rootsOrBranches ? ' BRANCHES' : ' ROOTS'}\n                {dashboard.selectedNoteId && ' - ' + getCaption(dashboard.notes.get(dashboard.selectedNoteId))} \n            </label>\n\n            <NotesList\n                notes={dashboard.links}\n                areaName={'branches-area'}\n                darkMode={darkMode}\n                handleNotePress={selectNote}\n                selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditorForLinks}\n                rootsOrBranches={rootsOrBranches}\n                isDropDisabled={isDropDisabled}\n                triggerRerender={triggerRerender}\n            />\n\n        </div>\n    )\n}\n\nexport default LinksArea","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nNoteDragContext component\nDefines drag and drop context by using the React Beautiful DnD package\n*/\n\nimport React, { useState } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport SearchArea from './SearchArea';\nimport WorkspaceArea from './WorkspaceArea';\nimport LinksArea from './LinksArea';\n\n// Function that is called when a drag starts\n// Stores information about the note that has been moved and its\n// original position inside a state that then gets passed\nconst onDragStart = (start, dashboard, setDraggableInfo) => {\n\n    // give some short tactile feedback\n    if (window.navigator.vibrate) {\n        window.navigator.vibrate(25);\n    }\n\n    // Initialise the draggableInfo state\n    const draggableInfo = {}\n    const sourceArea = start.source.droppableId\n    draggableInfo.sourceArea = sourceArea\n    const sourceIndex = start.source.index\n    var noteFound = null\n\n    // return the note itself so that it is possible to access some \n    // of its properties, eg: the collection that it contains\n    // this is used for some special gestures such as the dragging\n    // into the searchBar gesture\n    if(sourceArea==='workspace-area'){\n        noteFound = dashboard.workspace[sourceIndex]\n    }\n    else if(sourceArea==='search-area'){\n        noteFound = dashboard.search[sourceIndex]\n    }\n    else if(sourceArea==='branches-area'){\n        noteFound = dashboard.links[sourceIndex]\n    }\n    \n    if(noteFound){\n        draggableInfo.note = noteFound\n    }\n    setDraggableInfo(draggableInfo)\n}\n\nconst NoteDragContext = ({ \n    handleOnDragEnd,\n    closeCollection,\n    dashboard,\n    darkMode,\n    addNote,\n    selectNote,\n    mergeMode,\n    threadOrCollection,\n    openEditor,\n    rootsOrBranches,\n    closeAndSave,\n    searchProps,\n    setSearchProps,\n    triggerRerender\n}) => {\n\n    const [draggableInfo, setDraggableInfo] = useState({\n        sourceArea: '',\n        note: {id: null}\n    })\n\n    return(\n\n        <DragDropContext \n            onDragEnd={handleOnDragEnd} \n            onDragStart={(start) => onDragStart(start, dashboard, setDraggableInfo)}\n        >\n                \n            <SearchArea \n                closeCollection={closeCollection} \n                dashboard={dashboard} \n                darkMode={darkMode}\n                addNote={addNote}\n                selectNote={selectNote}\n                mergeMode={mergeMode} \n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                rootsOrBranches={rootsOrBranches}\n                searchProps={searchProps}\n                setSearchProps={setSearchProps}\n                draggableInfo={draggableInfo}\n                triggerRerender={triggerRerender}\n            />                 \n\n            \n            <WorkspaceArea \n                dashboard={dashboard}\n                darkMode={darkMode}\n                selectNote={selectNote}\n                mergeMode={mergeMode} \n                threadOrCollection={threadOrCollection} \n                openEditor={openEditor} \n                rootsOrBranches={rootsOrBranches}\n                closeAndSave={closeAndSave}\n                draggableInfo={draggableInfo}\n                triggerRerender={triggerRerender}\n            />\n\n            <LinksArea \n                dashboard={dashboard}\n                darkMode={darkMode}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                rootsOrBranches={rootsOrBranches}\n                draggableInfo={draggableInfo}\n                triggerRerender={triggerRerender}\n                selectNote={selectNote}\n            />\n\n        </DragDropContext>\n    )\n}\nexport default NoteDragContext","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nNotesPage component\nMain notes page, as opposed to Editor page or settings page\nWraps the noteDragDropContext and the Footer\n*/\n\nimport React from 'react';\nimport Footer from './Footer'\nimport NoteDragContext from './NotesDragContext';\n\nconst NotesPage = ({ \n    darkMode,\n    dashboard,\n    handleOnDragEnd,\n    GAPIloaded,\n    currentUser,\n    setCurrentPage,\n    notesUpdating,\n    setDarkMode,\n    closeCollection,\n    addNote,\n    selectNote,\n    mergeMode,\n    setMergeMode,\n    openEditor,\n    rootsOrBranches,\n    closeAndSave,\n    threadOrCollection,\n    threadOrCollectionManage,\n    setRootsOrBranches,\n    searchProps,\n    setSearchProps,\n    synchNotes,\n    editorMode,\n    triggerRerender\n}) => {\n\n    return(\n\n        <div className={darkMode ? 'container dark-mode' : 'container'}>\n\n            <NoteDragContext \n                handleOnDragEnd={handleOnDragEnd}\n                closeCollection={closeCollection}\n                dashboard={dashboard}\n                darkMode={darkMode}\n                addNote={addNote}\n                selectNote={selectNote}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                rootsOrBranches={rootsOrBranches}\n                closeAndSave={closeAndSave}\n                searchProps={searchProps}\n                setSearchProps={setSearchProps}\n                editorMode={editorMode}\n                triggerRerender={triggerRerender}\n            />\n\n            <Footer \n                threadOrCollectionManage={threadOrCollectionManage}\n                threadOrCollection={threadOrCollection}\n                setRootsOrBranches={setRootsOrBranches}\n                rootsOrBranches={rootsOrBranches}\n                setDarkMode={setDarkMode}\n                mergeMode={mergeMode}\n                setMergeMode={setMergeMode}\n                selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                setCurrentPage={setCurrentPage}\n                notesUpdating={notesUpdating}\n                loadedUser={GAPIloaded && currentUser}\n                synchNotes={synchNotes}\n                darkMode={darkMode}\n            />\n            \n        </div>\n    )\n}\nexport default NotesPage"],"sourceRoot":""}