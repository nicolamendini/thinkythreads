{"version":3,"sources":["components/OptionsPopup.js","components/SorterPopup.js","components/EditorFooter.js","components/Editor.js"],"names":["OptionsPopup","selectedNote","open","setOpen","saveAndExit","exportThread","threadCollectionSwap","openOccurrences","moveToTheExtremity","trigger","className","size","onClick","nested","modal","thread","length","collection","removeFrom","structure","dashboard","idx","findIndex","id","selectedNoteId","newStruct","removeElementAt","addStructures","oldStruct","setNotesUpdating","threadsOrColl","oldValues","newValues","flatMap","note","includes","toAdd","toRem","currentNote","notes","get","value","push","linkThreadNotes","backupNote","openedWorkspaceId","workspaceIds","SorterPopup","threadOptions","values","label","getCaption","collectionOptions","useState","selectedThreads","setSelectedThreads","selectedCollections","setSelectedCollections","options","onChange","newThreads","valueRenderer","hasSelectAll","ClearSelectedIcon","newCollections","style","height","Mousetrap","require","EditorFooter","setCurrentPage","updateNote","editorState","deleteNote","darkMode","setBackColor","packDashboard","editorRef","useEffect","current","editor","prevBinding","keyboard","bindings","pop","addBinding","key","shortKey","handler","replace","initialPinned","pinned","isPinned","setIsPinned","openSorter","setOpenSorter","hasChanged","setHasChanged","pin","doUpdate","SHAREDMEX","closingEditor","text","createThumbnail","currOrPrevNoteDecice","setPreview","preview","branches","attachedImg","bind","e","preventDefault","returnValue","color","transform","ColorPicker","window","confirm","Quill","register","ImageCompress","ImageResize","modules","toolbar","imageCompressor","maxWidth","maxHeight","imageType","debug","history","delay","maxStack","userOnly","clipboard","matchVisual","imageResize","parchment","import","handleChange","delta","setEditorState","quill","ops","oldSelection","getSelection","oldPos","index","oldSelectionLength","undefined","setTimeout","console","log","setSelection","googleKeyboardWorkaround","TEXTLIMIT","getLength","retain","document","getElementsByClassName","scrollIntoView","block","toast","charLimit","NoteEditor","setDelayedNoteUpdate","initialState","initialColor","colorPreview","backColor","backupState","setBackupState","useRef","isMounted","useIsMounted","metaOrMedia","callbackFunction","beforeFunction","focus","ios","editorObj","fontSize","backgroundImage","backgroundColor","zoom","theme","placeholder","ref","scrollingContainer"],"mappings":"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","file":"static/js/8.926d29ee.chunk.js","sourcesContent":["/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nOptionsPopup component\nTiny component that defines the options popup of the editor\nIt appears when the three dots are clicked\n*/\n\nimport { FiMoreVertical } from \"react-icons/fi\"\nimport Popup from \"reactjs-popup\"\nimport React from 'react'\n\nconst OptionsPopup = ({\n    selectedNote,\n    open,\n    setOpen,\n    saveAndExit,\n    exportThread,\n    threadCollectionSwap,\n    openOccurrences,\n    moveToTheExtremity\n}) => {\n\n    return (\n        <Popup trigger={\n            <div>\n                <FiMoreVertical\n                    className='tools-btn'\n                    size='1.5em'\n                    onClick={()=>setOpen(true)}\n                />   \n            </div>\n        } \n        nested\n        modal\n        open={open} \n        >   \n            <div className='menu-popup'>\n\n                <button \n                    className='popup-btn tools-btn'\n                    onClick={() => {openOccurrences(); saveAndExit()}}\n                >\n                    Show Threads or Collections that contain this Note\n                </button>\n\n                <button \n                    className='popup-btn tools-btn'\n                    onClick={() => {moveToTheExtremity(true); saveAndExit(true)}}\n                >\n                    Save and move to the end of the Search\n                </button>\n\n                <button \n                    className='popup-btn tools-btn'\n                    onClick={() => {moveToTheExtremity(); saveAndExit(true)}}\n                >\n                    Save and move to the beginning of the Search\n                </button>\n\n                {selectedNote.thread.length ?\n                    <div>\n\n                        <button \n                            className='popup-btn tools-btn'\n                            onClick={() => exportThread()}\n                        >\n                            Print or Export whole Thread\n                        </button>\n\n                        <button \n                            className='popup-btn tools-btn'\n                            onClick={() => threadCollectionSwap(true)}\n                        >\n                            Convert Thread to Collection\n                        </button>\n\n                    </div> \n                    : \n                    (selectedNote.collection.length ?\n                        <div>\n\n                            <button \n                                className='popup-btn tools-btn'\n                                onClick={() => threadCollectionSwap(false)}\n                            >\n                                Convert Collection to Thread\n                            </button>\n\n                        </div>\n                    : null)\n                }\n            </div>\n        </Popup>\n    )\n}\nexport default OptionsPopup","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nSortingPopup\nhelps the used put the note in the correct threads or collections\nstraight from the editor\n*/\n\nimport Popup from \"reactjs-popup\"\nimport React, { useState } from 'react'\nimport { MultiSelect } from \"react-multi-select-component\";\nimport { BsFolderPlus } from 'react-icons/bs'\nimport { getCaption, removeElementAt } from \"../helpers/DashboardUtils\";\nimport { linkThreadNotes } from \"../helpers/NotesManupulation\";\nimport { backupNote } from \"../helpers/RequestsMakers\";\n\n// get the difference between the current tick box selection and the previous\nconst getDifference = (oldValues, newValues) => {\n\n    // notes that have been added\n    const toAdd = newValues.flatMap((note) => \n        oldValues.includes(note) ? [] : note\n    )\n\n    // notes that have been removed\n    const toRem = oldValues.flatMap((note) => \n        newValues.includes(note) ? [] : note\n    )\n\n    return [toAdd, toRem]\n}\n\n// removes a note from a thread or a collection based on what structure is given\nconst removeFrom = (structure, dashboard) => {\n    const idx = structure.findIndex(id => id===dashboard.selectedNoteId)\n    var newStruct = structure\n    if(idx!==-1){\n        newStruct = removeElementAt(structure, idx)\n    }\n    return newStruct\n}\n\n// adds or removes from threads or collection based on what has been selected by the user\nconst addStructures = (dashboard, newStruct, oldStruct, setNotesUpdating, threadsOrColl) => {\n\n    // get the changes\n    const [toAdd, toRem] = getDifference(oldStruct, newStruct)\n\n    // if anything was added, add\n    for(const note of toAdd){\n        const currentNote = dashboard.notes.get(note.value)\n        if(threadsOrColl){\n            currentNote.thread.push(dashboard.selectedNoteId)\n            linkThreadNotes(dashboard, currentNote.thread, setNotesUpdating)\n        }\n        else{\n            currentNote.collection.push(dashboard.selectedNoteId)\n        }\n\n        // backup the note containing the thread\n        backupNote(currentNote, \"meta\", setNotesUpdating)\n        \n        // update the workspace if needed\n        if(currentNote.id===dashboard.openedWorkspaceId){\n            if(threadsOrColl){\n                dashboard.workspaceIds = [...currentNote.thread]\n            }\n            else{\n                dashboard.workspaceIds = [...currentNote.collection]\n            }\n        }\n    }\n\n    // if anything was removed, remove\n    for(const note of toRem){\n        const currentNote = dashboard.notes.get(note.value)\n        if(threadsOrColl){\n            currentNote.thread = removeFrom(currentNote.thread, dashboard)\n            linkThreadNotes(dashboard, currentNote.thread, setNotesUpdating)\n        }\n        else{\n            currentNote.collection = removeFrom(currentNote.collection, dashboard)\n        }\n\n        // backup the note containing the collection\n        backupNote(currentNote, \"meta\", setNotesUpdating)\n\n        // update the workspace if needed\n        if(currentNote.id===dashboard.openedWorkspaceId){\n            if(threadsOrColl){\n                dashboard.workspaceIds = [...currentNote.thread]\n            }\n            else{\n                dashboard.workspaceIds = [...currentNote.collection]\n            }\n        }\n    }\n\n    return true\n}\n\nconst SorterPopup = ({\n    selectedNote,\n    open,\n    setOpen,\n    dashboard,\n    setNotesUpdating\n    \n}) => {\n\n    const threadOptions = [...dashboard.notes.values()].flatMap(\n        (note) => note.thread.length && note.id!==selectedNote.id ? {label: getCaption(note), value: note.id} : [])\n\n    const collectionOptions = [...dashboard.notes.values()].flatMap(\n        (note) => note.collection.length && note.id!==selectedNote.id ? {label: getCaption(note), value: note.id} : [])\n\n    const [selectedThreads, setSelectedThreads] = useState(\n        threadOptions.flatMap((note) => dashboard.notes.get(note.value).thread.includes(selectedNote.id) ? note : [])\n    )\n\n    const [selectedCollections, setSelectedCollections] = useState(\n        collectionOptions.flatMap((note) => dashboard.notes.get(note.value).collection.includes(selectedNote.id) ? note : [])\n    )\n\n    return (\n\n        <Popup trigger={\n            <div>\n                <BsFolderPlus\n                    className='tools-btn'\n                    size='1.5em'\n                    onClick={()=>setOpen(true)}\n                />   \n            </div>\n        } \n        modal\n        open={open}\n        >   \n                <div className='sorter'>\n                    \n                    <MultiSelect\n                        className=\"sorter-btn sb1\"\n                        options={threadOptions}\n                        value={selectedThreads}\n                        onChange={(newThreads) => addStructures(dashboard, newThreads, selectedThreads, setNotesUpdating, true) \n                            && setSelectedThreads(newThreads)\n                        }\n                        valueRenderer={() => {return \"Threads containing this note\"}}\n                        hasSelectAll={false}\n                        ClearSelectedIcon={\" \"}\n                    />\n\n                    <MultiSelect\n                        className=\"sorter-btn sb2\"\n                        options={collectionOptions}\n                        value={selectedCollections}\n                        onChange={(newCollections) => addStructures(dashboard, newCollections, selectedCollections, setNotesUpdating)\n                            && setSelectedCollections(newCollections)\n                        }\n                        valueRenderer={() => {return \"Collections containing this note\"}}\n                        hasSelectAll={false}\n                        ClearSelectedIcon={\" \"}\n                    />\n\n                    <div onClick={()=>setOpen(false)} style={{height: \"150px\"}}></div>\n\n                </div>\n        </Popup>\n    )\n}\nexport default SorterPopup","/*\nAuthor: Nicola Mendini\nDate: 11/09/2021\nThinkyThreads Project\nEditorFooter component\nDefines the buttons of the footer and calls the respective functions\n*/\n\nimport { AiOutlinePushpin, AiFillPushpin }  from 'react-icons/ai'\nimport { BsTrash } from 'react-icons/bs'\nimport { useEffect, useState } from 'react';\nimport {IoIosArrowRoundBack} from 'react-icons/io'\nimport ColorPicker from './ColorPicker';\nimport OptionsPopup from './OptionsPopup';\nimport { createThumbnail, setPreview } from '../helpers/DashboardUtils';\nimport React from 'react'\nimport { currOrPrevNoteDecice } from '../helpers/DashboardUtils';\nimport { SHAREDMEX } from './Dashboard';\nimport SorterPopup from './SorterPopup';\n\nconst Mousetrap = require('mousetrap')\n\n// Editor footer component\n// takes setCurrentPage to go back to the notes page when editing is finished\n// the selected note, two functions to update or delete the note\n// the editorState that contains the html\n// the function to set the background color of a note and \n// a function to export the threas as PDF or to print\nconst EditorFooter = ({\n    setCurrentPage,\n    selectedNote,\n    updateNote,\n    editorState,\n    deleteNote,\n    darkMode,\n    exportThread,\n    setBackColor,\n    threadCollectionSwap,\n    moveToTheExtremity,\n    dashboard,\n    openOccurrences,\n    packDashboard,\n    editorRef,\n    setNotesUpdating\n\n}) => {\n\n    useEffect(() => {\n        // code snippet to update the binding each time the user types\n        // otherwise the note would not update with the correct editor state\n        if(editorRef && editorRef.current && editorRef.current.editor){\n            const prevBinding = editorRef.current.editor.keyboard.bindings[83]\n            if(prevBinding){\n                prevBinding.pop()\n            }\n            editorRef.current.editor.keyboard.addBinding({\n                key: 's',\n                shortKey: true,\n                handler: () => editorState.replace(/<[^>]*>?/gm, '') && saveAndExit()\n                }\n            )\n        }\n    // eslint-disable-next-line\n    }, [editorRef, editorState])\n\n    var initialPinned = ''\n    if(selectedNote){\n        initialPinned = selectedNote.pinned\n    }\n\n    // State that defines whether the note is pinned, used to show the \n    // change in the pin icon\n    const [isPinned, setIsPinned] = useState(initialPinned)\n    // State to define whether the popup options have been opened through the\n    // three dots button\n    const [open, setOpen] = useState(false)\n    // or through the sorter\n    const [openSorter, setOpenSorter] = useState(false)\n    // Check if the editing note has changed\n    const [hasChanged, setHasChanged] = useState(false)\n\n    // Function to pin the note\n    const pin = () => {\n        setHasChanged(true)\n        selectedNote.pinned = !selectedNote.pinned\n        setIsPinned(selectedNote.pinned)\n    }\n\n    // Function to save and exit the note when the back arrow is pressed\n    const saveAndExit = (doUpdate) => {\n        SHAREDMEX.closingEditor = true\n        if(selectedNote.text===editorState && !hasChanged && editorState!=='' && !doUpdate){\n            setCurrentPage('notes')\n            createThumbnail(selectedNote)\n            currOrPrevNoteDecice(dashboard)\n            packDashboard({...dashboard})\n            return\n        }\n\n        // Set the note text to be the editor state and compute the preview\n        selectedNote.text = editorState\n        setPreview(selectedNote)\n\n        // If the note has no text, thread, collection, branches, images,\n        // delete it\n        if(\n        selectedNote.preview === 'empty note kept for its links' &&\n        !selectedNote.thread.length &&\n        !selectedNote.collection.length &&\n        !selectedNote.branches.length &&\n        !selectedNote.attachedImg\n        ){\n            deleteNote(selectedNote.id)\n            setCurrentPage('notes')\n        }\n\n        // Otherwise save it and go back to the notes page\n        else{\n            updateNote(selectedNote)\n            setCurrentPage('notes')\n        }\n    }\n\n    // Function called when the delete button is pressed\n    const callDelete = () => {\n        if(window.confirm('Delete the note?')){\n            deleteNote(selectedNote.id)\n            setCurrentPage('notes')\n        }\n    }\n\n    // Binding the keyboard gesture that allows the user to save with ctrl+s\n    Mousetrap.bind(['ctrl+s', 'meta+s'], function(e) {\n        if (e.preventDefault) {\n            e.preventDefault()\n        } else {\n            // internet explorer\n            e.returnValue = false;\n        }\n        editorState.replace(/<img .*?>/gm, '0').replace(/<[^>]*>?/gm, '') && saveAndExit()\n    })\n\n    return(\n\n        <div>\n\n            <div className='page-footer' style={{\n                color: darkMode ? '#636363' : '#171717'\n                }}\n            >\n\n                <IoIosArrowRoundBack\n                    className='tools-btn'\n                    onClick={() => saveAndExit()}\n                    size='2.5em'\n                />\n\n                {!isPinned ?\n                    <AiOutlinePushpin\n                        className='tools-btn'\n                        onClick={() => pin()}\n                        size='1.75em'\n                    /> :\n                    <AiFillPushpin\n                        className='tools-btn'\n                        onClick={() => pin()}\n                        size='1.75em'\n                        style={{transform:'rotate(-45deg)'}}\n                    /> \n                }\n\n                <ColorPicker \n                    selectedNote={selectedNote}\n                    setBackColor={setBackColor}\n                    setHasChanged={setHasChanged}\n                />\n\n                <SorterPopup\n                    selectedNote={selectedNote}\n                    open={openSorter}\n                    setOpen={setOpenSorter}\n                    dashboard={dashboard}\n                    setNotesUpdating={setNotesUpdating}\n                />\n\n                <BsTrash\n                    className='tools-btn'\n                    onClick={() => callDelete()}\n                    size='1.65em'\n                />\n\n                <OptionsPopup \n                    selectedNote={selectedNote}\n                    open={open}\n                    setOpen={setOpen}\n                    saveAndExit={saveAndExit}\n                    exportThread={exportThread}\n                    threadCollectionSwap={threadCollectionSwap}\n                    openOccurrences={openOccurrences}\n                    moveToTheExtremity={moveToTheExtremity}\n                />          \n\n            </div>\n\n\n        </div>\n    );\n}\n\nexport default EditorFooter;","/*\nAuthor: Nicola Mendini\nDate: 11/2021\nThinkyThreads Project\nEditor component\nInitialises the Quill rich text editor\nwith its own toolbar and defines the action of the footer bar\n*/\n\nimport React, { useEffect } from 'react';\nimport ReactQuill, {Quill} from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport {useState, useRef} from \"react\"\nimport EditorFooter from \"./EditorFooter\"\nimport ImageCompress from 'quill-image-compress';\nimport ImageResize from '@taoqf/quill-image-resize-module'\nimport { SHAREDMEX, TEXTLIMIT } from './Dashboard';\nimport { charLimit } from '../helpers/Messages';\nimport { setPreview } from '../helpers/DashboardUtils';\nimport { toast } from 'react-toastify';\n\nconst notify = () => toast(charLimit);\n\n\n// Register the imageCompressor and resizer\nQuill.register(\"modules/imageCompressor\", ImageCompress);\nQuill.register('modules/imageResize', ImageResize);\n\n// Define what elements to have in the editor toolbar and in what order\nconst modules = {\n    toolbar: [ \n            //{ 'size': ['small', 'normal', 'large'] },\n            { 'header': '1' },\n            { 'header': '2' },\n            'bold', \n            'italic', \n            'underline',\n            'strike',\n            {'list': 'ordered'}, \n            {'list': 'bullet'},\n            { 'align': [] }, \n            { 'color': [] }, \n            { 'background': [] },\n            'image',\n            'code-block',\n            'formula',\n            'blockquote',\n            'link'\n        ],\n    \n    // Image compressor props, kicks in automatically if max size is exceeded\n    imageCompressor: {\n          maxWidth: 800,\n          maxHeight: 800,\n          imageType: 'image/jpeg',\n          debug: false,\n    },\n\n    history: {\n        delay: 2000,\n        maxStack: 500,\n        userOnly: true\n    },\n\n    clipboard: {\n        matchVisual: false\n    },\n\n    imageResize: {\n        parchment: Quill.import('parchment'),\n        modules: [ 'Resize', 'DisplaySize' ]\n    }\n}\n\n// Function needed to solve a bug of Android keyboard with Quill editor\n// taken from https://github.com/quilljs/quill/issues/3240#issuecomment-849679016\n// Basically, the cursor position was not going newline when pressing enter\n// Massive thank you albertaleksieiev!\nconst googleKeyboardWorkaround = (delta, editor) => {\n\n    // retrieves the editors selection\n    var ops = delta['ops']\n    var oldSelection = editor.getSelection()\n    if(oldSelection){\n        var oldPos = oldSelection.index\n        var oldSelectionLength = oldSelection.length\n\n        // only applies the workaround if the last operation performed is not one of the following\n        if (\n        ops[0][\"retain\"] === undefined || \n        !ops[1] || \n        !ops[1][\"insert\"] || \n        !ops[1][\"insert\"] || \n        ops[1][\"insert\"] !== \"\\n\" || \n        oldSelectionLength > 0\n        ) {\n            return\n        }\n\n        // applies the workaround if a space has been pressed and the cursor has not \n        // moved within 30 milliseconds\n        setTimeout(function () {\n            var newPos = editor.getSelection().index\n            if (newPos === oldPos) {\n            console.log(\"Change selection bad pos\")\n            editor.setSelection(editor.getSelection().index + 1, 0)\n            }\n        }, 30);\n    }\n}\n\n// Function that updates the editor state\n// takes the new value of the editor (the html of the text)\n// the delta, which is a more comprehensive state of the editor which\n// includes the operations performed, the editorRef that is used to \n// access the getSelection method and the setEditorState function that updates the \n// local state variable of this component\nconst handleChange = (value, delta, editorRef, setEditorState) => {\n\n    // if the editor has finished initialising\n    if(editorRef.current){\n\n        // apply the workaround\n        const quill = editorRef.current.editor\n        googleKeyboardWorkaround(delta, quill);\n\n        // if the length of the note exceeds the maximum limit\n        // don't save any further text and send an alert\n        if(value.length < TEXTLIMIT){\n            setEditorState(value)\n\n            // auto scroll when typing at the bottom of the page, needed to fix a quill bug\n            if(quill.getLength()===delta.ops[0].retain+2){\n                document.getElementsByClassName('ql-editor')[0].scrollIntoView({block: 'end'})\n            }\n        }\n        else{\n            notify()\n        }\n    } \n}\n\nfunction useIsMounted() {\n    const isMounted = useRef(false);\n  \n    useEffect(() => {\n      isMounted.current = true;\n      return () => isMounted.current = false;\n    }, []);\n  \n    return isMounted;\n}\n\n// NoteEditor component definition\n// takes a function setCurrentPage that allows it to go back to the notes\n// pace once editing is done, the selectedNote to edit, an updateNote function\n// to actualise the update, a deleteNote function to delete the note if the \n// note is empty, the darkMode flad and the export thread function\nconst NoteEditor = ({ \n    setCurrentPage, \n    dashboard, \n    updateNote, \n    deleteNote, \n    darkMode,\n    exportThread,\n    threadCollectionSwap,\n    moveToTheExtremity,\n    openOccurrences,\n    packDashboard,\n    setDelayedNoteUpdate,\n    setNotesUpdating\n\n}) => {\n\n    const selectedNote = dashboard.notes.get(dashboard.selectedNoteId)\n    var initialState = ''\n    var initialColor = {color: '', colorPreview: ''}\n\n    if(selectedNote && selectedNote.text){\n        initialState = selectedNote.text \n        initialColor.color = selectedNote.color\n        initialColor.colorPreview = selectedNote.colorPreview\n    }\n\n    // State of the editor, contains the html of the text that is being inserted by the user\n    const [editorState, setEditorState] = useState(initialState)\n    // State that stores the background color of a note\n    const [backColor, setBackColor] = useState(initialColor)\n    const [backupState, setBackupState] = useState(true)\n    // Reference to the Quill object so that it is possible to access its methods\n    const editorRef = useRef(null)\n\n    const isMounted = useIsMounted();\n\n    useEffect(() => {\n        if(editorState && selectedNote && selectedNote.text!==editorState){\n            setBackupState(false)\n            setDelayedNoteUpdate({\n                note: selectedNote, \n                delay: 2000, \n                metaOrMedia: 'media', \n                callbackFunction: () => {isMounted.current && setBackupState(true)},\n                beforeFunction: () => {selectedNote.text=editorState; setPreview(selectedNote)}\n            })\n        }\n    // eslint-disable-next-line\n    }, [editorState])\n\n    // put the cursor on the editor\n    useEffect(() => {\n        if(editorRef && !editorState){\n            editorRef.current.editor.focus()\n        }\n\n        if(SHAREDMEX.ios){\n            const editorObj = document.getElementsByClassName('ql-editor')[0]\n            if(editorObj){\n                editorObj.style.fontSize = '16px'\n            }\n        }\n    // eslint-disable-next-line\n    },[])\n\n    useEffect(() => {\n        const toolbar = document.getElementsByClassName('ql-toolbar')[0]\n        if(toolbar){\n            const style = darkMode ? (backColor.color!=='#ffffff' ? \n                {backgroundImage: 'linear-gradient(20deg, #171717 90%, ' + (backColor.colorPreview || '#171717') + ' 90%)', color: 'white'} \n                : {backgroundColor: '#171717', color: 'white'}) :\n                {backgroundColor: backColor.color || '#ffffff'}\n\n            toolbar.style.backgroundImage = style.backgroundImage\n            toolbar.style.color = style.color\n            toolbar.style.backgroundColor = style.backgroundColor\n    }\n    // eslint-disable-next-line\n    },[backColor])\n\n    return (\n            <div \n                className='container'\n                style={ darkMode ?\n                {backgroundColor: '#171717', color: 'white'} \n                :                \n                {backgroundColor: backColor.color}\n                }\n            >            \n\n                <div className=\"editor no-scrollbar\" id=\"editor\">\n                    <ReactQuill \n                        style={{zoom: 1.4}}\n                        theme=\"snow\"\n                        value={editorState}\n                        onChange={(value, delta) => {handleChange(value, delta, editorRef, setEditorState)}}\n                        modules={modules}\n                        placeholder={'Write your next idea here...'}\n                        ref={editorRef}\n                        scrollingContainer={'#editor'}\n                    />\n                </div>\n\n                <div className='saved-changes'>\n                    {!backupState ? 'Unsaved changes...' : 'All changes have been saved'}\n                </div>\n\n                <EditorFooter \n                    setCurrentPage={setCurrentPage} \n                    selectedNote={selectedNote}\n                    updateNote={updateNote}\n                    editorState={editorState}\n                    deleteNote={deleteNote}\n                    darkMode={darkMode}\n                    exportThread={exportThread}\n                    setBackColor={setBackColor}\n                    threadCollectionSwap={threadCollectionSwap}\n                    moveToTheExtremity={moveToTheExtremity}\n                    dashboard={dashboard}\n                    openOccurrences={openOccurrences}\n                    packDashboard={packDashboard}\n                    editorRef={editorRef}\n                    setNotesUpdating={setNotesUpdating}\n                    />\n            </div>\n        )\n      }\n\nexport default NoteEditor"],"sourceRoot":""}