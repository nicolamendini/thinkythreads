{"version":3,"sources":["components/OptionsPopup.js","components/EditorFooter.js","components/Editor.js"],"names":["OptionsPopup","selectedNote","open","setOpen","saveAndExit","exportThread","threadCollectionSwap","openOccurrences","moveToTheExtremity","trigger","className","size","onClick","nested","modal","thread","length","collection","Mousetrap","require","EditorFooter","currentPage","setCurrentPage","updateNote","editorState","deleteNote","darkMode","setBackColor","dashboard","packDashboard","editorRef","initialPinned","pinned","useState","isPinned","setIsPinned","hasChanged","setHasChanged","pin","doUpdate","packIt","text","createThumbnail","currOrPrevNoteDecice","setPreview","preview","branches","attachedImg","id","bind","e","preventDefault","returnValue","replace","current","editor","prevBinding","keyboard","bindings","pop","addBinding","key","shortKey","handler","style","color","transform","ColorPicker","window","confirm","Quill","register","ImageCompress","ImageResize","modules","toolbar","imageCompressor","maxWidth","maxHeight","imageType","debug","history","delay","maxStack","userOnly","clipboard","matchVisual","imageResize","parchment","import","handleChange","value","delta","setEditorState","ops","oldSelection","getSelection","oldPos","index","oldSelectionLength","undefined","setTimeout","console","log","setSelection","googleKeyboardWorkaround","TEXTLIMIT","alert","charLimit","NoteEditor","notes","get","selectedNoteId","initialState","initialColor","colorPreview","backColor","useRef","backgroundColor","backgroundImage","zoom","theme","onChange","placeholder","ref","scrollingContainer"],"mappings":"sOAmGeA,EAtFM,SAAC,GASf,IARHC,EAQE,EARFA,aACAC,EAOE,EAPFA,KACAC,EAME,EANFA,QACAC,EAKE,EALFA,YACAC,EAIE,EAJFA,aACAC,EAGE,EAHFA,qBACAC,EAEE,EAFFA,gBACAC,EACE,EADFA,mBAGA,OACI,cAAC,IAAD,CAAOC,QACH,8BACI,cAAC,IAAD,CACIC,UAAU,YACVC,KAAK,QACLC,QAAS,kBAAIT,GAAQ,QAIjCU,QAAM,EACNC,OAAK,EACLZ,KAAMA,EAXN,SAaI,qBAAKQ,UAAU,UAAUE,QAAS,kBAAMT,GAAQ,IAAhD,SACI,sBAAKO,UAAU,mBAAf,UAEI,wBACIA,UAAU,sBACVE,QAAS,WAAOL,IAAmBH,GAAY,GAAO,IAF1D,gEAOA,wBACIM,UAAU,sBACVE,QAAS,WAAOJ,GAAmB,GAAOJ,GAAY,IAF1D,oDAOA,wBACIM,UAAU,sBACVE,QAAS,WAAOJ,IAAsBJ,GAAY,IAFtD,0DAOCH,EAAac,OAAOC,OACjB,gCAEI,wBACIN,UAAU,sBACVE,QAAS,kBAAMP,KAFnB,0CAOA,wBACIK,UAAU,sBACVE,QAAS,kBAAMN,GAAqB,IAFxC,6CASHL,EAAagB,WAAWD,OACrB,8BAEI,wBACIN,UAAU,sBACVE,QAAS,kBAAMN,GAAqB,IAFxC,4CAQN,a,eC1EpBY,EAAYC,EAAQ,KA6KXC,EArKM,SAAC,GAgBhB,EAfFC,YAeG,IAdHC,EAcE,EAdFA,eACArB,EAaE,EAbFA,aACAsB,EAYE,EAZFA,WACAC,EAWE,EAXFA,YACAC,EAUE,EAVFA,WACAC,EASE,EATFA,SACArB,EAQE,EARFA,aACAsB,EAOE,EAPFA,aACArB,EAME,EANFA,qBACAE,EAKE,EALFA,mBACAoB,EAIE,EAJFA,UACArB,EAGE,EAHFA,gBACAsB,EAEE,EAFFA,cACAC,EACE,EADFA,UAGIC,EAAgB,GACjB9B,IACC8B,EAAgB9B,EAAa+B,QAJ/B,MAS8BC,mBAASF,GATvC,mBASKG,EATL,KASeC,EATf,OAYsBF,oBAAS,GAZ/B,mBAYK/B,EAZL,KAYWC,EAZX,OAckC8B,oBAAS,GAd3C,mBAcKG,EAdL,KAciBC,EAdjB,KAiBIC,EAAM,WACRD,GAAc,GACdpC,EAAa+B,QAAU/B,EAAa+B,OACpCG,EAAYlC,EAAa+B,SAIvB5B,EAAc,SAACmC,EAAUC,GAC3B,GAAGvC,EAAawC,OAAOjB,IAAgBY,GAA4B,KAAdZ,IAAqBe,EAOtE,OANAjB,EAAe,SACfoB,YAAgBzC,GAChB0C,YAAqBf,QAClBY,GACCX,EAAc,eAAID,IAAY,GAAO,IAM7C3B,EAAawC,KAAOjB,EACpBoB,YAAW3C,GAKc,kCAAzBA,EAAa4C,SACZ5C,EAAac,OAAOC,QACpBf,EAAagB,WAAWD,QACxBf,EAAa6C,SAAS9B,QACtBf,EAAa8C,aAQVxB,EAAWtB,GACXqB,EAAe,WAPfG,EAAWxB,EAAa+C,IACxB1B,EAAe,WA6BvB,GAVAJ,EAAU+B,KAAK,CAAC,SAAU,WAAW,SAASC,GACtCA,EAAEC,eACFD,EAAEC,iBAGFD,EAAEE,aAAc,EAEpB5B,EAAY6B,QAAQ,aAAc,KAAOjD,OAG1C0B,GAAaA,EAAUwB,SAAWxB,EAAUwB,QAAQC,OAAO,CAC1D,IAAMC,EAAc1B,EAAUwB,QAAQC,OAAOE,SAASC,SAAS,IAC5DF,GACCA,EAAYG,MAEhB7B,EAAUwB,QAAQC,OAAOE,SAASG,WAAW,CACzCC,IAAK,IACLC,UAAU,EACVC,QAAS,kBAAMvC,EAAY6B,QAAQ,aAAc,KAAOjD,OAKhE,OAEI,8BACI,sBAAKM,UAAU,cAAcsD,MAAO,CAChCC,MAAOvC,EAAW,UAAY,WADlC,UAKI,cAAC,IAAD,CACIhB,UAAU,YACVE,QAAS,kBAAMR,KACfO,KAAK,UAGPuB,EAME,cAAC,IAAD,CACIxB,UAAU,YACVE,QAAS,kBAAM0B,KACf3B,KAAK,SACLqD,MAAO,CAACE,UAAU,oBATtB,cAAC,IAAD,CACIxD,UAAU,YACVE,QAAS,kBAAM0B,KACf3B,KAAK,WAUb,cAACwD,EAAA,EAAD,CACIlE,aAAcA,EACd0B,aAAcA,EACdU,cAAeA,IAGnB,cAAC,IAAD,CACI3B,UAAU,YACVE,QAAS,WAlElBwD,OAAOC,QAAQ,+CACd5C,EAAWxB,EAAa+C,IACxB1B,EAAe,WAiEPX,KAAK,WAGT,cAAC,EAAD,CACIV,aAAcA,EACdC,KAAMA,EACNC,QAASA,EACTC,YAAaA,EACbC,aAAcA,EACdC,qBAAsBA,EACtBC,gBAAiBA,EACjBC,mBAAoBA,U,oDCjKxC8D,QAAMC,SAAS,0BAA2BC,KAC1CF,QAAMC,SAAS,sBAAuBE,KAGtC,IAAMC,EAAU,CACZC,QAAS,CAED,CAAE,OAAU,KACZ,CAAE,OAAU,KACZ,OACA,SACA,YACA,SACA,CAAE,MAAS,IACX,CAAE,WAAc,IAChB,CAAC,KAAQ,WACT,CAAC,KAAQ,UACT,CAAE,MAAS,IACX,QACA,aACA,UACA,aACA,QAIRC,gBAAiB,CACXC,SAAU,IACVC,UAAW,IACXC,UAAW,aACXC,OAAO,GAGbC,QAAS,CACLC,MAAO,IACPC,SAAU,IACVC,UAAU,GAGdC,UAAW,CACPC,aAAa,GAGjBC,YAAa,CACTC,UAAWlB,QAAMmB,OAAO,aACxBf,QAAS,CAAE,SAAU,iBA+CvBgB,EAAe,SAACC,EAAOC,EAAO9D,EAAW+D,GAGxC/D,EAAUwB,WA1CgB,SAACsC,EAAOrC,GAGrC,IAAIuC,EAAMF,EAAK,IACXG,EAAexC,EAAOyC,eAC1B,GAAGD,EAAa,CACZ,IAAIE,EAASF,EAAaG,MACtBC,EAAqBJ,EAAa/E,OAGtC,QACqBoF,IAArBN,EAAI,GAAJ,SACCA,EAAI,KACJA,EAAI,GAAJ,SACAA,EAAI,GAAJ,QACoB,OAArBA,EAAI,GAAJ,QACAK,EAAqB,EAEjB,OAKJE,YAAW,WACM9C,EAAOyC,eAAeE,QACpBD,IACfK,QAAQC,IAAI,4BACZhD,EAAOiD,aAAajD,EAAOyC,eAAeE,MAAQ,EAAG,MAEtD,KAiBHO,CAAyBb,EADX9D,EAAUwB,QAAQC,QAK7BoC,EAAM3E,OAAS0F,IACdb,EAAeF,GAGfgB,MAAMC,OA4FHC,UAlFI,SAAC,GAYb,IAXHxF,EAWE,EAXFA,YACAC,EAUE,EAVFA,eACAM,EASE,EATFA,UACAL,EAQE,EARFA,WACAE,EAOE,EAPFA,WACAC,EAME,EANFA,SACArB,EAKE,EALFA,aACAC,EAIE,EAJFA,qBACAE,EAGE,EAHFA,mBACAD,EAEE,EAFFA,gBACAsB,EACE,EADFA,cAGM5B,EAAe2B,EAAUkF,MAAMC,IAAInF,EAAUoF,gBAC/CC,EAAe,GACfC,EAAe,CAACjD,MAAO,GAAIkD,aAAc,IAE1ClH,GAAgBA,EAAawC,OAC5BwE,EAAehH,EAAawC,KAC5ByE,EAAajD,MAAQhE,EAAagE,MAClCiD,EAAaC,aAAelH,EAAakH,cAT3C,MAaoClF,mBAASgF,GAb7C,mBAaKzF,EAbL,KAakBqE,EAblB,OAegC5D,mBAASiF,GAfzC,mBAeKE,EAfL,KAegBzF,EAfhB,KAiBIG,EAAYuF,iBAAO,MAEzB,OACQ,sBACI3G,UAAU,YACVsD,MAAQtC,EACR,CAAC4F,gBAAiB,UAAWrD,MAAO,SAEpC,CAACqD,gBAAiBF,EAAUnD,OALhC,UAQA,qBACIvD,UAAU,aACVsD,MAAQtC,EAA8B,YAAlB0F,EAAUnD,MAC1B,CAACsD,gBAAiB,uCAAyCH,EAAUD,aAAe,QAASlD,MAAO,SAClG,CAACqD,gBAAiB,UAAWrD,MAAO,SACtC,CAACqD,gBAAiBF,EAAUnD,SAGhC,qBAAKvD,UAAU,sBAAsBsC,GAAG,SAAxC,SACI,cAAC,IAAD,CACIgB,MAAO,CAACwD,KAAM,KACdC,MAAM,OACN9B,MAAOnE,EACPkG,SAAU,SAAC/B,EAAOC,GAAR,OAAkBF,EAAaC,EAAOC,EAAO9D,EAAW+D,IAClEnB,QAASA,EACTiD,YAAa,+BACbC,IAAK9F,EACL+F,mBAAoB,cAI5B,cAAC,EAAD,CACIxG,YAAaA,EACbC,eAAgBA,EAChBrB,aAAcA,EACdsB,WAAYA,EACZC,YAAaA,EACbC,WAAYA,EACZC,SAAUA,EACVrB,aAAcA,EACdsB,aAAcA,EACdrB,qBAAsBA,EACtBE,mBAAoBA,EACpBoB,UAAWA,EACXrB,gBAAiBA,EACjBsB,cAAeA,EACfC,UAAWA","file":"static/js/8.1a046112.chunk.js","sourcesContent":["/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nOptionsPopup component\nTiny component that defines the options popup of the editor\nIt appears when the three dots are clicked\n*/\n\nimport { FiMoreVertical } from \"react-icons/fi\"\nimport Popup from \"reactjs-popup\"\nimport React from 'react'\n\nconst OptionsPopup = ({\n    selectedNote,\n    open,\n    setOpen,\n    saveAndExit,\n    exportThread,\n    threadCollectionSwap,\n    openOccurrences,\n    moveToTheExtremity\n}) => {\n\n    return (\n        <Popup trigger={\n            <div>\n                <FiMoreVertical\n                    className='tools-btn'\n                    size='1.5em'\n                    onClick={()=>setOpen(true)}\n                />   \n            </div>\n        } \n        nested\n        modal\n        open={open} \n        >   \n            <div className='blurrer' onClick={() => setOpen(false)}>\n                <div className='modal menu-popup'>\n\n                    <button \n                        className='popup-btn tools-btn'\n                        onClick={() => {openOccurrences(); saveAndExit(false, true)}}\n                    >\n                        Show Threads or Collections that contain this Note\n                    </button>\n\n                    <button \n                        className='popup-btn tools-btn'\n                        onClick={() => {moveToTheExtremity(true); saveAndExit(true)}}\n                    >\n                        Save and move to the end of the Search\n                    </button>\n\n                    <button \n                        className='popup-btn tools-btn'\n                        onClick={() => {moveToTheExtremity(); saveAndExit(true)}}\n                    >\n                        Save and move to the beginning of the Search\n                    </button>\n\n                    {selectedNote.thread.length ?\n                        <div>\n\n                            <button \n                                className='popup-btn tools-btn'\n                                onClick={() => exportThread()}\n                            >\n                                Print or Export whole Thread\n                            </button>\n\n                            <button \n                                className='popup-btn tools-btn'\n                                onClick={() => threadCollectionSwap(true)}\n                            >\n                                Convert Thread to Collection\n                            </button>\n\n                        </div> \n                        : \n                        (selectedNote.collection.length ?\n                            <div>\n\n                                <button \n                                    className='popup-btn tools-btn'\n                                    onClick={() => threadCollectionSwap(false)}\n                                >\n                                    Convert Collection to Thread\n                                </button>\n\n                            </div>\n                        : null)\n                    }\n                </div>\n            </div>\n        </Popup>\n    )\n}\nexport default OptionsPopup","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nEditorFooter component\nDefines the buttons of the footer and calls the respective functions\n*/\n\nimport { AiOutlinePushpin, AiFillPushpin }  from 'react-icons/ai'\nimport { BsTrash } from 'react-icons/bs'\nimport { useState } from 'react';\nimport {IoIosArrowRoundBack} from 'react-icons/io'\nimport ColorPicker from './ColorPicker';\nimport OptionsPopup from './OptionsPopup';\nimport { createThumbnail, setPreview } from '../helpers/DashboardUtils';\nimport React from 'react'\nimport { currOrPrevNoteDecice } from '../helpers/DashboardPacker';\n\nconst Mousetrap = require('mousetrap')\n\n// Editor footer component\n// takes setCurrentPage to go back to the notes page when editing is finished\n// the selected note, two functions to update or delete the note\n// the editorState that contains the html\n// the function to set the background color of a note and \n// a function to export the threas as PDF or to print\nconst EditorFooter = ({\n    currentPage,\n    setCurrentPage,\n    selectedNote,\n    updateNote,\n    editorState,\n    deleteNote,\n    darkMode,\n    exportThread,\n    setBackColor,\n    threadCollectionSwap,\n    moveToTheExtremity,\n    dashboard,\n    openOccurrences,\n    packDashboard,\n    editorRef\n}) => {\n\n    var initialPinned = ''\n    if(selectedNote){\n        initialPinned = selectedNote.pinned\n    }\n\n    // State that defines whether the note is pinned, used to show the \n    // change in the pin icon\n    const [isPinned, setIsPinned] = useState(initialPinned)\n    // State to define whether the popup options have been opened through the\n    // three dots button\n    const [open, setOpen] = useState(false)\n    // Check if the editing note has changed\n    const [hasChanged, setHasChanged] = useState(false)\n\n    // Function to pin the note\n    const pin = () => {\n        setHasChanged(true)\n        selectedNote.pinned = !selectedNote.pinned\n        setIsPinned(selectedNote.pinned)\n    }\n\n    // Function to save and exit the note when the back arrow is pressed\n    const saveAndExit = (doUpdate, packIt) => {\n        if(selectedNote.text===editorState && !hasChanged && editorState!=='' && !doUpdate){\n            setCurrentPage('notes')\n            createThumbnail(selectedNote)\n            currOrPrevNoteDecice(dashboard)\n            if(packIt){\n                packDashboard({...dashboard}, false, true)\n            }\n            return\n        }\n\n        // Set the note text to be the editor state and compute the preview\n        selectedNote.text = editorState\n        setPreview(selectedNote)\n\n        // If the note has no text, thread, collection, branches, images,\n        // delete it\n        if(\n        selectedNote.preview === 'empty note kept for its links' &&\n        !selectedNote.thread.length &&\n        !selectedNote.collection.length &&\n        !selectedNote.branches.length &&\n        !selectedNote.attachedImg\n        ){\n            deleteNote(selectedNote.id)\n            setCurrentPage('notes')\n        }\n\n        // Otherwise save it and go back to the notes page\n        else{\n            updateNote(selectedNote)\n            setCurrentPage('notes')\n        }\n    }\n\n    // Function called when the delete button is pressed\n    const callDelete = () => {\n        if(window.confirm('Are you sure you want to delete the note?')){\n            deleteNote(selectedNote.id)\n            setCurrentPage('notes')\n        }\n    }\n\n    \n    Mousetrap.bind(['ctrl+s', 'meta+s'], function(e) {\n        if (e.preventDefault) {\n            e.preventDefault()\n        } else {\n            // internet explorer\n            e.returnValue = false;\n        }\n        editorState.replace(/<[^>]*>?/gm, '') && saveAndExit()\n    })\n\n    if(editorRef && editorRef.current && editorRef.current.editor){\n        const prevBinding = editorRef.current.editor.keyboard.bindings[83]\n        if(prevBinding){\n            prevBinding.pop()\n        }\n        editorRef.current.editor.keyboard.addBinding({\n            key: 's',\n            shortKey: true,\n            handler: () => editorState.replace(/<[^>]*>?/gm, '') && saveAndExit()\n            }\n        )\n    }\n\n    return(\n\n        <div>\n            <div className='page-footer' style={{\n                color: darkMode ? '#636363' : '#171717'\n                }}\n            >\n\n                <IoIosArrowRoundBack\n                    className='tools-btn'\n                    onClick={() => saveAndExit()}\n                    size='2.5em'\n                />\n\n                {!isPinned ?\n                    <AiOutlinePushpin\n                        className='tools-btn'\n                        onClick={() => pin()}\n                        size='1.75em'\n                    /> :\n                    <AiFillPushpin\n                        className='tools-btn'\n                        onClick={() => pin()}\n                        size='1.75em'\n                        style={{transform:'rotate(-45deg)'}}\n                    /> \n                }\n\n                <ColorPicker \n                    selectedNote={selectedNote}\n                    setBackColor={setBackColor}\n                    setHasChanged={setHasChanged}\n                />\n\n                <BsTrash\n                    className='tools-btn'\n                    onClick={() => callDelete()}\n                    size='1.65em'\n                />         \n\n                <OptionsPopup \n                    selectedNote={selectedNote}\n                    open={open}\n                    setOpen={setOpen}\n                    saveAndExit={saveAndExit}\n                    exportThread={exportThread}\n                    threadCollectionSwap={threadCollectionSwap}\n                    openOccurrences={openOccurrences}\n                    moveToTheExtremity={moveToTheExtremity}\n                />          \n\n            </div>\n\n\n        </div>\n    );\n}\n\nexport default EditorFooter;","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nEditor component\nInitialises the Quill rich text editor\nwith its own toolbar and defines the action of the footer bar\n*/\n\nimport React from 'react';\nimport ReactQuill, {Quill} from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport {useState, useRef} from \"react\"\nimport EditorFooter from \"./EditorFooter\"\nimport ImageCompress from 'quill-image-compress';\nimport ImageResize from '@taoqf/quill-image-resize-module'\nimport { TEXTLIMIT } from './Dashboard';\nimport { charLimit } from '../helpers/Messages';\n\n// Register the imageCompressor and resizer\nQuill.register(\"modules/imageCompressor\", ImageCompress);\nQuill.register('modules/imageResize', ImageResize);\n\n// Define what elements to have in the editor toolbar and in what order\nconst modules = {\n    toolbar: [ \n            //{ 'size': ['small', 'normal', 'large'] },\n            { 'header': '1' },\n            { 'header': '2' },\n            'bold', \n            'italic', \n            'underline',\n            'strike',\n            { 'color': [] }, \n            { 'background': [] },\n            {'list': 'ordered'}, \n            {'list': 'bullet'},\n            { 'align': [] }, \n            'image',\n            'code-block',\n            'formula',\n            'blockquote',\n            'link'\n        ],\n    \n    // Image compressor props, kicks in automatically if max size is exceeded\n    imageCompressor: {\n          maxWidth: 800,\n          maxHeight: 800,\n          imageType: 'image/jpeg',\n          debug: false,\n    },\n\n    history: {\n        delay: 2000,\n        maxStack: 500,\n        userOnly: true\n    },\n\n    clipboard: {\n        matchVisual: false\n    },\n\n    imageResize: {\n        parchment: Quill.import('parchment'),\n        modules: [ 'Resize', 'DisplaySize' ]\n    }\n}\n\n// Function needed to solve a bug of Android keyboard with Quill editor\n// taken from https://github.com/quilljs/quill/issues/3240#issuecomment-849679016\n// Basically, the cursor position was not going newline when pressing enter\n// Massive thank you albertaleksieiev!\nconst googleKeyboardWorkaround = (delta, editor) => {\n\n    // retrieves the editors selection\n    var ops = delta['ops']\n    var oldSelection = editor.getSelection()\n    if(oldSelection){\n        var oldPos = oldSelection.index\n        var oldSelectionLength = oldSelection.length\n\n        // only applies the workaround if the last operation performed is not one of the following\n        if (\n        ops[0][\"retain\"] === undefined || \n        !ops[1] || \n        !ops[1][\"insert\"] || \n        !ops[1][\"insert\"] || \n        ops[1][\"insert\"] !== \"\\n\" || \n        oldSelectionLength > 0\n        ) {\n            return\n        }\n\n        // applies the workaround if a space has been pressed and the cursor has not \n        // moved within 30 milliseconds\n        setTimeout(function () {\n            var newPos = editor.getSelection().index\n            if (newPos === oldPos) {\n            console.log(\"Change selection bad pos\")\n            editor.setSelection(editor.getSelection().index + 1, 0)\n            }\n        }, 30);\n    }\n}\n\n// Function that updates the editor state\n// takes the new value of the editor (the html of the text)\n// the delta, which is a more comprehensive state of the editor which\n// includes the operations performed, the editorRef that is used to \n// access the getSelection method and the setEditorState function that updates the \n// local state variable of this component\nconst handleChange = (value, delta, editorRef, setEditorState) => {\n\n    // if the editor has finished initialising\n    if(editorRef.current){\n\n        // apply the workaround\n        const quill = editorRef.current.editor\n        googleKeyboardWorkaround(delta, quill);\n\n        // if the length of the note exceeds the maximum limit\n        // don't save any further text and send an alert\n        if(value.length < TEXTLIMIT){\n            setEditorState(value)\n        }\n        else{\n            alert(charLimit)\n        }\n    } \n}\n\n// NoteEditor component definition\n// takes a function setCurrentPage that allows it to go back to the notes\n// pace once editing is done, the selectedNote to edit, an updateNote function\n// to actualise the update, a deleteNote function to delete the note if the \n// note is empty, the darkMode flad and the export thread function\nconst NoteEditor = ({ \n    currentPage,\n    setCurrentPage, \n    dashboard, \n    updateNote, \n    deleteNote, \n    darkMode,\n    exportThread,\n    threadCollectionSwap,\n    moveToTheExtremity,\n    openOccurrences,\n    packDashboard\n}) => {\n\n    const selectedNote = dashboard.notes.get(dashboard.selectedNoteId)\n    var initialState = ''\n    var initialColor = {color: '', colorPreview: ''}\n\n    if(selectedNote && selectedNote.text){\n        initialState = selectedNote.text \n        initialColor.color = selectedNote.color\n        initialColor.colorPreview = selectedNote.colorPreview\n    }\n\n    // State of the editor, contains the html of the text that is being inserted by the user\n    const [editorState, setEditorState] = useState(initialState)\n    // State that stores the background color of a note\n    const [backColor, setBackColor] = useState(initialColor)\n    // Reference to the Quill object so that it is possible to access its methods\n    const editorRef = useRef(null)\n\n    return (\n            <div \n                className='container'\n                style={ darkMode ?\n                {backgroundColor: '#171717', color: 'white'} \n                :                \n                {backgroundColor: backColor.color}\n                }\n            >            \n            <div\n                className='color-flag'\n                style={ darkMode ? (backColor.color!=='#ffffff' ? \n                    {backgroundImage: 'linear-gradient(20deg, #171717 90%, ' + backColor.colorPreview + ' 90%)', color: 'white'} \n                    : {backgroundColor: '#171717', color: 'white'}) :\n                    {backgroundColor: backColor.color}\n                }\n            ></div>\n                <div className=\"editor no-scrollbar\" id=\"editor\">\n                    <ReactQuill \n                        style={{zoom: 1.4}}\n                        theme=\"snow\"\n                        value={editorState}\n                        onChange={(value, delta) => handleChange(value, delta, editorRef, setEditorState)}\n                        modules={modules}\n                        placeholder={'Write your next idea here...'}\n                        ref={editorRef}\n                        scrollingContainer={'#editor'}\n                    />\n                </div>\n\n                <EditorFooter \n                    currentPage={currentPage}\n                    setCurrentPage={setCurrentPage} \n                    selectedNote={selectedNote}\n                    updateNote={updateNote}\n                    editorState={editorState}\n                    deleteNote={deleteNote}\n                    darkMode={darkMode}\n                    exportThread={exportThread}\n                    setBackColor={setBackColor}\n                    threadCollectionSwap={threadCollectionSwap}\n                    moveToTheExtremity={moveToTheExtremity}\n                    dashboard={dashboard}\n                    openOccurrences={openOccurrences}\n                    packDashboard={packDashboard}\n                    editorRef={editorRef}\n                    />\n            </div>\n        );\n      }\n\nexport default NoteEditor;"],"sourceRoot":""}