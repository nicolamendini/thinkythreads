{"version":3,"sources":["components/ColorPicker.js","components/Footer.js","components/SearchBar.js","components/SearchLabel.js","components/Note.js","components/Wrapper.js","components/NotesList.js","components/SearchArea.js","components/WorkspaceLabel.js","components/WorkspaceArea.js","components/LinksArea.js","components/NotesDragContext.js","components/NotesPage.js"],"names":["ColorPicker","selectedNote","setBackColor","setHasChanged","searchProps","setSearchProps","trigger","className","style","color","colorFilter","undefined","fontSize","size","nested","modal","position","onChange","searchText","threadFilter","collectionFilter","hex","colorPreview","setColor","colors","triangle","Footer","threadOrCollectionManage","threadOrCollection","setRootsOrBranches","rootsOrBranches","setDarkMode","mergeMode","setMergeMode","setCurrentPage","notesUpdating","loadedUser","synchNotes","darkMode","darkModeSwitch","window","localStorage","setItem","previousDarkMode","borderTop","backgroundColor","background","boxShadow","onClick","transform","previous","alert","mergeModeOn","type","height","width","driveNotConnected","SearchBar","isDropDisabled","droppableId","provided","snapshot","droppableProps","ref","innerRef","placeholder","event","target","value","toLowerCase","isDraggingOver","margin","SearchLabel","closeCollection","dashboard","openedCollectionId","getCaption","notes","get","Note","note","areaName","index","handleNotePress","openEditor","draggableId","ui_id","id","name","draggableProps","dragHandleProps","onDoubleClick","backgroundImage","border","isDropAnimating","pinned","thread","length","collection","branches","roots","attachedImg","text","dangerouslySetInnerHTML","__html","preview","Wrapper","notesLength","draggableInfo","sourceArea","find","minWidth","SLICESIZE","NotesList","handleAddNote","workspaceFlag","useState","sessionStorage","getItem","parseInt","currentSlice","setCurrentSlice","isVisible","setIsVisible","useEffect","slicedNotes","slice","scrollSucceded","focusPos","targetElement","document","getElementById","scrollIntoView","inline","align","dir","prop","visibility","direction","map","SearchArea","addNote","selectNote","search","selectedNoteId","WorkspaceLabel","closeAndSave","openedWorkspaceId","workspaceIds","WorkspaceArea","workspace","LinksArea","links","NoteDragContext","handleOnDragEnd","setDraggableInfo","onDragEnd","onDragStart","start","navigator","vibrate","source","sourceIndex","noteFound","NotesPage","GAPIloaded","currentUser"],"mappings":"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","file":"static/js/9.e9f68aa2.chunk.js","sourcesContent":["/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nColorPicker component\nImplements the color picker element of the \nrich text editor. Used to select the color \nfor the note from a selection of pastel colors\n*/\n\nimport { GithubPicker } from \"react-color\"\nimport { BsDropletHalf } from \"react-icons/bs\"\nimport Popup from \"reactjs-popup\"\n\n// Utils function needed to set the color through a switch\n// Takes the chosen color, the current selected note and \n// A function to set the state of the editor\nconst setColor = (color, selectedNote, setBackColor, setHasChanged, setSearchProps) => {\n\n    // Only used if the picker is in the dashboard\n    if(setSearchProps){\n        setSearchProps(\n            (searchProps) => ({\n                searchText: searchProps.searchText, \n                threadFilter: searchProps.threadFilter, \n                collectionFilter: searchProps.collectionFilter,\n                colorFilter: color.hex\n            })\n        )\n        return \n    }\n\n    setHasChanged(true)\n    selectedNote.colorPreview = color.hex;\n\n    switch(color.hex) {\n        case '#b80000':\n            selectedNote.color = '#EB9694'\n            break;\n        case '#db3e00':\n            selectedNote.color = '#FAD0C3'\n            break;\n        case '#fccb00':\n            selectedNote.color = '#FEF3BD'\n            break;\n        case '#008b02':\n            selectedNote.color = '#C1E1C5'\n            break;\n        case '#006b76':\n            selectedNote.color = '#BEDADC'\n            break;\n        case '#1273de':\n            selectedNote.color = '#C4DEF6'\n            break;\n        case '#5300eb':\n            selectedNote.color = '#d4c4fb'\n            break;\n        case '#ededed':\n            selectedNote.color = '#ffffff'\n            break;\n        default:\n            break\n    }\n    setBackColor({color: selectedNote.color, colorPreview: selectedNote.colorPreview})\n}\n\n// Color Picker component\n// Takes the current selected note and \n//a function to set the color state of the editor\nconst ColorPicker = ({\n    selectedNote,\n    setBackColor,\n    setHasChanged,\n    searchProps,\n    setSearchProps\n}) => {\n\n    return (\n        <Popup\n            trigger={\n                <div className='tools-btn' style={{color : searchProps ? searchProps.colorFilter : undefined, fontSize: '19px'}}>\n                    {searchProps ? '⬤' :\n                        <BsDropletHalf\n                            size='1.6em'\n                        />\n                    }\n                </div>\n            } \n            nested\n            modal\n            position='right'\n        >\n            <div className='picker'>\n                <GithubPicker \n                    onChange={(color)=> setColor(color, selectedNote, setBackColor, setHasChanged, setSearchProps)}\n                    colors={['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#5300EB', '#EDEDED']}\n                    triangle='hide'\n                />\n            </div>\n        </Popup>\n    )\n}\nexport default ColorPicker","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nEditorFooter component\nDefines the buttons of the footer and calls the respective functions\n*/\n\nimport { FcIdea, FcSettings, FcParallelTasks, FcBrokenLink, FcLink, FcImport, FcCheckmark, FcCancel} from 'react-icons/fc'\nimport { AiOutlineDisconnect, AiOutlineLink, AiOutlineImport, AiOutlineStop } from 'react-icons/ai';\nimport { GoLightBulb } from 'react-icons/go'\nimport { VscSettingsGear, VscCheck, VscSync } from 'react-icons/vsc';\nimport { IoIosGitBranch } from 'react-icons/io';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport { driveNotConnected, mergeModeOn } from '../helpers/Messages';\nimport React from 'react'\n\n// Footer component\n// takes the threadOrCollection state and a function to change it,\n// rootsOrBranches state and a function to chage it,\n// a function to switch the darkMode state\n// mergeMode state and a function to change it,\n// the selectedNote,\n// a function to change the current page, used to move to settings page,\n// the notesUpdating flag to show the animation\n// and the loadedUser flag to pass to the settings\n// Most of the props are used to show the correct icons and switch states\nconst Footer = ({\n    threadOrCollectionManage, \n    threadOrCollection, \n    setRootsOrBranches, \n    rootsOrBranches, \n    setDarkMode, \n    mergeMode, \n    setMergeMode,\n    selectedNote,\n    setCurrentPage,\n    notesUpdating,\n    loadedUser,\n    synchNotes,\n    darkMode\n}) => {\n\n    const darkModeSwitch = () =>{\n        window.localStorage.setItem('dark-mode', !darkMode)\n        setDarkMode((previousDarkMode) => !previousDarkMode)\n    }\n    return(\n        <div className='page-footer'\n            style={{\n                borderTop: darkMode ? '1px solid #2a2a2a' : '#dddddd',\n                backgroundColor: darkMode ? '#1e1e1e' : undefined,\n                background: darkMode ? undefined : 'linear-gradient(#eeeeee, white)',\n                boxShadow: darkMode ? undefined : '0 0 3px #bbbbbb'\n            }}\n        >\n            {darkMode ?\n                <VscSettingsGear\n                    className='tools-btn'\n                    onClick={() => setCurrentPage('settings')}\n                    size='2.5em'\n                    style={{transform: 'scale(0.75)'}}\n                />\n                :\n                <FcSettings\n                    className='tools-btn'\n                    onClick={() => setCurrentPage('settings')}\n                    size='2.5em'\n                />\n            }\n\n            {!threadOrCollection ? (\n                darkMode ? \n                    <AiOutlineDisconnect\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                        style={{transform: 'rotate(45deg) scale(0.85)'}}\n                    />\n                :\n                    <FcBrokenLink\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                    />\n            )\n            :\n            (\n                darkMode ?\n                    <AiOutlineLink\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                        style={{transform: 'rotate(45deg) scale(0.85)'}}\n                    />\n                :\n                    <FcLink\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                    />\n                )\n            }\n            {\n                darkMode ?\n                    <IoIosGitBranch\n                        onClick={() =>\n                            setRootsOrBranches(\n                                (previous) => !previous\n                            )\n                        }\n                        size='2em'\n                        className='tools-btn'\n                        style={!rootsOrBranches && {transform: 'scaleY(-1)'}}\n                    />\n                :\n                    <FcParallelTasks\n                        onClick={() =>\n                            setRootsOrBranches(\n                                (previous) => !previous\n                            )\n                        }\n                        size='2.3em'\n                        className='tools-btn'\n                        style={rootsOrBranches ? {transform: 'scaleY(-1) rotate(90deg)'} : {transform: 'rotate(90deg)'}}\n                    />\n            }\n\n            {selectedNote ?\n                darkMode ?\n                    <AiOutlineImport\n                        onClick={() =>{\n                                setMergeMode(\n                                    (previous) => !previous\n                                )\n                                if(!mergeMode){\n                                    alert(mergeModeOn)\n                                }\n                            }\n                        }\n                        size='1.8em'\n                        className='tools-btn'\n                        style={{transform:'scaleX(1.1) rotate(-90deg)'}}\n                    /> \n                :\n                    <FcImport\n                        onClick={() =>{\n                                setMergeMode(\n                                    (previous) => !previous\n                                )\n                                if(!mergeMode){\n                                    alert(mergeModeOn)\n                                }\n                            }\n                        }\n                        size='2.3em'\n                        className='tools-btn'\n                        style={{transform:'scaleY(1.15) rotate(-90deg)'}}\n                    />    \n            : null}\n\n            {darkMode ?\n                <GoLightBulb\n                    onClick={() => darkModeSwitch()}\n                    size='2.5em'\n                    className='tools-btn'\n                    style={{transform: 'scaleY(0.7) scaleX(0.7)'}}\n                />  \n            :\n                <FcIdea\n                onClick={() => darkModeSwitch()}\n                size='2.5em'\n                className='tools-btn'\n                />  \n            }\n\n            {loadedUser ? (\n                notesUpdating>0?\n\n                    darkMode ? \n                        <VscSync \n                            size='2em'\n                        /> \n                    :\n                        <Loader \n                            type=\"Circles\" \n                            color=\"#00BFFF\" \n                            height='1.8em'\n                            width='2.3em'\n                        /> \n\n                :\n\n                    darkMode ? \n                        <VscCheck\n                            size='2em'\n                            className='tools-btn'\n                            onClick={()=>synchNotes()}\n                            style={{transform: 'scaleY(0.85)'}}\n                        />\n                    :\n                        <FcCheckmark\n                            size='2.3em'\n                            className='tools-btn'\n                            onClick={()=>synchNotes()}\n                        />\n            ) :\n\n            darkMode ?\n                <AiOutlineStop\n                    size='1.8em'\n                    onClick={()=>alert(driveNotConnected)}\n                    style={{transform: 'scaleX(-1)'}}\n                />\n            :\n                <FcCancel\n                    size='2.3em'\n                    onClick={()=>alert(driveNotConnected)}\n                />\n            }\n\n        </div>\n    );\n}\n\nexport default Footer;","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nSearchBar component\n*/\n\nimport React from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { FcSearch } from 'react-icons/fc';\nimport { BiSearchAlt } from 'react-icons/bi'\nimport ColorPicker from './ColorPicker';\n\nconst SearchBar = ({ \n\tsetSearchProps, \n\tsearchProps ,\n\tisDropDisabled,\n\tdarkMode\n}) => {\n\n\treturn (\n\n\t\t<Droppable \n\t\t\tdroppableId={'search-bar'}\n\t\t\tisDropDisabled={isDropDisabled}\n\t\t>\n\t\t\t{(provided, snapshot) => (\n                <div \n                    className={darkMode ? 'search-dark' : 'search-bright'}\n                    {...provided.droppableProps} \n                    ref={provided.innerRef} \n\t\t\t\t>\n\t\t\t\t\t{darkMode ?\n\t\t\t\t\t\t<BiSearchAlt className='search-icons' size='2em' style={{transform: 'scale(0.8)'}}/>\n\t\t\t\t\t:\n\t\t\t\t\t\t<FcSearch className='search-icons' size='2em' />\n\t\t\t\t\t}\n\t\t\t\t\t{provided.placeholder}\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tonChange={(event) =>\n\t\t\t\t\t\t\tsetSearchProps({\n\t\t\t\t\t\t\t\tsearchText: event.target.value.toLowerCase(), \n\t\t\t\t\t\t\t\tthreadFilter: searchProps.threadFilter, \n\t\t\t\t\t\t\t\tcollectionFilter: searchProps.collectionFilter,\n\t\t\t\t\t\t\t\tcolorFilter: searchProps.colorFilter\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\tsnapshot.isDraggingOver ?\n\t\t\t\t\t\t\t\t'Work within this collection'\n\t\t\t\t\t\t\t: \n\t\t\t\t\t\t\t\t'Type to search'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tvalue={searchProps.searchText}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<span \n\t\t\t\t\t\tclassName='search-filter tools-btn' \n\t\t\t\t\t\tstyle={searchProps.threadFilter ?  {color:'red'} : {}}\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\tsetSearchProps({\n\t\t\t\t\t\t\t\tsearchText: searchProps.searchText, \n\t\t\t\t\t\t\t\tthreadFilter: !searchProps.threadFilter, \n\t\t\t\t\t\t\t\tcollectionFilter: searchProps.collectionFilter,\n\t\t\t\t\t\t\t\tcolorFilter: searchProps.colorFilter\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\tT\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<span \n\t\t\t\t\t\tclassName='search-filter tools-btn'\n\t\t\t\t\t\tstyle={searchProps.collectionFilter ? {color:'red'} : {}}\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\tsetSearchProps({\n\t\t\t\t\t\t\t\tsearchText: searchProps.searchText, \n\t\t\t\t\t\t\t\tthreadFilter: searchProps.threadFilter, \n\t\t\t\t\t\t\t\tcollectionFilter: !searchProps.collectionFilter,\n\t\t\t\t\t\t\t\tcolorFilter: searchProps.colorFilter\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\tC\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<span style={{margin: '0 5px 0 0'}}>\n\t\t\t\t\t\t<ColorPicker \n\t\t\t\t\t\t\tsetBackColor={{}}\n\t\t\t\t\t\t\tsetHasChanged={{}}\n\t\t\t\t\t\t\tsearchProps={searchProps}\n\t\t\t\t\t\t\tsetSearchProps={setSearchProps}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</span>\n\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t</Droppable>\n\t);\n};\n\nexport default SearchBar;\n","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nSearchLabel component\nGives information about the current state of the search\nand the filters applied to it\n*/\n\nimport React from 'react';\nimport { getCaption } from '../helpers/DashboardUtils';\nimport { VscChromeClose } from 'react-icons/vsc';\n\nconst SearchLabel = ({ \n    searchProps, \n    closeCollection, \n    dashboard,\n    darkMode\n}) => {\n\n    return(\n        <div className='stripe-label'>\n\n            <div className='stripe-not-overflow' style={{width: '80vw'}}>\n                NOTE FINDER  \n                {searchProps.threadFilter && ' - THREADS'} \n                {searchProps.collectionFilter && ' - COLLECTIONS'}\n                {\n                    dashboard.openedCollectionId && ' : ' + \n                    getCaption(dashboard.notes.get(dashboard.openedCollectionId))\n                }\n            </div>\n\n            {dashboard.openedCollectionId && \n                <div>\n                    <VscChromeClose \n                        size='2em'\n                        className='tools-btn close-btn'\n                        onClick={() => closeCollection()}\n                        color={darkMode ? 'white' : 'black'}\n                    />\n                </div>\n            }\n\n        </div>\n    )\n}\n\nexport default SearchLabel","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nNote component\nDefines the single note object and all the actions that are possible with it\n*/\n\nimport { Draggable } from 'react-beautiful-dnd';\nimport React from 'react';\nimport {RiPushpin2Fill} from 'react-icons/ri'\nimport { FaLink, FaFolder } from 'react-icons/fa'\nimport { ImTree } from 'react-icons/im'\nimport { FiPaperclip } from 'react-icons/fi'\n\n// Note component takes the note to show, \n// the name of the area it compares in,\n// the index of the note inside the sequence,\n// handleNotePress to select a note if it is pressed,\n// the darkMode, mergeMode, rootsOrBranches, threadOrCollection flags\n// the selectedNote,\n// the openEditor function to edit the note on double click\nconst Note = ({ \n\tnote, \n\tareaName, \n\tindex, \n\thandleNotePress, \n\tdarkMode, \n\tselectedNote,\n\tmergeMode,\n\topenEditor,\n\trootsOrBranches,\n\tthreadOrCollection\n\n}) => {\n\n\treturn (\n\n\t\t\t<Draggable key={note.ui_id} draggableId={note.ui_id} index={index}>\n\t\t\t\t{(provided, snapshot) => (\n\t\t\t\t\t\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<li \n\t\t\t\t\t\tclassName={\n\t\t\t\t\t\t\t(mergeMode && selectedNote.id===note.id && 'note no-scrollbar merge-mode')\n\t\t\t\t\t\t\t||\n\t\t\t\t\t\t\t(((darkMode && selectedNote && selectedNote.id===note.id) && \n\t\t\t\t\t\t\t\t'note note-dark no-scrollbar selected-note-dark') || \n\t\t\t\t\t\t\t((darkMode && (!selectedNote || selectedNote.id!==note.id)) && \n\t\t\t\t\t\t\t\t'note note-dark no-scrollbar') ||\n\t\t\t\t\t\t\t((!darkMode && selectedNote && selectedNote.id===note.id ) &&\n\t\t\t\t\t\t\t\t'note note-bright no-scrollbar selected-note') ||\n\t\t\t\t\t\t\t((!darkMode && (!selectedNote ||selectedNote.id!==note.id)) &&\n\t\t\t\t\t\t\t\t'note note-bright no-scrollbar')) \n\t\t\t\t\t\t}\n\t\t\t\t\t\tname={note.id}\n\t\t\t\t\t\tid={note.ui_id}\n\t\t\t\t\t\tref={provided.innerRef} \n\t\t\t\t\t\t{...provided.draggableProps}\n\t\t\t\t\t\t{...provided.dragHandleProps}\n\t\t\t\t\t\tonClick={()=> {handleNotePress(note)}}\n\t\t\t\t\t\tonDoubleClick={()=> openEditor(note)}\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t!(mergeMode && selectedNote.id===note.id) ? (\n\t\t\t\t\t\t\t\t!darkMode && note.color!=='#ffffff' ? \n\t\t\t\t\t\t\t\t\t(selectedNote && selectedNote.id===note.id ? \n\t\t\t\t\t\t\t\t\t\t{backgroundColor: note.color, ...provided.draggableProps.style} : \n\t\t\t\t\t\t\t\t\t{backgroundColor: note.color, border: '1px solid '+ note.color, ...provided.draggableProps.style}) : \n\t\t\t\t\t\t\t\t\t\t(note.color!=='#ffffff' ? \n\t\t\t\t\t\t\t\t\t\t\t{backgroundImage: 'linear-gradient(25deg, rgb(92, 92, 92) 92%, '+note.colorPreview + ' 92%)', ...provided.draggableProps.style} \n\t\t\t\t\t\t\t\t\t\t\t: provided.draggableProps.style))\n\t\t\t\t\t\t\t: provided.draggableProps.style\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{snapshot.isDropAnimating}\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{note.pinned && areaName==='search-area' &&\n\t\t\t\t\t\t\t\t\t<RiPushpin2Fill size='10px' className='header-icon'/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{note.thread.length ?\n\t\t\t\t\t\t\t\t\t<FaLink size='10px' className='header-icon'/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{note.collection.length ?\n\t\t\t\t\t\t\t\t\t<FaFolder size='10px' className='header-icon'/> : ''\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t{!rootsOrBranches && note.branches.length ?\n\t\t\t\t\t\t\t\t\t<ImTree size='10px' className='header-icon'/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{rootsOrBranches && note.roots.length ?\n\t\t\t\t\t\t\t\t\t<ImTree size='10px' className='header-icon' style={{transform: 'scaleY(-1)'}}\t/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{note.attachedImg && !note.attachedImg[2] ?\n\t\t\t\t\t\t\t\t\t<FiPaperclip size='10px' className='header-icon' style={{transform:'rotate(-45deg)'}}/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{(!note.attachedImg || !note.attachedImg[2]) ?\n\t\t\t\t\t\t\t\t<div className='note-content no-scrollbar' dangerouslySetInnerHTML={{__html: note.preview}}></div> : \n\t\t\t\t\t\t\t\t<div className='just-background-note' style={{backgroundImage: 'url('+ note.text +')'}}></div>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Draggable>\n\t);\n};\n\nexport default Note;\n","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nWrapper component\nUsed to wrap an unsaved thread inside an empty note\nor to expand the thread or collection contained in any\narbitrary note\n*/\n\nimport {Droppable} from 'react-beautiful-dnd';\nimport React from 'react'\n\nconst Wrapper = ({\n\tthreadOrCollection,\n    notesLength,\n    draggableInfo,\n    notes,\n    darkMode\n}) => {\n\n    // Disable dropping here unless the note comes from the search area\n    // and it is empty if you are trying to wrap an unsaved thread/collection\n    // or it is full if you are trying to expand it to show its content\n    const isDropDisabled = \n        draggableInfo.sourceArea!=='search-area' ||\n        (\n            notesLength>0 ? (\n\n                draggableInfo.note.thread.length>0 || \n                draggableInfo.note.collection.length>0\n            )\n            :\n            (\n                !draggableInfo.note.thread.length && \n                !draggableInfo.note.collection.length \n            )\n            \n        ) ||\n        (notes.find(note => note.id===draggableInfo.note.id)!==undefined)\n    \n    return (\n\n        <Droppable \n            droppableId='wrapper-area'\n            isDropDisabled={isDropDisabled}\n        >\n\n            {(provided, snapshot) => (\n                <div \n                    className='wrapper'\n                    {...provided.droppableProps} \n                    ref={provided.innerRef} \n                    style={ \n                        notesLength > 0 ? (\n                            {\n                            ...(\n                                darkMode ?\n                                    threadOrCollection ? {backgroundColor:'#fccb00', color:'black'} \n                                    : {backgroundColor:'#1273de', color:'white'}\n                                :\n                                    threadOrCollection ? {backgroundColor:'#fef3bd', color:'black'} \n                                    : {backgroundColor:'#c4def6', color:'black'}\n                            ), \n                            ...(!snapshot.isDraggingOver && {minWidth:\"8vh\"})\n                            })\n                        : \n                        darkMode ?\n                        {backgroundColor: '#2e2e2e', minWidth:\"8vh\", color: '#666666'}\n                        :\n                        {backgroundColor: '#f4f4f4', minWidth:\"8vh\", boxShadow: '1px 0px 1px #dddddd'}\n                    }\n                >\n\n                <div className='vertical-text'>{notesLength>0 ? 'WRAP' : 'drop to expand'}</div>\n\n                {provided.placeholder}\n\n                {\n                    snapshot.isDraggingOver?\n                    \n                        (notesLength > 0 ?\n                            (\n                                <div className='vertical-text'>\n                                    wrap <br></br> \n                                    {threadOrCollection ? ' thread ' : ' collection '}\n                                    <br></br> \n                                    inside note\n                                </div>\n                            ) \n                        :\n                            (\n                                <div className='vertical-text'>\n                                    expand\n                                    <br></br> \n                                    {draggableInfo.note.thread.length ? \n                                        'thread' : 'collection'\n                                    }\n                                </div>\n                            ) \n                        ) : null\n                }\n\n                </div>\n\n            )}\n\n        </Droppable>\n\n    )\n}\nexport default Wrapper","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nNotesList component\nDefines a general list of notes that acts as a Droppable\nin the framework of React Beautiful Dnd\n*/\n\nimport Note from './Note';\nimport {Droppable} from 'react-beautiful-dnd';\nimport { useEffect, useState } from 'react';\nimport {FcNext, FcPrevious, FcPlus} from 'react-icons/fc';\nimport { BsChevronRight, BsChevronLeft } from 'react-icons/bs';\nimport { BsPlusSquare } from 'react-icons/bs'\nimport Wrapper from './Wrapper';\nimport React from 'react'\n\n// Max size of a row of notes, it is necessary to press the arrow\n// button to access further notes\nconst SLICESIZE = 12;\n\nconst NotesList = ({\n\tnotes,\n\thandleAddNote,\n\tareaName,\n\thandleNotePress,\n\tdarkMode,\n\tselectedNote,\n\tmergeMode,\n\tthreadOrCollection,\n\topenEditor,\n\tworkspaceFlag, \n\trootsOrBranches,\n\tisDropDisabled,\n\tdraggableInfo\n}) => {\n\n\t// State that defines the slice the user is at\n\tconst [currentSlice, setCurrentSlice] = useState(\n\t\twindow.sessionStorage.getItem('current-slice-'+areaName) ? \n\t\tparseInt(window.sessionStorage.getItem('current-slice-'+areaName)) :\n\t\t0\n\t)\n\t// State to hide the NotesList until the scroll is performed, used to avoid flickering\n\tconst [isVisible, setIsVisible] = useState(false)\n\n\t// Effect to set back the scroll once exiting the editor\n\tuseEffect(() => {\n\t\tconst slicedNotes = notes.slice(currentSlice*SLICESIZE, (currentSlice+1)*SLICESIZE+SLICESIZE)\n\t\tvar scrollSucceded=false\n\n\t\t// If there is a selectedNote to scroll to, do it\n\t\tif(selectedNote){\n\t\t\tconst focusPos = slicedNotes.find(note => note.id === selectedNote.id)\n\t\t\tif(focusPos){\n\t\t\t\tconst targetElement = document.getElementById(focusPos.ui_id)\n\t\t\t\tif(targetElement){\n\t\t\t\t\ttargetElement.scrollIntoView({inline: 'center'})\n\t\t\t\t\tscrollSucceded=true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise, some search is performed but there are no notesin the current slices, go to slice 0\n\t\tif(!slicedNotes.length && currentSlice!==0 && !scrollSucceded && areaName==='search-area'){\n\t\t\tsetCurrentSlice(0)\n\t\t\twindow.sessionStorage.setItem('current-slice-'+areaName, 0)\n\t\t}\n\t\tsetIsVisible(true)\n\t// eslint-disable-next-line\n\t}, [notes])\n\n\t// Function used to change slice based on which arrow button has been pressed\n\tconst align = (dir) => {\n\n\t\t// Before changing slice, set up the autoscroll\n\t\t// Initialise a prop based on whether the button was next or prev\n\t\tconst prop = dir===-1 ? {inline:'start'} : {inline:'end'}\n\t\tvar focusPos = currentSlice*SLICESIZE+SLICESIZE-1\n\n\t\t// If overflows, go back to last note of the sequence\n\t\tif(focusPos>notes.length-1){\n\t\t\tfocusPos=notes.length-1\n\t\t}\n\n\t\t// scroll into the last note of the previous slice to give the idea of continuity \n\t\t// between slices\n\t\tdocument.getElementById(notes[focusPos].ui_id).scrollIntoView(prop);\n\t\tsetCurrentSlice(currentSlice+dir)\n\t\twindow.sessionStorage.setItem('current-slice-'+areaName, currentSlice+dir)\n\t}\n\n\tconst slicedNotes = notes.slice(currentSlice*SLICESIZE, (currentSlice+1)*SLICESIZE+SLICESIZE)\n\n\treturn (\n\n\t\t<div style={{visibility: isVisible ? 'visible' : 'hidden'}}>\n\n\t\t\t<Droppable \n\t\t\t\tdroppableId={areaName} \n\t\t\t\tdirection='horizontal' \n\t\t\t\tclassName='droppable-wrapper' \n\t\t\t\tisDropDisabled={isDropDisabled}\n\t\t\t>\n\n\t\t\t\t{(provided) => (\n\n\t\t\t\t\t<ul \n\t\t\t\t\t\tclassName='notes-list' \n\t\t\t\t\t\t{...provided.droppableProps} \n\t\t\t\t\t\tref={provided.innerRef} \n\t\t\t\t\t\tid={areaName}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{currentSlice>0 ?\n\t\t\t\t\t\t\t\t\tdarkMode ?\n\t\t\t\t\t\t\t\t\t\t<BsChevronLeft \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(-1)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t\tcolor='#666666'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t<FcPrevious \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(-1)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{(areaName==='workspace-area' && workspaceFlag) &&\n\n\t\t\t\t\t\t\t\t<Wrapper \n\t\t\t\t\t\t\t\t\tthreadOrCollection={threadOrCollection}\n\t\t\t\t\t\t\t\t\tnotesLength={notes.length}\n\t\t\t\t\t\t\t\t\tdraggableInfo={draggableInfo}\n\t\t\t\t\t\t\t\t\tnotes={notes}\n\t\t\t\t\t\t\t\t\tdarkMode={darkMode}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{(areaName==='search-area' && currentSlice===0) &&\n\t\t\t\t\t\t\t\t\t(darkMode ?\n\t\t\t\t\t\t\t\t\t<BsPlusSquare \n\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn add-btn'\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddNote()}\n\t\t\t\t\t\t\t\t\t\tsize='2.25em'\n\t\t\t\t\t\t\t\t\t\tcolor='#555555'\n\t\t\t\t\t\t\t\t\t\tstyle={{transform: 'scale(0.8)'}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t<FcPlus\n\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn add-btn'\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddNote()}\n\t\t\t\t\t\t\t\t\t\tsize='2.25em'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{slicedNotes.map((note, index) => (\n\n\t\t\t\t\t\t\t\t<Note\n\t\t\t\t\t\t\t\t\tkey={note.ui_id}\n\t\t\t\t\t\t\t\t\tnote={note}\n\t\t\t\t\t\t\t\t\tareaName={areaName}\n\t\t\t\t\t\t\t\t\tindex={index+currentSlice*SLICESIZE}\n\t\t\t\t\t\t\t\t\thandleNotePress={handleNotePress}\n\t\t\t\t\t\t\t\t\tdarkMode={darkMode}\n\t\t\t\t\t\t\t\t\tselectedNote={selectedNote}\n\t\t\t\t\t\t\t\t\tmergeMode={mergeMode}\n\t\t\t\t\t\t\t\t\topenEditor={openEditor}\n\t\t\t\t\t\t\t\t\trootsOrBranches={rootsOrBranches}\n\t\t\t\t\t\t\t\t\tthreadOrCollection={threadOrCollection}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t\t{provided.placeholder}\n\n\t\t\t\t\t\t\t<div> \n\t\t\t\t\t\t\t\t{(currentSlice+1)*SLICESIZE+SLICESIZE<notes.length ? \n\n\t\t\t\t\t\t\t\t\tdarkMode ?\n\t\t\t\t\t\t\t\t\t\t<BsChevronRight \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(1)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t\tcolor='#666666'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t<FcNext \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(1)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\n\t\t\t</Droppable>\n\t\t</div>\n\t);\n};\n\nexport default NotesList;\n","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nSearchArea component\nSearch Area that includes the searchBar, the Search Label\nand the notes list containing the results of the search\n*/\n\nimport React from 'react';\nimport SearchBar from './SearchBar';\nimport SearchLabel from './SearchLabel';\nimport NotesList from './NotesList';\n\nconst SearchArea = ({ \n    closeCollection, \n    dashboard, \n    darkMode, \n    addNote, \n    selectNote, \n    mergeMode, \n    threadOrCollection, \n    openEditor, \n    rootsOrBranches,\n    searchProps,\n    setSearchProps,\n    draggableInfo\n}) => {\n\n    // Dropping here is disabled unless the note comes from the \n    // search area itself and has a collection within it\n    // The gesture is used to expand it\n    const isDropDisabled = \n        draggableInfo.sourceArea!=='search-area' ||\n        !draggableInfo.note.collection.length\n\n    return(\n        <div>\n            <SearchBar \n                setSearchProps={setSearchProps} \n                searchProps={searchProps}\n                isDropDisabled={isDropDisabled}\n                darkMode={darkMode}\n            />\n\n            <div>\n                <SearchLabel \n                    searchProps={searchProps} \n                    closeCollection={closeCollection}\n                    dashboard={dashboard}\n                    darkMode={darkMode}\n                />\n                \n                <NotesList\n                    notes={dashboard.search}\n                    handleAddNote={addNote}\n                    areaName={'search-area'}\n                    handleNotePress={selectNote}\n                    darkMode={darkMode}\n                    selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                    mergeMode={mergeMode}\n                    threadOrCollection={threadOrCollection}\n                    openEditor={openEditor}\n                    rootsOrBranches={rootsOrBranches}\n                />\n            </div> \n        </div>\n    )\n}\n\nexport default SearchArea","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nWorkspaceLabel component\nGives information about the current state of the workspace\n*/\n\nimport React from 'react';\nimport { getCaption } from '../helpers/DashboardUtils';\nimport { VscChromeClose } from 'react-icons/vsc';\n\nconst WorkspaceLabel = ({ \n    dashboard,\n    threadOrCollection,\n    closeAndSave,\n    darkMode\n}) => {\n\nreturn(\n    <div className='stripe-label'>\n\n        <div className='stripe-not-overflow' style={{width: '80vw'}}>\n\n            CURRENT {threadOrCollection ? ' THREAD ' : ' COLLECTION '} \n            {dashboard.openedWorkspaceId ?\n                    ' : ' + getCaption(dashboard.notes.get(dashboard.openedWorkspaceId))\n                : (dashboard.workspaceIds.length ? \n                    (threadOrCollection ? ' : unsaved thread ' : ' : unsaved collection ') \n            : null)\n            }\n        </div>\n\n        {dashboard.workspaceIds.length || dashboard.openedWorkspaceId ?\n            <div>\n                <VscChromeClose \n                    size='2em'\n                    className='tools-btn close-btn'\n                    onClick={() => closeAndSave()}\n                    color={darkMode ? 'white' : 'black'}\n                />\n            </div>\n        : null}\n\n    </div>\n    )\n}\n\nexport default WorkspaceLabel","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nWorkspaceArea component\nContains the current workspace the user is working on\n*/\n\nimport React from 'react';\nimport NotesList from './NotesList';\nimport WorkspaceLabel from './WorkspaceLabel';\n\nconst WorkspaceArea = ({ \n    dashboard, \n    darkMode, \n    selectNote, \n    mergeMode, \n    threadOrCollection, \n    openEditor, \n    rootsOrBranches,\n    closeAndSave,\n    draggableInfo\n}) => { \n\n    return (\n        <div>\n\n            <WorkspaceLabel \n                dashboard={dashboard}\n                threadOrCollection={threadOrCollection}\n                closeAndSave={closeAndSave}\n                darkMode={darkMode}\n            />                \n\n            <NotesList\n                notes={dashboard.workspace}\n                areaName={'workspace-area'}\n                handleNotePress={selectNote}\n                darkMode={darkMode}\n                selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                workspaceFlag={!dashboard.openedWorkspaceId}\n                rootsOrBranches={rootsOrBranches}\n                draggableInfo={draggableInfo}\n            />\n\n        </div>\n    )\n}\n\nexport default WorkspaceArea","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nLinksArea component\nDefines the lowest row of notes of the dashboard\nwhich shows the links starting from/coming into the selectedNote\nBased of a rootsOrBranches flag\n*/\n\nimport React from 'react';\nimport NotesList from './NotesList';\nimport { getCaption } from '../helpers/DashboardUtils';\n\n// LinksArea component,\n// takes the dashboard to get the notes from,\n// The darkmode flag\n// some draggableInfo to know where the drags start from\nconst LinksArea = ({ \n    dashboard, \n    darkMode, \n    mergeMode, \n    threadOrCollection, \n    openEditor, \n    rootsOrBranches,\n    draggableInfo,\n    selectNote\n}) => { \n\n    const isDropDisabled = \n        draggableInfo.sourceArea==='workspace-area' ||\n        (draggableInfo.note && draggableInfo.note.id===dashboard.selectedNoteId)\n\n    return (\n        <div>\n\n            <label className='stripe-label stripe-not-overflow' style={{width: '90vw'}}>\n                {!rootsOrBranches ? ' BRANCHES' : ' ROOTS'}\n                {dashboard.selectedNoteId && ' - ' + getCaption(dashboard.notes.get(dashboard.selectedNoteId))} \n            </label>\n\n            <NotesList\n                notes={dashboard.links}\n                areaName={'branches-area'}\n                darkMode={darkMode}\n                handleNotePress={() => {}}\n                selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={!mergeMode ? (note) => {selectNote(note); openEditor()} : () => {}}\n                rootsOrBranches={rootsOrBranches}\n                isDropDisabled={isDropDisabled}\n            />\n\n        </div>\n    )\n}\n\nexport default LinksArea","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nNoteDragContext component\nDefines drag and drop context by using the React Beautiful DnD package\n*/\n\nimport React, { useState } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport SearchArea from './SearchArea';\nimport WorkspaceArea from './WorkspaceArea';\nimport LinksArea from './LinksArea';\n\n// Function that is called when a drag starts\n// Stores information about the note that has been moved and its\n// original position inside a state that then gets passed\nconst onDragStart = (start, dashboard, setDraggableInfo) => {\n\n    // give some short tactile feedback\n    if (window.navigator.vibrate) {\n        window.navigator.vibrate(25);\n    }\n\n    // Initialise the draggableInfo state\n    const draggableInfo = {}\n    const sourceArea = start.source.droppableId\n    draggableInfo.sourceArea = sourceArea\n    const sourceIndex = start.source.index\n    var noteFound = null\n\n    // return the note itself so that it is possible to access some \n    // of its properties, eg: the collection that it contains\n    // this is used for some special gestures such as the dragging\n    // into the searchBar gesture\n    if(sourceArea==='workspace-area'){\n        noteFound = dashboard.workspace[sourceIndex]\n    }\n    else if(sourceArea==='search-area'){\n        noteFound = dashboard.search[sourceIndex]\n    }\n    else if(sourceArea==='links-area'){\n        noteFound = dashboard.links[sourceIndex]\n    }\n    \n    if(noteFound){\n        draggableInfo.note = noteFound\n    }\n    setDraggableInfo(draggableInfo)\n}\n\nconst NoteDragContext = ({ \n    handleOnDragEnd,\n    closeCollection,\n    dashboard,\n    darkMode,\n    addNote,\n    selectNote,\n    mergeMode,\n    threadOrCollection,\n    openEditor,\n    rootsOrBranches,\n    closeAndSave,\n    searchProps,\n    setSearchProps\n}) => {\n\n    const [draggableInfo, setDraggableInfo] = useState({\n        sourceArea: '',\n        note: {id: null}\n    })\n\n    return(\n\n        <DragDropContext \n            onDragEnd={handleOnDragEnd} \n            onDragStart={(start) => onDragStart(start, dashboard, setDraggableInfo)}\n        >\n                \n            <SearchArea \n                closeCollection={closeCollection} \n                dashboard={dashboard} \n                darkMode={darkMode}\n                addNote={addNote}\n                selectNote={selectNote}\n                mergeMode={mergeMode} \n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                rootsOrBranches={rootsOrBranches}\n                searchProps={searchProps}\n                setSearchProps={setSearchProps}\n                draggableInfo={draggableInfo}\n            />                 \n\n            \n            <WorkspaceArea \n                dashboard={dashboard}\n                darkMode={darkMode}\n                selectNote={selectNote}\n                mergeMode={mergeMode} \n                threadOrCollection={threadOrCollection} \n                openEditor={openEditor} \n                rootsOrBranches={rootsOrBranches}\n                closeAndSave={closeAndSave}\n                draggableInfo={draggableInfo}\n            />\n\n            <LinksArea \n                dashboard={dashboard}\n                darkMode={darkMode}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                rootsOrBranches={rootsOrBranches}\n                draggableInfo={draggableInfo}\n                selectNote={selectNote}\n            />\n\n        </DragDropContext>\n    )\n}\nexport default NoteDragContext","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nNotesPage component\nMain notes page, as opposed to Editor page or settings page\nWraps the noteDragDropContext and the Footer\n*/\n\nimport React from 'react';\nimport Footer from './Footer'\nimport NoteDragContext from './NotesDragContext';\n\nconst NotesPage = ({ \n    darkMode,\n    dashboard,\n    handleOnDragEnd,\n    GAPIloaded,\n    currentUser,\n    setCurrentPage,\n    notesUpdating,\n    setDarkMode,\n    closeCollection,\n    addNote,\n    selectNote,\n    mergeMode,\n    setMergeMode,\n    openEditor,\n    rootsOrBranches,\n    closeAndSave,\n    threadOrCollection,\n    threadOrCollectionManage,\n    setRootsOrBranches,\n    searchProps,\n    setSearchProps,\n    synchNotes\n}) => {\n\n    return(\n\n        <div className={darkMode ? 'container dark-mode' : 'container'}>\n\n            <NoteDragContext \n                handleOnDragEnd={handleOnDragEnd}\n                closeCollection={closeCollection}\n                dashboard={dashboard}\n                darkMode={darkMode}\n                addNote={addNote}\n                selectNote={selectNote}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                rootsOrBranches={rootsOrBranches}\n                closeAndSave={closeAndSave}\n                searchProps={searchProps}\n                setSearchProps={setSearchProps}\n            />\n\n            <Footer \n                threadOrCollectionManage={threadOrCollectionManage}\n                threadOrCollection={threadOrCollection}\n                setRootsOrBranches={setRootsOrBranches}\n                rootsOrBranches={rootsOrBranches}\n                setDarkMode={setDarkMode}\n                mergeMode={mergeMode}\n                setMergeMode={setMergeMode}\n                selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                setCurrentPage={setCurrentPage}\n                notesUpdating={notesUpdating}\n                loadedUser={GAPIloaded && currentUser}\n                synchNotes={synchNotes}\n                darkMode={darkMode}\n            />\n            \n        </div>\n    )\n}\nexport default NotesPage"],"sourceRoot":""}