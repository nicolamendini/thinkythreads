{"version":3,"sources":["components/ColorPicker.js","components/OptionsPopup.js","components/EditorFooter.js","components/Editor.js"],"names":["ColorPicker","selectedNote","setBackColor","setHasChanged","searchProps","setSearchProps","trigger","className","style","color","colorFilter","undefined","fontSize","size","nested","modal","position","onChange","searchText","threadFilter","collectionFilter","hex","colorPreview","setColor","colors","triangle","OptionsPopup","open","setOpen","saveAndExit","exportThread","threadCollectionSwap","onClick","thread","length","collection","EditorFooter","setCurrentPage","updateNote","editorState","deleteNote","darkMode","moveToTheEnd","dashboard","useState","pinned","isPinned","setIsPinned","hasChanged","pin","action","moveToEndFlag","text","setPreview","preview","branches","attachedImg","id","createThumbnail","currOrPrevNoteDecice","transform","window","confirm","Quill","register","ImageCompress","ImageResize","modules","toolbar","imageCompressor","maxWidth","maxHeight","imageType","debug","history","delay","maxStack","userOnly","clipboard","matchVisual","imageResize","parchment","import","handleChange","value","delta","editorRef","setEditorState","current","editor","ops","oldSelection","getSelection","oldPos","index","oldSelectionLength","setTimeout","console","log","setSelection","googleKeyboardWorkaround","TEXTLIMIT","alert","charLimit","NoteEditor","notes","get","selectedNoteId","backColor","useRef","backgroundColor","backgroundImage","zoom","theme","placeholder","ref","scrollingContainer"],"mappings":"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","file":"static/js/8.7137c127.chunk.js","sourcesContent":["/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nColorPicker component\nImplements the color picker element of the \nrich text editor. Used to select the color \nfor the note from a selection of pastel colors\n*/\n\nimport { GithubPicker } from \"react-color\"\nimport { BsDropletHalf } from \"react-icons/bs\"\nimport Popup from \"reactjs-popup\"\n\n// Utils function needed to set the color through a switch\n// Takes the chosen color, the current selected note and \n// A function to set the state of the editor\nconst setColor = (color, selectedNote, setBackColor, setHasChanged, setSearchProps) => {\n\n    // Only used if the picker is in the dashboard\n    if(setSearchProps){\n        setSearchProps(\n            (searchProps) => ({\n                searchText: searchProps.searchText, \n                threadFilter: searchProps.threadFilter, \n                collectionFilter: searchProps.collectionFilter,\n                colorFilter: color.hex\n            })\n        )\n        return \n    }\n\n    setHasChanged(true)\n    selectedNote.colorPreview = color.hex;\n\n    switch(color.hex) {\n        case '#b80000':\n            selectedNote.color = '#EB9694'\n            break;\n        case '#db3e00':\n            selectedNote.color = '#FAD0C3'\n            break;\n        case '#fccb00':\n            selectedNote.color = '#FEF3BD'\n            break;\n        case '#008b02':\n            selectedNote.color = '#C1E1C5'\n            break;\n        case '#006b76':\n            selectedNote.color = '#BEDADC'\n            break;\n        case '#1273de':\n            selectedNote.color = '#C4DEF6'\n            break;\n        case '#5300eb':\n            selectedNote.color = '#d4c4fb'\n            break;\n        case '#ededed':\n            selectedNote.color = '#ffffff'\n            break;\n        default:\n            break\n    }\n    setBackColor({color: selectedNote.color, colorPreview: selectedNote.colorPreview})\n}\n\n// Color Picker component\n// Takes the current selected note and \n//a function to set the color state of the editor\nconst ColorPicker = ({\n    selectedNote,\n    setBackColor,\n    setHasChanged,\n    searchProps,\n    setSearchProps\n}) => {\n\n    return (\n        <Popup\n            trigger={\n                <div className='tools-btn' style={{color : searchProps ? searchProps.colorFilter : undefined, fontSize: '19px'}}>\n                    {searchProps ? 'â¬¤' :\n                        <BsDropletHalf\n                            size='1.6em'\n                        />\n                    }\n                </div>\n            } \n            nested\n            modal\n            position='right'\n        >\n            <div className='picker'>\n                <GithubPicker \n                    onChange={(color)=> setColor(color, selectedNote, setBackColor, setHasChanged, setSearchProps)}\n                    colors={['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', '#5300EB', '#EDEDED']}\n                    triangle='hide'\n                />\n            </div>\n        </Popup>\n    )\n}\nexport default ColorPicker","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nOptionsPopup component\nTiny component that defines the options popup of the editor\nIt appears when the three dots are clicked\n*/\n\nimport { FiMoreVertical } from \"react-icons/fi\"\nimport Popup from \"reactjs-popup\"\nimport React from 'react'\n\nconst OptionsPopup = ({\n    selectedNote,\n    open,\n    setOpen,\n    saveAndExit,\n    exportThread,\n    threadCollectionSwap\n}) => {\n\n    return (\n        <Popup trigger={\n            <div>\n                <FiMoreVertical\n                    className='tools-btn'\n                    size='1.5em'\n                    onClick={()=>setOpen(true)}\n                />   \n            </div>\n        } \n        nested\n        modal\n        open={open} \n        >   \n            <div className='blurrer' onClick={() => setOpen(false)}>\n                <div className='modal menu-popup'>\n\n                    <button \n                        className='popup-btn tools-btn'\n                        onClick={() => saveAndExit('get-occurrences')}\n                    >\n                        Show Threads or Collections that contain this Note\n                    </button>\n\n                    <button \n                        className='popup-btn tools-btn'\n                        onClick={() => saveAndExit('get-occurrences', true)}\n                    >\n                        Save and move at the end of the Search\n                    </button>\n\n                    {selectedNote.thread.length ?\n                        <div>\n\n                            <button \n                                className='popup-btn tools-btn'\n                                onClick={() => exportThread()}\n                            >\n                                Print or Export whole Thread\n                            </button>\n\n                            <button \n                                className='popup-btn tools-btn'\n                                onClick={() => threadCollectionSwap(true)}\n                            >\n                                Convert Thread to Collection\n                            </button>\n\n                        </div> \n                        : \n                        (selectedNote.collection.length ?\n                            <div>\n\n                                <button \n                                    className='popup-btn tools-btn'\n                                    onClick={() => threadCollectionSwap(false)}\n                                >\n                                    Convert Collection to Thread\n                                </button>\n\n                            </div>\n                        : null)\n                    }\n                </div>\n            </div>\n        </Popup>\n    )\n}\nexport default OptionsPopup","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nEditorFooter component\nDefines the buttons of the footer and calls the respective functions\n*/\n\nimport { AiOutlinePushpin, AiFillPushpin }  from 'react-icons/ai'\nimport { BsTrash } from 'react-icons/bs'\nimport { useState } from 'react';\nimport {IoIosArrowRoundBack} from 'react-icons/io'\nimport ColorPicker from './ColorPicker';\nimport OptionsPopup from './OptionsPopup';\nimport { createThumbnail, setPreview } from '../helpers/DashboardUtils';\nimport React from 'react'\nimport { currOrPrevNoteDecice } from '../helpers/DashboardPacker';\n\n// Editor footer component\n// takes setCurrentPage to go back to the notes page when editing is finished\n// the selected note, two functions to update or delete the note\n// the editorState that contains the html\n// the function to set the background color of a note and \n// a function to export the threas as PDF or to print\nconst EditorFooter = ({\n    setCurrentPage,\n    selectedNote,\n    updateNote,\n    editorState,\n    deleteNote,\n    darkMode,\n    exportThread,\n    setBackColor,\n    threadCollectionSwap,\n    moveToTheEnd,\n    dashboard\n}) => {\n\n    // State that defines whether the note is pinned, used to show the \n    // change in the pin icon\n    const [isPinned, setIsPinned] = useState(selectedNote.pinned)\n    // State to define whether the popup options have been opened through the\n    // three dots button\n    const [open, setOpen] = useState(false);\n    // Check if the editing note has changed\n    const [hasChanged, setHasChanged] = useState(false)\n\n    // Function to pin the note\n    const pin = () => {\n        setHasChanged(true)\n        selectedNote.pinned = !selectedNote.pinned\n        setIsPinned(selectedNote.pinned)\n    }\n\n    // Function to save and exit the note when the back arrow is pressed\n    const saveAndExit = (action, moveToEndFlag) => {\n\n        if(selectedNote.text===editorState && !hasChanged && editorState!==''){\n            setCurrentPage('notes')\n            createThumbnail(selectedNote)\n            if(moveToEndFlag){\n                moveToTheEnd(selectedNote)\n            }\n            currOrPrevNoteDecice(dashboard)\n            return false\n        }\n\n        // Set the note text to be the editor state and compute the preview\n        selectedNote.text = editorState\n        setPreview(selectedNote)\n\n        // If the note has no text, thread, collection, branches, images,\n        // delete it\n        if(\n        selectedNote.preview === 'empty note kept for its links' &&\n        !selectedNote.thread.length &&\n        !selectedNote.collection.length &&\n        !selectedNote.branches.length &&\n        !selectedNote.attachedImg\n        ){\n            deleteNote(selectedNote.id);\n            setCurrentPage('notes');\n            return false\n        }\n\n        // Otherwise save it and go back to the notes page\n        else{\n            updateNote(selectedNote, action, moveToEndFlag);\n            setCurrentPage('notes');\n            return true;\n        }\n    }\n\n    // Function called when the delete button is pressed\n    const callDelete = () => {\n        if(window.confirm('Are you sure you want to delete the note?')){\n            deleteNote(selectedNote.id); \n            setCurrentPage('notes')\n        }\n    }\n\n    return(\n\n        <div>\n            <div className='page-footer' style={{\n                color: darkMode ? '#636363' : '#171717'\n                }}\n            >\n\n                <IoIosArrowRoundBack\n                    className='tools-btn'\n                    onClick={() => saveAndExit()}\n                    size='2.5em'\n                />\n\n                {!isPinned ?\n                    <AiOutlinePushpin\n                        className='tools-btn'\n                        onClick={() => pin()}\n                        size='1.75em'\n                    /> :\n                    <AiFillPushpin\n                        className='tools-btn'\n                        onClick={() => pin()}\n                        size='1.75em'\n                        style={{transform:'rotate(-45deg)'}}\n                    /> \n                }\n\n                <ColorPicker \n                    selectedNote={selectedNote}\n                    setBackColor={setBackColor}\n                    setHasChanged={setHasChanged}\n                />\n\n                <BsTrash\n                    className='tools-btn'\n                    onClick={() => callDelete()}\n                    size='1.65em'\n                />         \n\n                <OptionsPopup \n                    selectedNote={selectedNote}\n                    open={open}\n                    setOpen={setOpen}\n                    saveAndExit={saveAndExit}\n                    exportThread={exportThread}\n                    threadCollectionSwap={threadCollectionSwap}\n                />          \n\n            </div>\n\n\n        </div>\n    );\n}\n\nexport default EditorFooter;","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nEditor component\nInitialises the Quill rich text editor\nwith its own toolbar and defines the action of the footer bar\n*/\n\nimport React from 'react';\nimport ReactQuill, {Quill} from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport {useState, useRef} from \"react\"\nimport EditorFooter from \"./EditorFooter\"\nimport ImageCompress from 'quill-image-compress';\nimport ImageResize from '@taoqf/quill-image-resize-module'\nimport { TEXTLIMIT } from './Dashboard';\nimport { charLimit } from '../helpers/Messages';\n\n// Register the imageCompressor and resizer\nQuill.register(\"modules/imageCompressor\", ImageCompress);\nQuill.register('modules/imageResize', ImageResize);\n\n// Define what elements to have in the editor toolbar and in what order\nconst modules = {\n    toolbar: [ \n            //{ 'size': ['small', 'normal', 'large'] },\n            { 'header': '1' },\n            { 'header': '2' },\n            'bold', \n            'italic', \n            'underline',\n            'strike',\n            { 'color': [] }, \n            { 'background': [] },\n            {'list': 'ordered'}, \n            {'list': 'bullet'},\n            { 'align': [] }, \n            'image',\n            'code-block',\n            'formula',\n            'blockquote',\n            'link'\n        ],\n    \n    // Image compressor props, kicks in automatically if max size is exceeded\n    imageCompressor: {\n          maxWidth: 800,\n          maxHeight: 800,\n          imageType: 'image/jpeg',\n          debug: false,\n    },\n\n    history: {\n        delay: 2000,\n        maxStack: 500,\n        userOnly: true\n    },\n\n    clipboard: {\n        matchVisual: false\n    },\n\n    imageResize: {\n        parchment: Quill.import('parchment'),\n        modules: [ 'Resize', 'DisplaySize' ]\n    }\n}\n\n// Function needed to solve a bug of Android keyboard with Quill editor\n// taken from https://github.com/quilljs/quill/issues/3240#issuecomment-849679016\n// Basically, the cursor position was not going newline when pressing enter\n// Massive thank you albertaleksieiev!\nconst googleKeyboardWorkaround = (delta, editor) => {\n\n    // retrieves the editors selection\n    var ops = delta['ops']\n    var oldSelection = editor.getSelection()\n    if(oldSelection){\n        var oldPos = oldSelection.index\n        var oldSelectionLength = oldSelection.length\n\n        // only applies the workaround if the last operation performed is not one of the following\n        if (\n        ops[0][\"retain\"] === undefined || \n        !ops[1] || \n        !ops[1][\"insert\"] || \n        !ops[1][\"insert\"] || \n        ops[1][\"insert\"] !== \"\\n\" || \n        oldSelectionLength > 0\n        ) {\n            return\n        }\n\n        // applies the workaround if a space has been pressed and the cursor has not \n        // moved within 30 milliseconds\n        setTimeout(function () {\n            var newPos = editor.getSelection().index\n            if (newPos === oldPos) {\n            console.log(\"Change selection bad pos\")\n            editor.setSelection(editor.getSelection().index + 1, 0)\n            }\n        }, 30);\n    }\n}\n\n// Function that updates the editor state\n// takes the new value of the editor (the html of the text)\n// the delta, which is a more comprehensive state of the editor which\n// includes the operations performed, the editorRef that is used to \n// access the getSelection method and the setEditorState function that updates the \n// local state variable of this component\nconst handleChange = (value, delta, editorRef, setEditorState) => {\n\n    // if the editor has finished initialising\n    if(editorRef.current){\n\n        // apply the workaround\n        const quill = editorRef.current.editor\n        googleKeyboardWorkaround(delta, quill);\n\n        // if the length of the note exceeds the maximum limit\n        // don't save any further text and send an alert\n        if(value.length < TEXTLIMIT){\n            setEditorState(value)\n        }\n        else{\n            alert(charLimit)\n        }\n    } \n}\n\n// NoteEditor component definition\n// takes a function setCurrentPage that allows it to go back to the notes\n// pace once editing is done, the selectedNote to edit, an updateNote function\n// to actualise the update, a deleteNote function to delete the note if the \n// note is empty, the darkMode flad and the export thread function\nconst NoteEditor = ({ \n    setCurrentPage, \n    dashboard, \n    updateNote, \n    deleteNote, \n    darkMode,\n    exportThread,\n    threadCollectionSwap,\n    moveToTheEnd\n\n}) => {\n\n    const selectedNote = dashboard.notes.get(dashboard.selectedNoteId)\n\n    // State of the editor, contains the html of the text that is being inserted by the user\n    const [editorState, setEditorState] = useState(selectedNote.text ? selectedNote.text : '');\n    // State that stores the background color of a note\n    const [backColor, setBackColor] = useState({color: selectedNote.color, colorPreview: selectedNote.colorPreview})\n    // Reference to the Quill object so that it is possible to access its methods\n    const editorRef = useRef(null);\n\n    return (\n            <div \n                className='container'\n                style={ darkMode ?\n                {backgroundColor: '#171717', color: 'white'} \n                :                \n                {backgroundColor: backColor.color}\n                }\n            >            \n            <div\n                className='color-flag'\n                style={ darkMode ? (backColor.color!=='#ffffff' ? \n                    {backgroundImage: 'linear-gradient(20deg, #171717 90%, ' + backColor.colorPreview + ' 90%)', color: 'white'} \n                    : {backgroundColor: '#171717', color: 'white'}) :\n                    {backgroundColor: backColor.color}\n                }\n            ></div>\n                <div className=\"editor no-scrollbar\" id=\"editor\">\n                    <ReactQuill \n                        style={{zoom: 1.4}}\n                        theme=\"snow\"\n                        value={editorState}\n                        onChange={(value, delta) => handleChange(value, delta, editorRef, setEditorState)}\n                        modules={modules}\n                        placeholder={'Write your next idea here...'}\n                        ref={editorRef}\n                        scrollingContainer={'#editor'}\n                    />\n                </div>\n\n                <EditorFooter \n                    setCurrentPage={setCurrentPage} \n                    selectedNote={selectedNote}\n                    updateNote={updateNote}\n                    editorState={editorState}\n                    deleteNote={deleteNote}\n                    darkMode={darkMode}\n                    exportThread={exportThread}\n                    setBackColor={setBackColor}\n                    threadCollectionSwap={threadCollectionSwap}\n                    moveToTheEnd={moveToTheEnd}\n                    dashboard={dashboard}\n                    />\n            </div>\n        );\n      }\n\nexport default NoteEditor;"],"sourceRoot":""}