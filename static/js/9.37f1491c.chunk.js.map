{"version":3,"sources":["components/Footer.js","components/SearchBar.js","components/SearchLabel.js","components/Note.js","components/Wrapper.js","components/NotesList.js","components/SearchArea.js","components/WorkspaceLabel.js","components/WorkspaceArea.js","components/LinksArea.js","components/NotesDragContext.js","components/NotesPage.js"],"names":["Footer","threadOrCollectionManage","threadOrCollection","setRootsOrBranches","rootsOrBranches","setDarkMode","mergeMode","setMergeMode","selectedNote","setCurrentPage","notesUpdating","loadedUser","synchNotes","darkMode","className","style","borderTop","onClick","size","transform","previous","alert","mergeModeOn","previousDarkMode","type","color","height","width","driveNotConnected","SearchBar","setSearchProps","searchProps","isDropDisabled","droppableId","provided","snapshot","droppableProps","ref","innerRef","placeholder","onChange","event","searchText","target","value","toLowerCase","threadFilter","collectionFilter","isDraggingOver","SearchLabel","closeCollection","dashboard","openedCollectionId","getCaption","notes","get","Note","note","areaName","index","handleNotePress","openEditor","draggableId","ui_id","id","name","draggableProps","dragHandleProps","onDoubleClick","backgroundImage","colorPreview","backgroundColor","border","isDropAnimating","pinned","thread","length","collection","branches","roots","attachedImg","text","dangerouslySetInnerHTML","__html","preview","Wrapper","notesLength","draggableInfo","sourceArea","undefined","find","minWidth","SLICESIZE","NotesList","handleAddNote","workspaceFlag","useState","window","sessionStorage","getItem","parseInt","currentSlice","setCurrentSlice","isVisible","setIsVisible","useEffect","slicedNotes","slice","scrollSucceded","focusPos","targetElement","document","getElementById","scrollIntoView","inline","setItem","align","dir","prop","visibility","direction","map","SearchArea","addNote","selectNote","search","selectedNoteId","WorkspaceLabel","closeAndSave","openedWorkspaceId","workspaceIds","WorkspaceArea","workspace","LinksArea","links","NoteDragContext","handleOnDragEnd","setDraggableInfo","onDragEnd","onDragStart","start","navigator","vibrate","source","sourceIndex","noteFound","NotesPage","GAPIloaded","currentUser"],"mappings":"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","file":"static/js/9.37f1491c.chunk.js","sourcesContent":["/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nEditorFooter component\nDefines the buttons of the footer and calls the respective functions\n*/\n\nimport { FcIdea, FcSettings, FcParallelTasks, FcBrokenLink, FcLink, FcImport, FcCheckmark, FcCancel} from 'react-icons/fc'\nimport { AiOutlineDisconnect, AiOutlineLink, AiOutlineBranches, AiOutlineImport, AiOutlineStop } from 'react-icons/ai';\nimport { GoLightBulb } from 'react-icons/go';\nimport { VscSettingsGear, VscCheck, VscSync } from 'react-icons/vsc';\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\nimport Loader from \"react-loader-spinner\";\nimport { driveNotConnected, mergeModeOn } from '../helpers/Messages';\nimport React from 'react'\n\n// Footer component\n// takes the threadOrCollection state and a function to change it,\n// rootsOrBranches state and a function to chage it,\n// a function to switch the darkMode state\n// mergeMode state and a function to change it,\n// the selectedNote,\n// a function to change the current page, used to move to settings page,\n// the notesUpdating flag to show the animation\n// and the loadedUser flag to pass to the settings\n// Most of the props are used to show the correct icons and switch states\nconst Footer = ({\n    threadOrCollectionManage, \n    threadOrCollection, \n    setRootsOrBranches, \n    rootsOrBranches, \n    setDarkMode, \n    mergeMode, \n    setMergeMode,\n    selectedNote,\n    setCurrentPage,\n    notesUpdating,\n    loadedUser,\n    synchNotes,\n    darkMode\n}) => {\n    return(\n        <div className='page-footer'\n            style={{\n                borderTop: darkMode ? '1px solid #303030' : '1px solid #cccccc'\n            }}\n        >\n            {darkMode ?\n                <VscSettingsGear\n                    className='tools-btn'\n                    onClick={() => setCurrentPage('settings')}\n                    size='2.5em'\n                    style={{transform: 'scale(0.75)'}}\n                />\n                :\n                <FcSettings\n                    className='tools-btn'\n                    onClick={() => setCurrentPage('settings')}\n                    size='2.5em'\n                />\n            }\n\n            {!threadOrCollection ? (\n                darkMode ? \n                    <AiOutlineDisconnect\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                        style={{transform: 'rotate(45deg) scale(0.85)'}}\n                    />\n                :\n                    <FcBrokenLink\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                    />\n            )\n            :\n            (\n                darkMode ?\n                    <AiOutlineLink\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                        style={{transform: 'rotate(45deg) scale(0.85)'}}\n                    />\n                :\n                    <FcLink\n                        onClick={() =>\n                            threadOrCollectionManage(\n                                !threadOrCollection\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                    />\n                )\n            }\n\n            {threadOrCollection ? (\n                darkMode ?\n                    <AiOutlineBranches\n                        onClick={() =>\n                            setRootsOrBranches(\n                                (previous) => !previous\n                            )\n                        }\n                        size='2.1em'\n                        className='tools-btn'\n                        style={rootsOrBranches ? {transform: 'scaleX(-1) rotate(90deg)'} : {transform: 'rotate(90deg)'}}\n                    />\n                :\n                    <FcParallelTasks\n                        onClick={() =>\n                            setRootsOrBranches(\n                                (previous) => !previous\n                            )\n                        }\n                        size='2.5em'\n                        className='tools-btn'\n                        style={rootsOrBranches && {transform: 'scaleX(-1)'}}\n                    />\n            ) : null\n            }\n\n            {selectedNote ?\n                darkMode ?\n                    <AiOutlineImport\n                        onClick={() =>{\n                                setMergeMode(\n                                    (previous) => !previous\n                                )\n                                if(!mergeMode){\n                                    alert(mergeModeOn)\n                                }\n                            }\n                        }\n                        size='1.8em'\n                        className='tools-btn'\n                        style={{transform:'scaleX(1.1) rotate(-90deg)'}}\n                    /> \n                :\n                    <FcImport\n                        onClick={() =>{\n                                setMergeMode(\n                                    (previous) => !previous\n                                )\n                                if(!mergeMode){\n                                    alert(mergeModeOn)\n                                }\n                            }\n                        }\n                        size='2.3em'\n                        className='tools-btn'\n                        style={{transform:'scaleY(1.15) rotate(-90deg)'}}\n                    />    \n            : null}\n\n            {darkMode ?\n                <GoLightBulb\n                    onClick={() =>\n                        setDarkMode(\n                            (previousDarkMode) => !previousDarkMode\n                        )\n                    }\n                    size='2.5em'\n                    className='tools-btn'\n                    style={{transform: 'scaleY(0.7) scaleX(0.7)'}}\n                />  \n            :\n                <FcIdea\n                onClick={() =>\n                    setDarkMode(\n                        (previousDarkMode) => !previousDarkMode\n                    )\n                }\n                size='2.5em'\n                className='tools-btn'\n                />  \n            }\n\n            {loadedUser ? (\n                notesUpdating>0?\n\n                    darkMode ? \n                        <VscSync \n                            size='2em'\n                        /> \n                    :\n                        <Loader \n                            type=\"Circles\" \n                            color=\"#00BFFF\" \n                            height='1.8em'\n                            width='2.3em'\n                        /> \n\n                :\n\n                    darkMode ? \n                        <VscCheck\n                            size='2em'\n                            className='tools-btn'\n                            onClick={()=>synchNotes()}\n                            style={{transform: 'scaleY(0.85)'}}\n                        />\n                    :\n                        <FcCheckmark\n                            size='2.3em'\n                            className='tools-btn'\n                            onClick={()=>synchNotes()}\n                        />\n            ) :\n\n            darkMode ?\n                <AiOutlineStop\n                    size='1.8em'\n                    onClick={()=>alert(driveNotConnected)}\n                    style={{transform: 'scaleX(-1)'}}\n                />\n            :\n                <FcCancel\n                    size='2.3em'\n                    onClick={()=>alert(driveNotConnected)}\n                />\n            }\n\n        </div>\n    );\n}\n\nexport default Footer;","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nSearchBar component\n*/\n\nimport React from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport { FcSearch } from 'react-icons/fc';\nimport { BiSearchAlt } from 'react-icons/bi'\n\nconst SearchBar = ({ \n\tsetSearchProps, \n\tsearchProps ,\n\tisDropDisabled,\n\tdarkMode\n}) => {\n\n\treturn (\n\n\t\t<Droppable \n\t\t\tdroppableId={'search-bar'}\n\t\t\tisDropDisabled={isDropDisabled}\n\t\t>\n\t\t\t{(provided, snapshot) => (\n                <div \n                    className={darkMode ? 'search-dark' : 'search-bright'}\n                    {...provided.droppableProps} \n                    ref={provided.innerRef} \n\t\t\t\t>\n\t\t\t\t\t{darkMode ?\n\t\t\t\t\t\t<BiSearchAlt className='search-icons' size='2em' style={{transform: 'scale(0.8)'}}/>\n\t\t\t\t\t:\n\t\t\t\t\t\t<FcSearch className='search-icons' size='2em' />\n\t\t\t\t\t}\n\t\t\t\t\t{provided.placeholder}\n\n\t\t\t\t\t<input\n\t\t\t\t\t\tonChange={(event) =>\n\t\t\t\t\t\t\tsetSearchProps({\n\t\t\t\t\t\t\t\tsearchText: event.target.value.toLowerCase(), \n\t\t\t\t\t\t\t\tthreadFilter: searchProps.threadFilter, \n\t\t\t\t\t\t\t\tcollectionFilter: searchProps.collectionFilter}\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tplaceholder={\n\t\t\t\t\t\t\tsnapshot.isDraggingOver ?\n\t\t\t\t\t\t\t\t'Work within this collection'\n\t\t\t\t\t\t\t: \n\t\t\t\t\t\t\t\t'Type to search'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\tvalue={searchProps.searchText}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<span \n\t\t\t\t\t\tclassName='search-filter tools-btn' \n\t\t\t\t\t\tstyle={searchProps.threadFilter ?  {color:'red'} : {}}\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\tsetSearchProps({\n\t\t\t\t\t\t\t\tsearchText: searchProps.searchText, \n\t\t\t\t\t\t\t\tthreadFilter: !searchProps.threadFilter, \n\t\t\t\t\t\t\t\tcollectionFilter: searchProps.collectionFilter}\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\tT\n\t\t\t\t\t</span>\n\n\t\t\t\t\t<span \n\t\t\t\t\t\tclassName='search-filter tools-btn'\n\t\t\t\t\t\tstyle={searchProps.collectionFilter ? {color:'red'} : {}}\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\tsetSearchProps({\n\t\t\t\t\t\t\t\tsearchText: searchProps.searchText, \n\t\t\t\t\t\t\t\tthreadFilter: searchProps.threadFilter, \n\t\t\t\t\t\t\t\tcollectionFilter: !searchProps.collectionFilter}\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t>\n\t\t\t\t\t\tC\n\t\t\t\t\t</span>\n\n\t\t\t\t</div>\n\t\t\t)}\n\n\t\t</Droppable>\n\t);\n};\n\nexport default SearchBar;\n","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nSearchLabel component\nGives information about the current state of the search\nand the filters applied to it\n*/\n\nimport React from 'react';\nimport { getCaption } from '../helpers/DashboardUtils';\nimport { VscChromeClose } from 'react-icons/vsc';\n\nconst SearchLabel = ({ \n    searchProps, \n    closeCollection, \n    dashboard,\n    darkMode\n}) => {\n\n    return(\n        <div className='stripe-label'>\n\n            <div className='stripe-not-overflow'>\n                NOTE FINDER  \n                {searchProps.threadFilter && ' - THREADS'} \n                {searchProps.collectionFilter && ' - COLLECTIONS'}\n                {\n                    dashboard.openedCollectionId && ' : ' + \n                    getCaption(dashboard.notes.get(dashboard.openedCollectionId))\n                }\n            </div>\n\n            {dashboard.openedCollectionId && \n                <div>\n                    <VscChromeClose \n                        size='2em'\n                        className='tools-btn close-btn'\n                        onClick={() => closeCollection()}\n                        color={darkMode ? 'white' : 'black'}\n                    />\n                </div>\n            }\n\n        </div>\n    )\n}\n\nexport default SearchLabel","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nNote component\nDefines the single note object and all the actions that are possible with it\n*/\n\nimport { Draggable } from 'react-beautiful-dnd';\nimport React from 'react';\nimport {RiPushpin2Fill} from 'react-icons/ri'\nimport { FaLink, FaFolder } from 'react-icons/fa'\nimport { ImTree } from 'react-icons/im'\nimport { FiPaperclip } from 'react-icons/fi'\n\n// Note component takes the note to show, \n// the name of the area it compares in,\n// the index of the note inside the sequence,\n// handleNotePress to select a note if it is pressed,\n// the darkMode, mergeMode, rootsOrBranches, threadOrCollection flags\n// the selectedNote,\n// the openEditor function to edit the note on double click\nconst Note = ({ \n\tnote, \n\tareaName, \n\tindex, \n\thandleNotePress, \n\tdarkMode, \n\tselectedNote,\n\tmergeMode,\n\topenEditor,\n\trootsOrBranches,\n\tthreadOrCollection\n\n}) => {\n\n\treturn (\n\n\t\t\t<Draggable key={note.ui_id} draggableId={note.ui_id} index={index}>\n\t\t\t\t{(provided, snapshot) => (\n\t\t\t\t\t\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<li \n\t\t\t\t\t\tclassName={`${\n\t\t\t\t\t\t\t(mergeMode && selectedNote.id===note.id && 'note no-scrollbar merge-mode')\n\t\t\t\t\t\t\t||\n\t\t\t\t\t\t\t(((darkMode && selectedNote && selectedNote.id===note.id) && \n\t\t\t\t\t\t\t\t'note note-dark no-scrollbar selected-note-dark') || \n\t\t\t\t\t\t\t((darkMode && (!selectedNote || selectedNote.id!==note.id)) && \n\t\t\t\t\t\t\t\t'note note-dark no-scrollbar') ||\n\t\t\t\t\t\t\t((!darkMode && selectedNote && selectedNote.id===note.id ) &&\n\t\t\t\t\t\t\t\t'note note-bright no-scrollbar selected-note') ||\n\t\t\t\t\t\t\t((!darkMode && (!selectedNote ||selectedNote.id!==note.id)) &&\n\t\t\t\t\t\t\t\t'note note-bright no-scrollbar')) \n\t\t\t\t\t\t}`}\n\t\t\t\t\t\tname={note.id}\n\t\t\t\t\t\tid={note.ui_id}\n\t\t\t\t\t\tref={provided.innerRef} \n\t\t\t\t\t\t{...provided.draggableProps}\n\t\t\t\t\t\t{...provided.dragHandleProps}\n\t\t\t\t\t\tonClick={()=> {handleNotePress(note)}}\n\t\t\t\t\t\tonDoubleClick={()=> areaName!=='branches-area' ? openEditor() : {}}\n\t\t\t\t\t\tstyle={\n\t\t\t\t\t\t\t!(mergeMode && selectedNote.id===note.id) ? (\n\t\t\t\t\t\t\t\t!darkMode && note.color!=='#ffffff' ? \n\t\t\t\t\t\t\t\t\t(selectedNote && selectedNote.id===note.id ? \n\t\t\t\t\t\t\t\t\t\t{backgroundColor: note.color, ...provided.draggableProps.style} : \n\t\t\t\t\t\t\t\t\t{backgroundColor: note.color, border: '1px solid '+note.color, ...provided.draggableProps.style}) : \n\t\t\t\t\t\t\t\t\t\t(note.color!=='#ffffff' ? \n\t\t\t\t\t\t\t\t\t\t\t{backgroundImage: 'linear-gradient(25deg, rgb(92, 92, 92) 92%, '+note.colorPreview+' 92%)', ...provided.draggableProps.style} \n\t\t\t\t\t\t\t\t\t\t\t: provided.draggableProps.style))\n\t\t\t\t\t\t\t: provided.draggableProps.style\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{snapshot.isDropAnimating}\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{note.pinned && areaName==='search-area' &&\n\t\t\t\t\t\t\t\t\t<RiPushpin2Fill size='10px' className='header-icon'/>\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{note.thread.length ?\n\t\t\t\t\t\t\t\t\t<FaLink size='10px' className='header-icon'/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{note.collection.length ?\n\t\t\t\t\t\t\t\t\t<FaFolder size='10px' className='header-icon'/> : ''\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t{threadOrCollection && !rootsOrBranches && note.branches.length ?\n\t\t\t\t\t\t\t\t\t<ImTree size='10px' className='header-icon'/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{threadOrCollection && rootsOrBranches && note.roots.length ?\n\t\t\t\t\t\t\t\t\t<ImTree size='10px' className='header-icon'/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{note.attachedImg && !note.attachedImg[2] ?\n\t\t\t\t\t\t\t\t\t<FiPaperclip size='10px' className='header-icon' style={{transform:'rotate(-45deg)'}}/> : ''\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t{!note.attachedImg || !note.attachedImg[2] ?\n\t\t\t\t\t\t\t\t<div className='note-content no-scrollbar' dangerouslySetInnerHTML={{__html: note.preview}}></div> : \n\t\t\t\t\t\t\t\t<div className='just-background-note' style={{backgroundImage: 'url('+ note.text +')'}}></div>\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</Draggable>\n\t);\n};\n\nexport default Note;\n","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nWrapper component\nUsed to wrap an unsaved thread inside an empty note\nor to expand the thread or collection contained in any\narbitrary note\n*/\n\nimport {Droppable} from 'react-beautiful-dnd';\nimport React from 'react'\n\nconst Wrapper = ({\n\tthreadOrCollection,\n    notesLength,\n    draggableInfo,\n    notes,\n    darkMode\n}) => {\n\n    // Disable dropping here unless the note comes from the search area\n    // and it is empty if you are trying to wrap an unsaved thread/collection\n    // or it is full if you are trying to expand it to show its content\n    const isDropDisabled = \n        draggableInfo.sourceArea!=='search-area' ||\n        (\n            notesLength>0 ? (\n\n                draggableInfo.note.thread.length>0 || \n                draggableInfo.note.collection.length>0\n            )\n            :\n            (\n                !draggableInfo.note.thread.length && \n                !draggableInfo.note.collection.length \n            )\n            \n        ) ||\n        (notes.find(note => note.id===draggableInfo.note.id)!==undefined)\n    \n    return (\n\n        <Droppable \n            droppableId='wrapper-area'\n            isDropDisabled={isDropDisabled}\n        >\n\n            {(provided, snapshot) => (\n                <div \n                    className='wrapper'\n                    {...provided.droppableProps} \n                    ref={provided.innerRef} \n                    style={ \n                        notesLength > 0 ? (\n                            {\n                            ...(\n                                threadOrCollection ? {backgroundColor:'#fef3bd'} \n                                : {backgroundColor:'#c4def6'}\n                            ), \n                            ...(!snapshot.isDraggingOver && {minWidth:\"8vh\"})\n                            })\n                        : \n                        darkMode ?\n                        {backgroundColor: '#2e2e2e', minWidth:\"8vh\", color: '#666666'}\n                        :\n                        {backgroundColor: '#e7e7e7', minWidth:\"8vh\"}\n                    }\n                >\n\n                <div className='vertical-text'>{notesLength>0 ? 'WRAP' : 'drop to expand'}</div>\n\n                {provided.placeholder}\n\n                {\n                    snapshot.isDraggingOver?\n                    \n                        (notesLength > 0 ?\n                            (\n                                <div className='vertical-text'>\n                                    wrap <br></br> \n                                    {threadOrCollection ? ' thread ' : ' collection '}\n                                    <br></br> \n                                    inside note\n                                </div>\n                            ) \n                        :\n                            (\n                                <div className='vertical-text'>\n                                    expand\n                                    <br></br> \n                                    {draggableInfo.note.thread.length ? \n                                        'thread' : 'collection'\n                                    }\n                                </div>\n                            ) \n                        ) : null\n                }\n\n                </div>\n\n            )}\n\n        </Droppable>\n\n    )\n}\nexport default Wrapper","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nNotesList component\nDefines a general list of notes that acts as a Droppable\nin the framework of React Beautiful Dnd\n*/\n\nimport Note from './Note';\nimport {Droppable} from 'react-beautiful-dnd';\nimport { useEffect, useState } from 'react';\nimport {FcNext, FcPrevious, FcPlus} from 'react-icons/fc';\nimport { BsChevronRight, BsChevronLeft } from 'react-icons/bs';\nimport { BsPlusSquare } from 'react-icons/bs'\nimport Wrapper from './Wrapper';\nimport React from 'react'\n\n// Max size of a row of notes, it is necessary to press the arrow\n// button to access further notes\nconst SLICESIZE = 12;\n\nconst NotesList = ({\n\tnotes,\n\thandleAddNote,\n\tareaName,\n\thandleNotePress,\n\tdarkMode,\n\tselectedNote,\n\tmergeMode,\n\tthreadOrCollection,\n\topenEditor,\n\tworkspaceFlag, \n\trootsOrBranches,\n\tisDropDisabled,\n\tdraggableInfo\n}) => {\n\n\t// State that defines the slice the user is at\n\tconst [currentSlice, setCurrentSlice] = useState(\n\t\twindow.sessionStorage.getItem('current-slice-'+areaName) ? \n\t\tparseInt(window.sessionStorage.getItem('current-slice-'+areaName)) :\n\t\t0\n\t)\n\t// State to hide the NotesList until the scroll is performed, used to avoid flickering\n\tconst [isVisible, setIsVisible] = useState(false)\n\n\t// Effect to set back the scroll once exiting the editor\n\tuseEffect(() => {\n\t\tconst slicedNotes = notes.slice(currentSlice*SLICESIZE, (currentSlice+1)*SLICESIZE+SLICESIZE)\n\t\tvar scrollSucceded=false\n\n\t\t// If there is a selectedNote to scroll to, do it\n\t\tif(selectedNote){\n\t\t\tconst focusPos = slicedNotes.find(note => note.id === selectedNote.id)\n\t\t\tif(focusPos){\n\t\t\t\tconst targetElement = document.getElementById(focusPos.ui_id)\n\t\t\t\tif(targetElement){\n\t\t\t\t\ttargetElement.scrollIntoView({inline: 'center'})\n\t\t\t\t\tscrollSucceded=true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise, some search is performed but there are no notesin the current slices, go to slice 0\n\t\tif(!slicedNotes.length && currentSlice!==0 && !scrollSucceded && areaName==='search-area'){\n\t\t\tsetCurrentSlice(0)\n\t\t\twindow.sessionStorage.setItem('current-slice-'+areaName, 0)\n\t\t}\n\t\tsetIsVisible(true)\n\t// eslint-disable-next-line\n\t}, [notes])\n\n\t// Function used to change slice based on which arrow button has been pressed\n\tconst align = (dir) => {\n\n\t\t// Before changing slice, set up the autoscroll\n\t\t// Initialise a prop based on whether the button was next or prev\n\t\tconst prop = dir===-1 ? {inline:'start'} : {inline:'end'}\n\t\tvar focusPos = currentSlice*SLICESIZE+SLICESIZE-1\n\n\t\t// If overflows, go back to last note of the sequence\n\t\tif(focusPos>notes.length-1){\n\t\t\tfocusPos=notes.length-1\n\t\t}\n\n\t\t// scroll into the last note of the previous slice to give the idea of continuity \n\t\t// between slices\n\t\tdocument.getElementById(notes[focusPos].ui_id).scrollIntoView(prop);\n\t\tsetCurrentSlice(currentSlice+dir)\n\t\twindow.sessionStorage.setItem('current-slice-'+areaName, currentSlice+dir)\n\t}\n\n\tconst slicedNotes = notes.slice(currentSlice*SLICESIZE, (currentSlice+1)*SLICESIZE+SLICESIZE)\n\n\treturn (\n\n\t\t<div style={{visibility: isVisible ? 'visible' : 'hidden'}}>\n\n\t\t\t<Droppable \n\t\t\t\tdroppableId={areaName} \n\t\t\t\tdirection='horizontal' \n\t\t\t\tclassName='droppable-wrapper' \n\t\t\t\tisDropDisabled={isDropDisabled}\n\t\t\t>\n\n\t\t\t\t{(provided) => (\n\n\t\t\t\t\t<ul \n\t\t\t\t\t\tclassName='notes-list' \n\t\t\t\t\t\t{...provided.droppableProps} \n\t\t\t\t\t\tref={provided.innerRef} \n\t\t\t\t\t\tid={areaName}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{currentSlice>0 ?\n\t\t\t\t\t\t\t\t\tdarkMode ?\n\t\t\t\t\t\t\t\t\t\t<BsChevronLeft \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(-1)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t\tcolor='#666666'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t<FcPrevious \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(-1)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{(areaName==='workspace-area' && workspaceFlag) &&\n\n\t\t\t\t\t\t\t\t<Wrapper \n\t\t\t\t\t\t\t\t\tthreadOrCollection={threadOrCollection}\n\t\t\t\t\t\t\t\t\tnotesLength={notes.length}\n\t\t\t\t\t\t\t\t\tdraggableInfo={draggableInfo}\n\t\t\t\t\t\t\t\t\tnotes={notes}\n\t\t\t\t\t\t\t\t\tdarkMode={darkMode}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t{(areaName==='search-area' && currentSlice===0) &&\n\t\t\t\t\t\t\t\t\t(darkMode ?\n\t\t\t\t\t\t\t\t\t<BsPlusSquare \n\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn add-btn'\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddNote()}\n\t\t\t\t\t\t\t\t\t\tsize='2.25em'\n\t\t\t\t\t\t\t\t\t\tcolor='#555555'\n\t\t\t\t\t\t\t\t\t\tstyle={{transform: 'scale(0.8)'}}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t<FcPlus\n\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn add-btn'\n\t\t\t\t\t\t\t\t\t\tonClick={() => handleAddNote()}\n\t\t\t\t\t\t\t\t\t\tsize='2.25em'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{slicedNotes.map((note, index) => (\n\n\t\t\t\t\t\t\t\t<Note\n\t\t\t\t\t\t\t\t\tkey={note.ui_id}\n\t\t\t\t\t\t\t\t\tnote={note}\n\t\t\t\t\t\t\t\t\tareaName={areaName}\n\t\t\t\t\t\t\t\t\tindex={index+currentSlice*SLICESIZE}\n\t\t\t\t\t\t\t\t\thandleNotePress={handleNotePress}\n\t\t\t\t\t\t\t\t\tdarkMode={darkMode}\n\t\t\t\t\t\t\t\t\tselectedNote={selectedNote}\n\t\t\t\t\t\t\t\t\tmergeMode={mergeMode}\n\t\t\t\t\t\t\t\t\topenEditor={openEditor}\n\t\t\t\t\t\t\t\t\trootsOrBranches={rootsOrBranches}\n\t\t\t\t\t\t\t\t\tthreadOrCollection={threadOrCollection}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t\t{provided.placeholder}\n\n\t\t\t\t\t\t\t<div> \n\t\t\t\t\t\t\t\t{(currentSlice+1)*SLICESIZE+SLICESIZE<notes.length ? \n\n\t\t\t\t\t\t\t\t\tdarkMode ?\n\t\t\t\t\t\t\t\t\t\t<BsChevronRight \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(1)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t\tcolor='#666666'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t\t\t<FcNext \n\t\t\t\t\t\t\t\t\t\t\tclassName='tools-btn arrow-btn'\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => align(1)}\n\t\t\t\t\t\t\t\t\t\t\tsize='2.5em'\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t</ul>\n\t\t\t\t)}\n\n\t\t\t</Droppable>\n\t\t</div>\n\t);\n};\n\nexport default NotesList;\n","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nSearchArea component\nSearch Area that includes the searchBar, the Search Label\nand the notes list containing the results of the search\n*/\n\nimport React from 'react';\nimport SearchBar from './SearchBar';\nimport SearchLabel from './SearchLabel';\nimport NotesList from './NotesList';\n\nconst SearchArea = ({ \n    closeCollection, \n    dashboard, \n    darkMode, \n    addNote, \n    selectNote, \n    mergeMode, \n    threadOrCollection, \n    openEditor, \n    rootsOrBranches,\n    searchProps,\n    setSearchProps,\n    draggableInfo\n}) => {\n\n    // Dropping here is disabled unless the note comes from the \n    // search area itself and has a collection within it\n    // The gesture is used to expand it\n    const isDropDisabled = \n        draggableInfo.sourceArea!=='search-area' ||\n        !draggableInfo.note.collection.length\n\n    return(\n        <div>\n            <SearchBar \n                setSearchProps={setSearchProps} \n                searchProps={searchProps}\n                isDropDisabled={isDropDisabled}\n                darkMode={darkMode}\n            />\n\n            {!threadOrCollection ?\n                <div className='search-spacer'></div> : null\n            }\n\n            <div>\n                <SearchLabel \n                    searchProps={searchProps} \n                    closeCollection={closeCollection}\n                    dashboard={dashboard}\n                    darkMode={darkMode}\n                />\n                \n                <NotesList\n                    notes={dashboard.search}\n                    handleAddNote={addNote}\n                    areaName={'search-area'}\n                    handleNotePress={selectNote}\n                    darkMode={darkMode}\n                    selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                    mergeMode={mergeMode}\n                    threadOrCollection={threadOrCollection}\n                    openEditor={openEditor}\n                    rootsOrBranches={rootsOrBranches}\n                />\n            </div> \n        </div>\n    )\n}\n\nexport default SearchArea","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nWorkspaceLabel component\nGives information about the current state of the workspace\n*/\n\nimport React from 'react';\nimport { getCaption } from '../helpers/DashboardUtils';\nimport { VscChromeClose } from 'react-icons/vsc';\n\nconst WorkspaceLabel = ({ \n    dashboard,\n    threadOrCollection,\n    closeAndSave,\n    darkMode\n}) => {\n\nreturn(\n    <div className='stripe-label'>\n\n        <div className='stripe-not-overflow'>\n\n            CURRENT {threadOrCollection ? ' THREAD ' : ' COLLECTION '} \n            {dashboard.openedWorkspaceId ?\n                    ' : ' + getCaption(dashboard.notes.get(dashboard.openedWorkspaceId))\n                : (dashboard.workspaceIds.length ? \n                    (threadOrCollection ? ' : unsaved thread ' : ' : unsaved collection ') \n            : null)\n            }\n        </div>\n\n        {dashboard.workspaceIds.length || dashboard.openedWorkspaceId ?\n            <div>\n                <VscChromeClose \n                    size='2em'\n                    className='tools-btn close-btn'\n                    onClick={() => closeAndSave()}\n                    color={darkMode ? 'white' : 'black'}\n                />\n            </div>\n        : null}\n\n    </div>\n    )\n}\n\nexport default WorkspaceLabel","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nWorkspaceArea component\nContains the current workspace the user is working on\n*/\n\nimport React from 'react';\nimport NotesList from './NotesList';\nimport WorkspaceLabel from './WorkspaceLabel';\n\nconst WorkspaceArea = ({ \n    dashboard, \n    darkMode, \n    selectNote, \n    mergeMode, \n    threadOrCollection, \n    openEditor, \n    rootsOrBranches,\n    closeAndSave,\n    draggableInfo\n}) => { \n\n    return (\n        <div>\n\n            <WorkspaceLabel \n                dashboard={dashboard}\n                threadOrCollection={threadOrCollection}\n                closeAndSave={closeAndSave}\n                darkMode={darkMode}\n            />                \n\n            <NotesList\n                notes={dashboard.workspace}\n                areaName={'workspace-area'}\n                handleNotePress={selectNote}\n                darkMode={darkMode}\n                selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                workspaceFlag={!dashboard.openedWorkspaceId}\n                rootsOrBranches={rootsOrBranches}\n                draggableInfo={draggableInfo}\n            />\n\n        </div>\n    )\n}\n\nexport default WorkspaceArea","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nLinksArea component\nDefines the lowest row of notes of the dashboard\nwhich shows the links starting from/coming into the selectedNote\nBased of a rootsOrBranches flag\n*/\n\nimport React from 'react';\nimport NotesList from './NotesList';\nimport { getCaption } from '../helpers/DashboardUtils';\n\n// LinksArea component,\n// takes the dashboard to get the notes from,\n// The darkmode flag\n// some draggableInfo to know where the drags start from\nconst LinksArea = ({ \n    dashboard, \n    darkMode, \n    mergeMode, \n    threadOrCollection, \n    openEditor, \n    rootsOrBranches,\n    draggableInfo\n}) => { \n\n    const isDropDisabled = \n        draggableInfo.sourceArea!=='search-area' ||\n        draggableInfo.note.id===dashboard.selectedNoteId\n\n    return (\n        <div>\n\n            {dashboard.notes.get(dashboard.selectedNoteId) && threadOrCollection && \n            <div>\n\n                <label className='stripe-label stripe-not-overflow'>\n                    {!rootsOrBranches ? ' BRANCHES - ' : ' ROOTS - '}\n                    {getCaption(dashboard.notes.get(dashboard.selectedNoteId))} \n                </label>\n\n                <NotesList\n                    notes={dashboard.links}\n                    areaName={'branches-area'}\n                    darkMode={darkMode}\n                    handleNotePress={() => {}}\n                    selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                    mergeMode={mergeMode}\n                    threadOrCollection={threadOrCollection}\n                    openEditor={openEditor}\n                    rootsOrBranches={rootsOrBranches}\n                    isDropDisabled={isDropDisabled}\n                />\n\n            </div>      \n            }\n\n        </div>\n    )\n}\n\nexport default LinksArea","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nNoteDragContext component\nDefines drag and drop context by using the React Beautiful DnD package\n*/\n\nimport React, { useState } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport SearchArea from './SearchArea';\nimport WorkspaceArea from './WorkspaceArea';\nimport LinksArea from './LinksArea';\n\n// Function that is called when a drag starts\n// Stores information about the note that has been moved and its\n// original position inside a state that then gets passed\nconst onDragStart = (start, dashboard, setDraggableInfo) => {\n\n    // give some short tactile feedback\n    if (window.navigator.vibrate) {\n        window.navigator.vibrate(25);\n    }\n\n    // Initialise the draggableInfo state\n    const draggableInfo = {}\n    const sourceArea = start.source.droppableId\n    draggableInfo.sourceArea = sourceArea\n    const sourceIndex = start.source.index\n    var noteFound = null\n\n    // return the note itself so that it is possible to access some \n    // of its properties, eg: the collection that it contains\n    // this is used for some special gestures such as the dragging\n    // into the searchBar gesture\n    if(sourceArea==='workspace-area'){\n        noteFound = dashboard.workspace[sourceIndex]\n    }\n    else if(sourceArea==='search-area'){\n        noteFound = dashboard.search[sourceIndex]\n    }\n    else if(sourceArea==='links-area'){\n        noteFound = dashboard.links[sourceIndex]\n    }\n    \n    if(noteFound){\n        draggableInfo.note = noteFound\n    }\n    setDraggableInfo(draggableInfo)\n}\n\nconst NoteDragContext = ({ \n    handleOnDragEnd,\n    closeCollection,\n    dashboard,\n    darkMode,\n    addNote,\n    selectNote,\n    mergeMode,\n    threadOrCollection,\n    openEditor,\n    rootsOrBranches,\n    closeAndSave,\n    searchProps,\n    setSearchProps\n}) => {\n\n    const [draggableInfo, setDraggableInfo] = useState({\n        sourceArea: '',\n        note: null\n    })\n\n    return(\n\n        <DragDropContext \n            onDragEnd={handleOnDragEnd} \n            onDragStart={(start) => onDragStart(start, dashboard, setDraggableInfo)}\n        >\n                \n            <SearchArea \n                closeCollection={closeCollection} \n                dashboard={dashboard} \n                darkMode={darkMode}\n                addNote={addNote}\n                selectNote={selectNote}\n                mergeMode={mergeMode} \n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                rootsOrBranches={rootsOrBranches}\n                searchProps={searchProps}\n                setSearchProps={setSearchProps}\n                draggableInfo={draggableInfo}\n            />                 \n\n            \n            <WorkspaceArea \n                dashboard={dashboard}\n                darkMode={darkMode}\n                selectNote={selectNote}\n                mergeMode={mergeMode} \n                threadOrCollection={threadOrCollection} \n                openEditor={openEditor} \n                rootsOrBranches={rootsOrBranches}\n                closeAndSave={closeAndSave}\n                draggableInfo={draggableInfo}\n            />\n\n            <LinksArea \n                dashboard={dashboard}\n                darkMode={darkMode}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                rootsOrBranches={rootsOrBranches}\n                draggableInfo={draggableInfo}\n            />\n\n        </DragDropContext>\n    )\n}\nexport default NoteDragContext","/*\nAuthor: Nicola Mendini\nDate: 13/09/2021\nThinkyThreads Project\nNotesPage component\nMain notes page, as opposed to Editor page or settings page\nWraps the noteDragDropContext and the Footer\n*/\n\nimport React from 'react';\nimport Footer from './Footer'\nimport NoteDragContext from './NotesDragContext';\n\nconst NotesPage = ({ \n    darkMode,\n    dashboard,\n    handleOnDragEnd,\n    GAPIloaded,\n    currentUser,\n    setCurrentPage,\n    notesUpdating,\n    setDarkMode,\n    closeCollection,\n    addNote,\n    selectNote,\n    mergeMode,\n    setMergeMode,\n    openEditor,\n    rootsOrBranches,\n    closeAndSave,\n    threadOrCollection,\n    threadOrCollectionManage,\n    setRootsOrBranches,\n    searchProps,\n    setSearchProps,\n    synchNotes\n}) => {\n\n    return(\n\n        <div className={darkMode ? 'container dark-mode' : 'container'}>\n\n            <NoteDragContext \n                handleOnDragEnd={handleOnDragEnd}\n                closeCollection={closeCollection}\n                dashboard={dashboard}\n                darkMode={darkMode}\n                addNote={addNote}\n                selectNote={selectNote}\n                mergeMode={mergeMode}\n                threadOrCollection={threadOrCollection}\n                openEditor={openEditor}\n                rootsOrBranches={rootsOrBranches}\n                closeAndSave={closeAndSave}\n                searchProps={searchProps}\n                setSearchProps={setSearchProps}\n            />\n\n            <Footer \n                threadOrCollectionManage={threadOrCollectionManage}\n                threadOrCollection={threadOrCollection}\n                setRootsOrBranches={setRootsOrBranches}\n                rootsOrBranches={rootsOrBranches}\n                setDarkMode={setDarkMode}\n                mergeMode={mergeMode}\n                setMergeMode={setMergeMode}\n                selectedNote={dashboard.notes.get(dashboard.selectedNoteId)}\n                setCurrentPage={setCurrentPage}\n                notesUpdating={notesUpdating}\n                loadedUser={GAPIloaded && currentUser}\n                synchNotes={synchNotes}\n                darkMode={darkMode}\n            />\n            \n        </div>\n    )\n}\nexport default NotesPage"],"sourceRoot":""}